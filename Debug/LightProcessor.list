
LightProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800691c  0800691c  0000791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800695c  0800695c  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800695c  0800695c  0000795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006964  08006964  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006964  08006964  00007964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006968  08006968  00007968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800696c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  2000000c  08006978  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08006978  00008600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6c0  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b8  00000000  00000000  000246fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00027ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128f  00000000  00000000  00029290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dc0  00000000  00000000  0002a51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a471  00000000  00000000  000532df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115061  00000000  00000000  0006d750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001827b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000679c  00000000  00000000  001827f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00188f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006904 	.word	0x08006904

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006904 	.word	0x08006904

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 ff45 	bl	80013d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f816 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 fb6c 	bl	8000c2c <MX_GPIO_Init>
  MX_UART5_Init();
 8000554:	f000 faf4 	bl	8000b40 <MX_UART5_Init>
  MX_ADC1_Init();
 8000558:	f000 f85c 	bl	8000614 <MX_ADC1_Init>
  MX_ADC2_Init();
 800055c:	f000 f8d2 	bl	8000704 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000560:	f000 f936 	bl	80007d0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000564:	f000 f9ac 	bl	80008c0 <MX_ADC4_Init>
  MX_TIM3_Init();
 8000568:	f000 fa9a 	bl	8000aa0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800056c:	f000 fa48 	bl	8000a00 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000570:	f000 fa0c 	bl	800098c <MX_DAC1_Init>
  MX_USB_PCD_Init();
 8000574:	f000 fb32 	bl	8000bdc <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x34>

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2238      	movs	r2, #56	@ 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 f98d 	bl	80068aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059e:	2000      	movs	r0, #0
 80005a0:	f003 f9ba 	bl	8003918 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005a4:	2321      	movs	r3, #33	@ 0x21
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	2303      	movs	r3, #3
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005be:	2355      	movs	r3, #85	@ 0x55
 80005c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fa54 	bl	8003a80 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005de:	f000 fbb5 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fd52 	bl	80040a4 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000606:	f000 fba1 	bl	8000d4c <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	@ 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	@ 0x30
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2220      	movs	r2, #32
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f006 f93c 	bl	80068aa <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000634:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000638:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800063a:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800063c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000642:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800065c:	2204      	movs	r2, #4
 800065e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000666:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800066e:	2201      	movs	r2, #1
 8000670:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	4817      	ldr	r0, [pc, #92]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800069e:	f001 f923 	bl	80018e8 <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006a8:	f000 fb50 	bl	8000d4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	4811      	ldr	r0, [pc, #68]	@ (80006fc <MX_ADC1_Init+0xe8>)
 80006b8:	f002 f9e8 	bl	8002a8c <HAL_ADCEx_MultiModeConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006c2:	f000 fb43 	bl	8000d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_ADC1_Init+0xec>)
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2306      	movs	r3, #6
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d2:	237f      	movs	r3, #127	@ 0x7f
 80006d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d6:	2304      	movs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <MX_ADC1_Init+0xe8>)
 80006e4:	f001 fd3a 	bl	800215c <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ee:	f000 fb2d 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	@ 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000028 	.word	0x20000028
 8000700:	0c900008 	.word	0x0c900008

08000704 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f006 f8ca 	bl	80068aa <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000718:	4a2b      	ldr	r2, [pc, #172]	@ (80007c8 <MX_ADC2_Init+0xc4>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071c:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800071e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000722:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b27      	ldr	r3, [pc, #156]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000730:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800073e:	2204      	movs	r2, #4
 8000740:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077e:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000780:	f001 f8b2 	bl	80018e8 <HAL_ADC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800078a:	f000 fadf 	bl	8000d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_ADC2_Init+0xc8>)
 8000790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000792:	2306      	movs	r3, #6
 8000794:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800079a:	237f      	movs	r3, #127	@ 0x7f
 800079c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079e:	2304      	movs	r3, #4
 80007a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 80007ac:	f001 fcd6 	bl	800215c <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007b6:	f000 fac9 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000094 	.word	0x20000094
 80007c8:	50000100 	.word	0x50000100
 80007cc:	0c900008 	.word	0x0c900008

080007d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2220      	movs	r2, #32
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 f85e 	bl	80068aa <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ee:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007f0:	4a31      	ldr	r2, [pc, #196]	@ (80008b8 <MX_ADC3_Init+0xe8>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000802:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000816:	2204      	movs	r2, #4
 8000818:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000828:	2201      	movs	r2, #1
 800082a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000856:	4817      	ldr	r0, [pc, #92]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000858:	f001 f846 	bl	80018e8 <HAL_ADC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000862:	f000 fa73 	bl	8000d4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800086a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000872:	f002 f90b 	bl	8002a8c <HAL_ADCEx_MultiModeConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800087c:	f000 fa66 	bl	8000d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_ADC3_Init+0xec>)
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000884:	2306      	movs	r3, #6
 8000886:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800088c:	237f      	movs	r3, #127	@ 0x7f
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000890:	2304      	movs	r3, #4
 8000892:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800089e:	f001 fc5d 	bl	800215c <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80008a8:	f000 fa50 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3730      	adds	r7, #48	@ 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000100 	.word	0x20000100
 80008b8:	50000400 	.word	0x50000400
 80008bc:	04300002 	.word	0x04300002

080008c0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 ffec 	bl	80068aa <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000984 <MX_ADC4_Init+0xc4>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008de:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008e0:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e6:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008ec:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f8:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000904:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_ADC4_Init+0xc0>)
 800090c:	2201      	movs	r2, #1
 800090e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000918:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <MX_ADC4_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000924:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_ADC4_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_ADC4_Init+0xc0>)
 800093c:	f000 ffd4 	bl	80018e8 <HAL_ADC_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000946:	f000 fa01 	bl	8000d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_ADC4_Init+0xc8>)
 800094c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094e:	2306      	movs	r3, #6
 8000950:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000956:	237f      	movs	r3, #127	@ 0x7f
 8000958:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800095a:	2304      	movs	r3, #4
 800095c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000968:	f001 fbf8 	bl	800215c <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000972:	f000 f9eb 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000016c 	.word	0x2000016c
 8000984:	50000500 	.word	0x50000500
 8000988:	14f00020 	.word	0x14f00020

0800098c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	@ 0x30
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2230      	movs	r2, #48	@ 0x30
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f005 ff86 	bl	80068aa <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800099e:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_DAC1_Init+0x6c>)
 80009a0:	4a16      	ldr	r2, [pc, #88]	@ (80009fc <MX_DAC1_Init+0x70>)
 80009a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009a4:	4814      	ldr	r0, [pc, #80]	@ (80009f8 <MX_DAC1_Init+0x6c>)
 80009a6:	f002 fa88 	bl	8002eba <HAL_DAC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009b0:	f000 f9cc 	bl	8000d4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80009b4:	2302      	movs	r3, #2
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <MX_DAC1_Init+0x6c>)
 80009e0:	f002 fa8e 	bl	8002f00 <HAL_DAC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80009ea:	f000 f9af 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	@ 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001d8 	.word	0x200001d8
 80009fc:	50000800 	.word	0x50000800

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4999;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a28:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499999;
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a36:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <MX_TIM2_Init+0x9c>)
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a48:	f003 ff92 	bl	8004970 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a52:	f000 f97b 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a64:	f004 f92a 	bl	8004cbc <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a6e:	f000 f96d 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a80:	f004 fbb4 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f000 f95f 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200001ec 	.word	0x200001ec
 8000a9c:	0007a11f 	.word	0x0007a11f

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <MX_TIM3_Init+0x9c>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4999;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ac6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ad4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae6:	4814      	ldr	r0, [pc, #80]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ae8:	f003 ff42 	bl	8004970 <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000af2:	f000 f92b 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000b04:	f004 f8da 	bl	8004cbc <HAL_TIM_ConfigClockSource>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b0e:	f000 f91d 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000b20:	f004 fb64 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b2a:	f000 f90f 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000238 	.word	0x20000238
 8000b3c:	40000400 	.word	0x40000400

08000b40 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b44:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b46:	4a24      	ldr	r2, [pc, #144]	@ (8000bd8 <MX_UART5_Init+0x98>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_MultiProcessor_Init(&huart5, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4811      	ldr	r0, [pc, #68]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b8e:	f004 fc09 	bl	80053a4 <HAL_MultiProcessor_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_UART5_Init+0x5c>
  {
    Error_Handler();
 8000b98:	f000 f8d8 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000ba0:	f005 fd7f 	bl	80066a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_UART5_Init+0x6e>
  {
    Error_Handler();
 8000baa:	f000 f8cf 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000bb2:	f005 fdb4 	bl	800671e <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_UART5_Init+0x80>
  {
    Error_Handler();
 8000bbc:	f000 f8c6 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart5) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000bc2:	f005 fd33 	bl	800662c <HAL_UARTEx_EnableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_UART5_Init+0x90>
  {
    Error_Handler();
 8000bcc:	f000 f8be 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000284 	.word	0x20000284
 8000bd8:	40005000 	.word	0x40005000

08000bdc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000be0:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000be2:	4a11      	ldr	r2, [pc, #68]	@ (8000c28 <MX_USB_PCD_Init+0x4c>)
 8000be4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000be8:	2208      	movs	r2, #8
 8000bea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_USB_PCD_Init+0x48>)
 8000c12:	f002 fd89 	bl	8003728 <HAL_PCD_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000c1c:	f000 f896 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000318 	.word	0x20000318
 8000c28:	40005c00 	.word	0x40005c00

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c42:	4b3f      	ldr	r3, [pc, #252]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a3e      	ldr	r2, [pc, #248]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b39      	ldr	r3, [pc, #228]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	4a38      	ldr	r2, [pc, #224]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c66:	4b36      	ldr	r3, [pc, #216]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b33      	ldr	r3, [pc, #204]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	4a32      	ldr	r2, [pc, #200]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7e:	4b30      	ldr	r3, [pc, #192]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c96:	4b2a      	ldr	r3, [pc, #168]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	4a26      	ldr	r2, [pc, #152]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cae:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <MX_GPIO_Init+0x114>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RX_IND_Pin|TX_IND_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc4:	f002 fd18 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC4_IDLE_IND_Pin ADC1_IDLE_IND_Pin ADC1_MOD1_IND_Pin ADC1_MOD2_IND_Pin
                           ADC_MOD3_IND_Pin ADC3_MOD2_IND_Pin ADC2_MOD3_IND_Pin ADC2_MOD3_INDC7_Pin
                           ADC2_MOD2_IND_Pin ADC2_MOD1_IND_Pin */
  GPIO_InitStruct.Pin = ADC4_IDLE_IND_Pin|ADC1_IDLE_IND_Pin|ADC1_MOD1_IND_Pin|ADC1_MOD2_IND_Pin
 8000cc8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000ccc:	617b      	str	r3, [r7, #20]
                          |ADC_MOD3_IND_Pin|ADC3_MOD2_IND_Pin|ADC2_MOD3_IND_Pin|ADC2_MOD3_INDC7_Pin
                          |ADC2_MOD2_IND_Pin|ADC2_MOD1_IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4819      	ldr	r0, [pc, #100]	@ (8000d44 <MX_GPIO_Init+0x118>)
 8000cde:	f002 fb89 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_MOD3_IND_Pin ADC1_MOD4_IND_Pin ADC_MOD4_IND_Pin ADC2_IDLE_IND_Pin */
  GPIO_InitStruct.Pin = ADC1_MOD3_IND_Pin|ADC1_MOD4_IND_Pin|ADC_MOD4_IND_Pin|ADC2_IDLE_IND_Pin;
 8000ce2:	f240 1383 	movw	r3, #387	@ 0x183
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfa:	f002 fb7b 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_MOD1_IND_Pin ADC3_IDLE_IND_Pin ADC4_MOD4_IND_Pin ADC4_MOD3_IND_Pin
                           ADC4_MOD2_IND_Pin ADC4_MOD1_IND_Pin */
  GPIO_InitStruct.Pin = ADC3_MOD1_IND_Pin|ADC3_IDLE_IND_Pin|ADC4_MOD4_IND_Pin|ADC4_MOD3_IND_Pin
 8000cfe:	f647 0305 	movw	r3, #30725	@ 0x7805
 8000d02:	617b      	str	r3, [r7, #20]
                          |ADC4_MOD2_IND_Pin|ADC4_MOD1_IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_GPIO_Init+0x11c>)
 8000d14:	f002 fb6e 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_IND_Pin TX_IND_Pin */
  GPIO_InitStruct.Pin = RX_IND_Pin|TX_IND_Pin;
 8000d18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d34:	f002 fb5e 	bl	80033f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	@ 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000400 	.word	0x48000400

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <Error_Handler+0x8>

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d62:	4a0e      	ldr	r2, [pc, #56]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d8e:	f002 fe67 	bl	8003a60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0a4      	sub	sp, #144	@ 0x90
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dbc:	2254      	movs	r2, #84	@ 0x54
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f005 fd72 	bl	80068aa <memset>
  if(hadc->Instance==ADC1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dce:	d140      	bne.n	8000e52 <HAL_ADC_MspInit+0xb2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dd6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 fb77 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000dec:	f7ff ffae 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000df0:	4b8a      	ldr	r3, [pc, #552]	@ (800101c <HAL_ADC_MspInit+0x27c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a89      	ldr	r2, [pc, #548]	@ (800101c <HAL_ADC_MspInit+0x27c>)
 8000df8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dfa:	4b88      	ldr	r3, [pc, #544]	@ (800101c <HAL_ADC_MspInit+0x27c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10b      	bne.n	8000e1a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e02:	4b87      	ldr	r3, [pc, #540]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a86      	ldr	r2, [pc, #536]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b84      	ldr	r3, [pc, #528]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b81      	ldr	r3, [pc, #516]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	4a80      	ldr	r2, [pc, #512]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e26:	4b7e      	ldr	r3, [pc, #504]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e32:	2304      	movs	r3, #4
 8000e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4c:	f002 fad2 	bl	80033f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000e50:	e0df      	b.n	8001012 <HAL_ADC_MspInit+0x272>
  else if(hadc->Instance==ADC2)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a73      	ldr	r2, [pc, #460]	@ (8001024 <HAL_ADC_MspInit+0x284>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d140      	bne.n	8000ede <HAL_ADC_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fb31 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_ADC_MspInit+0xdc>
      Error_Handler();
 8000e78:	f7ff ff68 	bl	8000d4c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e7c:	4b67      	ldr	r3, [pc, #412]	@ (800101c <HAL_ADC_MspInit+0x27c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a66      	ldr	r2, [pc, #408]	@ (800101c <HAL_ADC_MspInit+0x27c>)
 8000e84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e86:	4b65      	ldr	r3, [pc, #404]	@ (800101c <HAL_ADC_MspInit+0x27c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e8e:	4b64      	ldr	r3, [pc, #400]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4a63      	ldr	r2, [pc, #396]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4b61      	ldr	r3, [pc, #388]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4a5d      	ldr	r2, [pc, #372]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ebe:	2340      	movs	r3, #64	@ 0x40
 8000ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed8:	f002 fa8c 	bl	80033f4 <HAL_GPIO_Init>
}
 8000edc:	e099      	b.n	8001012 <HAL_ADC_MspInit+0x272>
  else if(hadc->Instance==ADC3)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a51      	ldr	r2, [pc, #324]	@ (8001028 <HAL_ADC_MspInit+0x288>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d147      	bne.n	8000f78 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ee8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000eee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000ef2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 faeb 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_ADC_MspInit+0x168>
      Error_Handler();
 8000f04:	f7ff ff22 	bl	8000d4c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000f08:	4b48      	ldr	r3, [pc, #288]	@ (800102c <HAL_ADC_MspInit+0x28c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a47      	ldr	r2, [pc, #284]	@ (800102c <HAL_ADC_MspInit+0x28c>)
 8000f10:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000f12:	4b46      	ldr	r3, [pc, #280]	@ (800102c <HAL_ADC_MspInit+0x28c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10b      	bne.n	8000f32 <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000f1a:	4b41      	ldr	r3, [pc, #260]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a40      	ldr	r2, [pc, #256]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b3e      	ldr	r3, [pc, #248]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b3b      	ldr	r3, [pc, #236]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a3a      	ldr	r2, [pc, #232]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b38      	ldr	r3, [pc, #224]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4833      	ldr	r0, [pc, #204]	@ (8001030 <HAL_ADC_MspInit+0x290>)
 8000f62:	f002 fa47 	bl	80033f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	202f      	movs	r0, #47	@ 0x2f
 8000f6c:	f001 ff71 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f70:	202f      	movs	r0, #47	@ 0x2f
 8000f72:	f001 ff88 	bl	8002e86 <HAL_NVIC_EnableIRQ>
}
 8000f76:	e04c      	b.n	8001012 <HAL_ADC_MspInit+0x272>
  else if(hadc->Instance==ADC4)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001034 <HAL_ADC_MspInit+0x294>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d147      	bne.n	8001012 <HAL_ADC_MspInit+0x272>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000f88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000f8c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 fa9e 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_ADC_MspInit+0x202>
      Error_Handler();
 8000f9e:	f7ff fed5 	bl	8000d4c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <HAL_ADC_MspInit+0x28c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a20      	ldr	r2, [pc, #128]	@ (800102c <HAL_ADC_MspInit+0x28c>)
 8000faa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000fac:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <HAL_ADC_MspInit+0x28c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d10b      	bne.n	8000fcc <HAL_ADC_MspInit+0x22c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb8:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc0:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd0:	4a13      	ldr	r2, [pc, #76]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000fd2:	f043 0302 	orr.w	r3, r3, #2
 8000fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <HAL_ADC_MspInit+0x280>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fe8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <HAL_ADC_MspInit+0x290>)
 8000ffe:	f002 f9f9 	bl	80033f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	203d      	movs	r0, #61	@ 0x3d
 8001008:	f001 ff23 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 800100c:	203d      	movs	r0, #61	@ 0x3d
 800100e:	f001 ff3a 	bl	8002e86 <HAL_NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3790      	adds	r7, #144	@ 0x90
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200005f4 	.word	0x200005f4
 8001020:	40021000 	.word	0x40021000
 8001024:	50000100 	.word	0x50000100
 8001028:	50000400 	.word	0x50000400
 800102c:	200005f8 	.word	0x200005f8
 8001030:	48000400 	.word	0x48000400
 8001034:	50000500 	.word	0x50000500

08001038 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <HAL_DAC_MspInit+0x74>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d124      	bne.n	80010a4 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_DAC_MspInit+0x78>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <HAL_DAC_MspInit+0x78>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <HAL_DAC_MspInit+0x78>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <HAL_DAC_MspInit+0x78>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <HAL_DAC_MspInit+0x78>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <HAL_DAC_MspInit+0x78>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800108a:	2310      	movs	r3, #16
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108e:	2303      	movs	r3, #3
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f002 f9a8 	bl	80033f4 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	@ 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	50000800 	.word	0x50000800
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c4:	d114      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <HAL_TIM_Base_MspInit+0x78>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <HAL_TIM_Base_MspInit+0x78>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_TIM_Base_MspInit+0x78>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	201c      	movs	r0, #28
 80010e4:	f001 feb5 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010e8:	201c      	movs	r0, #28
 80010ea:	f001 fecc 	bl	8002e86 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ee:	e018      	b.n	8001122 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <HAL_TIM_Base_MspInit+0x7c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d113      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <HAL_TIM_Base_MspInit+0x78>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <HAL_TIM_Base_MspInit+0x78>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6593      	str	r3, [r2, #88]	@ 0x58
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_TIM_Base_MspInit+0x78>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	201d      	movs	r0, #29
 8001118:	f001 fe9b 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800111c:	201d      	movs	r0, #29
 800111e:	f001 feb2 	bl	8002e86 <HAL_NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40000400 	.word	0x40000400

08001134 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0a0      	sub	sp, #128	@ 0x80
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2254      	movs	r2, #84	@ 0x54
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f005 fba8 	bl	80068aa <memset>
  if(huart->Instance==UART5)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a31      	ldr	r2, [pc, #196]	@ (8001224 <HAL_UART_MspInit+0xf0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d15a      	bne.n	800121a <HAL_UART_MspInit+0xe6>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001164:	2310      	movs	r3, #16
 8001166:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f9af 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f7ff fde6 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001180:	4b29      	ldr	r3, [pc, #164]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	4a28      	ldr	r2, [pc, #160]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 8001186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800118a:	6593      	str	r3, [r2, #88]	@ 0x58
 800118c:	4b26      	ldr	r3, [pc, #152]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119c:	4a22      	ldr	r2, [pc, #136]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a4:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <HAL_UART_MspInit+0xf4>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ce:	2312      	movs	r3, #18
 80011d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80011da:	2305      	movs	r3, #5
 80011dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011e2:	4619      	mov	r1, r3
 80011e4:	4811      	ldr	r0, [pc, #68]	@ (800122c <HAL_UART_MspInit+0xf8>)
 80011e6:	f002 f905 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ea:	2304      	movs	r3, #4
 80011ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ee:	2312      	movs	r3, #18
 80011f0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80011fa:	2305      	movs	r3, #5
 80011fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001202:	4619      	mov	r1, r3
 8001204:	480a      	ldr	r0, [pc, #40]	@ (8001230 <HAL_UART_MspInit+0xfc>)
 8001206:	f002 f8f5 	bl	80033f4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2035      	movs	r0, #53	@ 0x35
 8001210:	f001 fe1f 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001214:	2035      	movs	r0, #53	@ 0x35
 8001216:	f001 fe36 	bl	8002e86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 800121a:	bf00      	nop
 800121c:	3780      	adds	r7, #128	@ 0x80
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40005000 	.word	0x40005000
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800
 8001230:	48000c00 	.word	0x48000c00

08001234 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b098      	sub	sp, #96	@ 0x60
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2254      	movs	r2, #84	@ 0x54
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f005 fb30 	bl	80068aa <memset>
  if(hpcd->Instance==USB)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a11      	ldr	r2, [pc, #68]	@ (8001294 <HAL_PCD_MspInit+0x60>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d11a      	bne.n	800128a <HAL_PCD_MspInit+0x56>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001258:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	4618      	mov	r0, r3
 8001264:	f003 f936 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800126e:	f7ff fd6d 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_PCD_MspInit+0x64>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_PCD_MspInit+0x64>)
 8001278:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800127c:	6593      	str	r3, [r2, #88]	@ 0x58
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_PCD_MspInit+0x64>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3760      	adds	r7, #96	@ 0x60
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40005c00 	.word	0x40005c00
 8001298:	40021000 	.word	0x40021000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <NMI_Handler+0x4>

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f8c3 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <TIM2_IRQHandler+0x10>)
 8001302:	f003 fb8c 	bl	8004a1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001ec 	.word	0x200001ec

08001310 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM3_IRQHandler+0x10>)
 8001316:	f003 fb82 	bl	8004a1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000238 	.word	0x20000238

08001324 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <ADC3_IRQHandler+0x10>)
 800132a:	f000 fc99 	bl	8001c60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000100 	.word	0x20000100

08001338 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <UART5_IRQHandler+0x10>)
 800133e:	f004 f89d 	bl	800547c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000284 	.word	0x20000284

0800134c <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <ADC4_IRQHandler+0x10>)
 8001352:	f000 fc85 	bl	8001c60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000016c 	.word	0x2000016c

08001360 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001384:	480d      	ldr	r0, [pc, #52]	@ (80013bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001386:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001388:	f7ff ffea 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	@ (80013c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <LoopForever+0xe>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	@ (80013cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	@ (80013d0 <LoopForever+0x16>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b2:	f005 fa83 	bl	80068bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013b6:	f7ff f8c5 	bl	8000544 <main>

080013ba <LoopForever>:

LoopForever:
    b LoopForever
 80013ba:	e7fe      	b.n	80013ba <LoopForever>
  ldr   r0, =_estack
 80013bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013c8:	0800696c 	.word	0x0800696c
  ldr r2, =_sbss
 80013cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013d0:	20000600 	.word	0x20000600

080013d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC1_2_IRQHandler>

080013d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f001 fd2b 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	200f      	movs	r0, #15
 80013e8:	f000 f80e 	bl	8001408 <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e001      	b.n	80013fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f8:	f7ff fcae 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013fc:	79fb      	ldrb	r3, [r7, #7]

}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001414:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <HAL_InitTick+0x68>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d022      	beq.n	8001462 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_InitTick+0x6c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <HAL_InitTick+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001428:	fbb1 f3f3 	udiv	r3, r1, r3
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fd36 	bl	8002ea2 <HAL_SYSTICK_Config>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10f      	bne.n	800145c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	d809      	bhi.n	8001456 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001442:	2200      	movs	r2, #0
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800144a:	f001 fd02 	bl	8002e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <HAL_InitTick+0x70>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e007      	b.n	8001466 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	e004      	b.n	8001466 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000008 	.word	0x20000008
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_IncTick+0x1c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_IncTick+0x20>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	4a03      	ldr	r2, [pc, #12]	@ (8001498 <HAL_IncTick+0x1c>)
 800148c:	6013      	str	r3, [r2, #0]
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	200005fc 	.word	0x200005fc
 800149c:	20000008 	.word	0x20000008

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200005fc 	.word	0x200005fc

080014b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	609a      	str	r2, [r3, #8]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3360      	adds	r3, #96	@ 0x60
 8001532:	461a      	mov	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <LL_ADC_SetOffset+0x44>)
 8001542:	4013      	ands	r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	4313      	orrs	r3, r2
 8001550:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	03fff000 	.word	0x03fff000

08001568 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3360      	adds	r3, #96	@ 0x60
 8001576:	461a      	mov	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3360      	adds	r3, #96	@ 0x60
 80015a4:	461a      	mov	r2, r3
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b087      	sub	sp, #28
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3360      	adds	r3, #96	@ 0x60
 80015da:	461a      	mov	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3360      	adds	r3, #96	@ 0x60
 8001610:	461a      	mov	r2, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800162a:	bf00      	nop
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	615a      	str	r2, [r3, #20]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001682:	b480      	push	{r7}
 8001684:	b087      	sub	sp, #28
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3330      	adds	r3, #48	@ 0x30
 8001692:	461a      	mov	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	4413      	add	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	211f      	movs	r1, #31
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	0e9b      	lsrs	r3, r3, #26
 80016ba:	f003 011f 	and.w	r1, r3, #31
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016ce:	bf00      	nop
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3314      	adds	r3, #20
 8001710:	461a      	mov	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	0e5b      	lsrs	r3, r3, #25
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	0d1b      	lsrs	r3, r3, #20
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2107      	movs	r1, #7
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	401a      	ands	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	0d1b      	lsrs	r3, r3, #20
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	431a      	orrs	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800174a:	bf00      	nop
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0318 	and.w	r3, r3, #24
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <LL_ADC_SetChannelSingleDiff+0x44>)
 800177c:	40d9      	lsrs	r1, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	400b      	ands	r3, r1
 8001782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001786:	431a      	orrs	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	0007ffff 	.word	0x0007ffff

080017a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 031f 	and.w	r3, r3, #31
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6093      	str	r3, [r2, #8]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800180c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001810:	d101      	bne.n	8001816 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001838:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001860:	d101      	bne.n	8001866 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <LL_ADC_IsEnabled+0x18>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <LL_ADC_IsEnabled+0x1a>
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d101      	bne.n	80018b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d101      	bne.n	80018d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1a9      	b.n	8001c56 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fa45 	bl	8000da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff67 	bl	80017fc <LL_ADC_IsDeepPowerDownEnabled>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff4d 	bl	80017d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff82 	bl	800184c <LL_ADC_IsInternalRegulatorEnabled>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d115      	bne.n	800197a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff66 	bl	8001824 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001958:	4b9c      	ldr	r3, [pc, #624]	@ (8001bcc <HAL_ADC_Init+0x2e4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	4a9c      	ldr	r2, [pc, #624]	@ (8001bd0 <HAL_ADC_Init+0x2e8>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	099b      	lsrs	r3, r3, #6
 8001966:	3301      	adds	r3, #1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800196c:	e002      	b.n	8001974 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3b01      	subs	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff64 	bl	800184c <LL_ADC_IsInternalRegulatorEnabled>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10d      	bne.n	80019a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	f043 0210 	orr.w	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff75 	bl	800189a <LL_ADC_REG_IsConversionOngoing>
 80019b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 8142 	bne.w	8001c44 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 813e 	bne.w	8001c44 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019d0:	f043 0202 	orr.w	r2, r3, #2
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff49 	bl	8001874 <LL_ADC_IsEnabled>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d141      	bne.n	8001a6c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019f0:	d004      	beq.n	80019fc <HAL_ADC_Init+0x114>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a77      	ldr	r2, [pc, #476]	@ (8001bd4 <HAL_ADC_Init+0x2ec>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d10f      	bne.n	8001a1c <HAL_ADC_Init+0x134>
 80019fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001a00:	f7ff ff38 	bl	8001874 <LL_ADC_IsEnabled>
 8001a04:	4604      	mov	r4, r0
 8001a06:	4873      	ldr	r0, [pc, #460]	@ (8001bd4 <HAL_ADC_Init+0x2ec>)
 8001a08:	f7ff ff34 	bl	8001874 <LL_ADC_IsEnabled>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4323      	orrs	r3, r4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	e012      	b.n	8001a42 <HAL_ADC_Init+0x15a>
 8001a1c:	486e      	ldr	r0, [pc, #440]	@ (8001bd8 <HAL_ADC_Init+0x2f0>)
 8001a1e:	f7ff ff29 	bl	8001874 <LL_ADC_IsEnabled>
 8001a22:	4604      	mov	r4, r0
 8001a24:	486d      	ldr	r0, [pc, #436]	@ (8001bdc <HAL_ADC_Init+0x2f4>)
 8001a26:	f7ff ff25 	bl	8001874 <LL_ADC_IsEnabled>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	431c      	orrs	r4, r3
 8001a2e:	486c      	ldr	r0, [pc, #432]	@ (8001be0 <HAL_ADC_Init+0x2f8>)
 8001a30:	f7ff ff20 	bl	8001874 <LL_ADC_IsEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4323      	orrs	r3, r4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a4e:	d004      	beq.n	8001a5a <HAL_ADC_Init+0x172>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a5f      	ldr	r2, [pc, #380]	@ (8001bd4 <HAL_ADC_Init+0x2ec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Init+0x176>
 8001a5a:	4a62      	ldr	r2, [pc, #392]	@ (8001be4 <HAL_ADC_Init+0x2fc>)
 8001a5c:	e000      	b.n	8001a60 <HAL_ADC_Init+0x178>
 8001a5e:	4a62      	ldr	r2, [pc, #392]	@ (8001be8 <HAL_ADC_Init+0x300>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f7ff fd26 	bl	80014b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7f5b      	ldrb	r3, [r3, #29]
 8001a70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d106      	bne.n	8001aa8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	045b      	lsls	r3, r3, #17
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	4b48      	ldr	r3, [pc, #288]	@ (8001bec <HAL_ADC_Init+0x304>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fee4 	bl	80018c0 <LL_ADC_INJ_IsConversionOngoing>
 8001af8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d17f      	bne.n	8001c00 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d17c      	bne.n	8001c00 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b0a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b12:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b22:	f023 0302 	bic.w	r3, r3, #2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d017      	beq.n	8001b68 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6911      	ldr	r1, [r2, #16]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001b66:	e013      	b.n	8001b90 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b8c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d12a      	bne.n	8001bf0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bb0:	4311      	orrs	r1, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bb6:	4311      	orrs	r1, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	e019      	b.n	8001c00 <HAL_ADC_Init+0x318>
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	053e2d63 	.word	0x053e2d63
 8001bd4:	50000100 	.word	0x50000100
 8001bd8:	50000400 	.word	0x50000400
 8001bdc:	50000500 	.word	0x50000500
 8001be0:	50000600 	.word	0x50000600
 8001be4:	50000300 	.word	0x50000300
 8001be8:	50000700 	.word	0x50000700
 8001bec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10c      	bne.n	8001c22 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f023 010f 	bic.w	r1, r3, #15
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c20:	e007      	b.n	8001c32 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 020f 	bic.w	r2, r2, #15
 8001c30:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c42:	e007      	b.n	8001c54 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	@ 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}
 8001c5e:	bf00      	nop

08001c60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c84:	d004      	beq.n	8001c90 <HAL_ADC_IRQHandler+0x30>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a8e      	ldr	r2, [pc, #568]	@ (8001ec4 <HAL_ADC_IRQHandler+0x264>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x34>
 8001c90:	4b8d      	ldr	r3, [pc, #564]	@ (8001ec8 <HAL_ADC_IRQHandler+0x268>)
 8001c92:	e000      	b.n	8001c96 <HAL_ADC_IRQHandler+0x36>
 8001c94:	4b8d      	ldr	r3, [pc, #564]	@ (8001ecc <HAL_ADC_IRQHandler+0x26c>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fd82 	bl	80017a0 <LL_ADC_GetMultimode>
 8001c9c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d017      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x78>
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d012      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fed4 	bl	8002a78 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <HAL_ADC_IRQHandler+0x8c>
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10b      	bne.n	8001d04 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8094 	beq.w	8001e20 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 808e 	beq.w	8001e20 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d14:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fc9b 	bl	800165c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d072      	beq.n	8001e12 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a64      	ldr	r2, [pc, #400]	@ (8001ec4 <HAL_ADC_IRQHandler+0x264>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_ADC_IRQHandler+0xea>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a65      	ldr	r2, [pc, #404]	@ (8001ed0 <HAL_ADC_IRQHandler+0x270>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d002      	beq.n	8001d46 <HAL_ADC_IRQHandler+0xe6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	e003      	b.n	8001d4e <HAL_ADC_IRQHandler+0xee>
 8001d46:	4b63      	ldr	r3, [pc, #396]	@ (8001ed4 <HAL_ADC_IRQHandler+0x274>)
 8001d48:	e001      	b.n	8001d4e <HAL_ADC_IRQHandler+0xee>
 8001d4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d008      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d002      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d104      	bne.n	8001d72 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	e014      	b.n	8001d9c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a53      	ldr	r2, [pc, #332]	@ (8001ec4 <HAL_ADC_IRQHandler+0x264>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d009      	beq.n	8001d90 <HAL_ADC_IRQHandler+0x130>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a53      	ldr	r2, [pc, #332]	@ (8001ed0 <HAL_ADC_IRQHandler+0x270>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d002      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x12c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	e003      	b.n	8001d94 <HAL_ADC_IRQHandler+0x134>
 8001d8c:	4b51      	ldr	r3, [pc, #324]	@ (8001ed4 <HAL_ADC_IRQHandler+0x274>)
 8001d8e:	e001      	b.n	8001d94 <HAL_ADC_IRQHandler+0x134>
 8001d90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d94:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d135      	bne.n	8001e12 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d12e      	bne.n	8001e12 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fd6e 	bl	800189a <LL_ADC_REG_IsConversionOngoing>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11a      	bne.n	8001dfa <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 020c 	bic.w	r2, r2, #12
 8001dd2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d112      	bne.n	8001e12 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001df8:	e00b      	b.n	8001e12 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfe:	f043 0210 	orr.w	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f984 	bl	8002120 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	220c      	movs	r2, #12
 8001e1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x1d4>
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10b      	bne.n	8001e4c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80b3 	beq.w	8001fa6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80ad 	beq.w	8001fa6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fc36 	bl	80016da <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e6e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fbf1 	bl	800165c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e7a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a10      	ldr	r2, [pc, #64]	@ (8001ec4 <HAL_ADC_IRQHandler+0x264>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_ADC_IRQHandler+0x23a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a11      	ldr	r2, [pc, #68]	@ (8001ed0 <HAL_ADC_IRQHandler+0x270>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d002      	beq.n	8001e96 <HAL_ADC_IRQHandler+0x236>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	e003      	b.n	8001e9e <HAL_ADC_IRQHandler+0x23e>
 8001e96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <HAL_ADC_IRQHandler+0x274>)
 8001e98:	e001      	b.n	8001e9e <HAL_ADC_IRQHandler+0x23e>
 8001e9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d008      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d002      	beq.n	8001eb8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b07      	cmp	r3, #7
 8001eb6:	d10f      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	623b      	str	r3, [r7, #32]
 8001ec0:	e01f      	b.n	8001f02 <HAL_ADC_IRQHandler+0x2a2>
 8001ec2:	bf00      	nop
 8001ec4:	50000100 	.word	0x50000100
 8001ec8:	50000300 	.word	0x50000300
 8001ecc:	50000700 	.word	0x50000700
 8001ed0:	50000500 	.word	0x50000500
 8001ed4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a8b      	ldr	r2, [pc, #556]	@ (800210c <HAL_ADC_IRQHandler+0x4ac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <HAL_ADC_IRQHandler+0x296>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a8a      	ldr	r2, [pc, #552]	@ (8002110 <HAL_ADC_IRQHandler+0x4b0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d002      	beq.n	8001ef2 <HAL_ADC_IRQHandler+0x292>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	e003      	b.n	8001efa <HAL_ADC_IRQHandler+0x29a>
 8001ef2:	4b88      	ldr	r3, [pc, #544]	@ (8002114 <HAL_ADC_IRQHandler+0x4b4>)
 8001ef4:	e001      	b.n	8001efa <HAL_ADC_IRQHandler+0x29a>
 8001ef6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001efa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d047      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_ADC_IRQHandler+0x2c2>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03f      	beq.n	8001f98 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d13a      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f2c:	2b40      	cmp	r3, #64	@ 0x40
 8001f2e:	d133      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d12e      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fcbe 	bl	80018c0 <LL_ADC_INJ_IsConversionOngoing>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11a      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f58:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d112      	bne.n	8001f98 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f7e:	e00b      	b.n	8001f98 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	f043 0210 	orr.w	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fd45 	bl	8002a28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2260      	movs	r2, #96	@ 0x60
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d011      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x374>
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8b4 	bl	8002134 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2280      	movs	r2, #128	@ 0x80
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d012      	beq.n	8002004 <HAL_ADC_IRQHandler+0x3a4>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fd2b 	bl	8002a50 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_ADC_IRQHandler+0x3d4>
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fd1d 	bl	8002a64 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d043      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x466>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d03e      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002050:	2301      	movs	r3, #1
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
 8002054:	e021      	b.n	800209a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d015      	beq.n	8002088 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002064:	d004      	beq.n	8002070 <HAL_ADC_IRQHandler+0x410>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a28      	ldr	r2, [pc, #160]	@ (800210c <HAL_ADC_IRQHandler+0x4ac>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d101      	bne.n	8002074 <HAL_ADC_IRQHandler+0x414>
 8002070:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <HAL_ADC_IRQHandler+0x4b8>)
 8002072:	e000      	b.n	8002076 <HAL_ADC_IRQHandler+0x416>
 8002074:	4b29      	ldr	r3, [pc, #164]	@ (800211c <HAL_ADC_IRQHandler+0x4bc>)
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fba0 	bl	80017bc <LL_ADC_GetMultiDMATransfer>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002082:	2301      	movs	r3, #1
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
 8002086:	e008      	b.n	800209a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002096:	2301      	movs	r3, #1
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	2b01      	cmp	r3, #1
 800209e:	d10e      	bne.n	80020be <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b0:	f043 0202 	orr.w	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f845 	bl	8002148 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2210      	movs	r2, #16
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d018      	beq.n	8002102 <HAL_ADC_IRQHandler+0x4a2>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d013      	beq.n	8002102 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ea:	f043 0208 	orr.w	r2, r3, #8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fc9d 	bl	8002a3c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002102:	bf00      	nop
 8002104:	3728      	adds	r7, #40	@ 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	50000100 	.word	0x50000100
 8002110:	50000500 	.word	0x50000500
 8002114:	50000400 	.word	0x50000400
 8002118:	50000300 	.word	0x50000300
 800211c:	50000700 	.word	0x50000700

08002120 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0b6      	sub	sp, #216	@ 0xd8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x24>
 800217a:	2302      	movs	r3, #2
 800217c:	f000 bc13 	b.w	80029a6 <HAL_ADC_ConfigChannel+0x84a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fb84 	bl	800189a <LL_ADC_REG_IsConversionOngoing>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	f040 83f3 	bne.w	8002980 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f7ff fa6b 	bl	8001682 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fb72 	bl	800189a <LL_ADC_REG_IsConversionOngoing>
 80021b6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fb7e 	bl	80018c0 <LL_ADC_INJ_IsConversionOngoing>
 80021c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 81d9 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 81d4 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021e4:	d10f      	bne.n	8002206 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7ff fa85 	bl	8001700 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fa19 	bl	8001636 <LL_ADC_SetSamplingTimeCommonConfig>
 8002204:	e00e      	b.n	8002224 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	461a      	mov	r2, r3
 8002214:	f7ff fa74 	bl	8001700 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fa09 	bl	8001636 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b04      	cmp	r3, #4
 8002244:	d022      	beq.n	800228c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6919      	ldr	r1, [r3, #16]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002256:	f7ff f963 	bl	8001520 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6919      	ldr	r1, [r3, #16]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	461a      	mov	r2, r3
 8002268:	f7ff f9af 	bl	80015ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002278:	2b01      	cmp	r3, #1
 800227a:	d102      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x126>
 800227c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002280:	e000      	b.n	8002284 <HAL_ADC_ConfigChannel+0x128>
 8002282:	2300      	movs	r3, #0
 8002284:	461a      	mov	r2, r3
 8002286:	f7ff f9bb 	bl	8001600 <LL_ADC_SetOffsetSaturation>
 800228a:	e17b      	b.n	8002584 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f968 	bl	8001568 <LL_ADC_GetOffsetChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10a      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x15c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f95d 	bl	8001568 <LL_ADC_GetOffsetChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	0e9b      	lsrs	r3, r3, #26
 80022b2:	f003 021f 	and.w	r2, r3, #31
 80022b6:	e01e      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x19a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f952 	bl	8001568 <LL_ADC_GetOffsetChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80022e6:	2320      	movs	r3, #32
 80022e8:	e004      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80022ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_ADC_ConfigChannel+0x1b2>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	0e9b      	lsrs	r3, r3, #26
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	e018      	b.n	8002340 <HAL_ADC_ConfigChannel+0x1e4>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800232a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002332:	2320      	movs	r3, #32
 8002334:	e004      	b.n	8002340 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff f921 	bl	8001594 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2101      	movs	r1, #1
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f905 	bl	8001568 <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <HAL_ADC_ConfigChannel+0x222>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f8fa 	bl	8001568 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	e01e      	b.n	80023bc <HAL_ADC_ConfigChannel+0x260>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f8ef 	bl	8001568 <LL_ADC_GetOffsetChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800239c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80023a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80023ac:	2320      	movs	r3, #32
 80023ae:	e004      	b.n	80023ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80023b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x278>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	e018      	b.n	8002406 <HAL_ADC_ConfigChannel+0x2aa>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80023e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e004      	b.n	8002406 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002406:	429a      	cmp	r2, r3
 8002408:	d106      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	2101      	movs	r1, #1
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff f8be 	bl	8001594 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f8a2 	bl	8001568 <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x2e8>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2102      	movs	r1, #2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f897 	bl	8001568 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	f003 021f 	and.w	r2, r3, #31
 8002442:	e01e      	b.n	8002482 <HAL_ADC_ConfigChannel+0x326>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2102      	movs	r1, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f88c 	bl	8001568 <LL_ADC_GetOffsetChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002462:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800246a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002472:	2320      	movs	r3, #32
 8002474:	e004      	b.n	8002480 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002476:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <HAL_ADC_ConfigChannel+0x33e>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	e016      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x36c>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80024ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80024b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e004      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80024be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2102      	movs	r1, #2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f85d 	bl	8001594 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2103      	movs	r1, #3
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff f841 	bl	8001568 <LL_ADC_GetOffsetChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x3aa>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2103      	movs	r1, #3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f836 	bl	8001568 <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	e017      	b.n	8002536 <HAL_ADC_ConfigChannel+0x3da>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2103      	movs	r1, #3
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f82b 	bl	8001568 <LL_ADC_GetOffsetChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800251e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002520:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002522:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e003      	b.n	8002534 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800252c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_ADC_ConfigChannel+0x3f2>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	e011      	b.n	8002572 <HAL_ADC_ConfigChannel+0x416>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800255c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800255e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e003      	b.n	8002572 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800256a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002572:	429a      	cmp	r2, r3
 8002574:	d106      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	2103      	movs	r1, #3
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff f808 	bl	8001594 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f973 	bl	8001874 <LL_ADC_IsEnabled>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 813d 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f7ff f8d8 	bl	8001758 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4aa2      	ldr	r2, [pc, #648]	@ (8002838 <HAL_ADC_ConfigChannel+0x6dc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f040 812e 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x480>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e019      	b.n	8002610 <HAL_ADC_ConfigChannel+0x4b4>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80025ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80025ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e003      	b.n	8002600 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80025f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2b09      	cmp	r3, #9
 8002608:	bf94      	ite	ls
 800260a:	2301      	movls	r3, #1
 800260c:	2300      	movhi	r3, #0
 800260e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002610:	2b00      	cmp	r3, #0
 8002612:	d079      	beq.n	8002708 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x4d4>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	3301      	adds	r3, #1
 8002628:	069b      	lsls	r3, r3, #26
 800262a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800262e:	e015      	b.n	800265c <HAL_ADC_ConfigChannel+0x500>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800263e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002640:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e003      	b.n	8002654 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800264c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	3301      	adds	r3, #1
 8002656:	069b      	lsls	r3, r3, #26
 8002658:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_ADC_ConfigChannel+0x520>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	3301      	adds	r3, #1
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	e017      	b.n	80026ac <HAL_ADC_ConfigChannel+0x550>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800268a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800268c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800268e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e003      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	ea42 0103 	orr.w	r1, r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x576>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	e018      	b.n	8002704 <HAL_ADC_ConfigChannel+0x5a8>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80026e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e003      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80026ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002704:	430b      	orrs	r3, r1
 8002706:	e07e      	b.n	8002806 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x5c8>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	3301      	adds	r3, #1
 800271c:	069b      	lsls	r3, r3, #26
 800271e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002722:	e015      	b.n	8002750 <HAL_ADC_ConfigChannel+0x5f4>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e003      	b.n	8002748 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	069b      	lsls	r3, r3, #26
 800274c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x614>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	3301      	adds	r3, #1
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	e017      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x644>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	61fb      	str	r3, [r7, #28]
  return result;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	ea42 0103 	orr.w	r1, r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10d      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x670>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	3b1e      	subs	r3, #30
 80027c4:	051b      	lsls	r3, r3, #20
 80027c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	e01b      	b.n	8002804 <HAL_ADC_ConfigChannel+0x6a8>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	613b      	str	r3, [r7, #16]
  return result;
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e003      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f003 021f 	and.w	r2, r3, #31
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	3b1e      	subs	r3, #30
 80027fe:	051b      	lsls	r3, r3, #20
 8002800:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002804:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800280a:	4619      	mov	r1, r3
 800280c:	f7fe ff78 	bl	8001700 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b09      	ldr	r3, [pc, #36]	@ (800283c <HAL_ADC_ConfigChannel+0x6e0>)
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80be 	beq.w	800299a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002826:	d004      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x6d6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <HAL_ADC_ConfigChannel+0x6e4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x6ec>
 8002832:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <HAL_ADC_ConfigChannel+0x6e8>)
 8002834:	e009      	b.n	800284a <HAL_ADC_ConfigChannel+0x6ee>
 8002836:	bf00      	nop
 8002838:	407f0000 	.word	0x407f0000
 800283c:	80080000 	.word	0x80080000
 8002840:	50000100 	.word	0x50000100
 8002844:	50000300 	.word	0x50000300
 8002848:	4b59      	ldr	r3, [pc, #356]	@ (80029b0 <HAL_ADC_ConfigChannel+0x854>)
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fe5a 	bl	8001504 <LL_ADC_GetCommonPathInternalCh>
 8002850:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_ADC_ConfigChannel+0x858>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_ADC_ConfigChannel+0x70c>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a55      	ldr	r2, [pc, #340]	@ (80029b8 <HAL_ADC_ConfigChannel+0x85c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d13a      	bne.n	80028de <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800286c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d134      	bne.n	80028de <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800287c:	d005      	beq.n	800288a <HAL_ADC_ConfigChannel+0x72e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a4e      	ldr	r2, [pc, #312]	@ (80029bc <HAL_ADC_ConfigChannel+0x860>)
 8002884:	4293      	cmp	r3, r2
 8002886:	f040 8085 	bne.w	8002994 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002892:	d004      	beq.n	800289e <HAL_ADC_ConfigChannel+0x742>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a49      	ldr	r2, [pc, #292]	@ (80029c0 <HAL_ADC_ConfigChannel+0x864>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x746>
 800289e:	4a49      	ldr	r2, [pc, #292]	@ (80029c4 <HAL_ADC_ConfigChannel+0x868>)
 80028a0:	e000      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x748>
 80028a2:	4a43      	ldr	r2, [pc, #268]	@ (80029b0 <HAL_ADC_ConfigChannel+0x854>)
 80028a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7fe fe15 	bl	80014de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028b4:	4b44      	ldr	r3, [pc, #272]	@ (80029c8 <HAL_ADC_ConfigChannel+0x86c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	4a44      	ldr	r2, [pc, #272]	@ (80029cc <HAL_ADC_ConfigChannel+0x870>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ce:	e002      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028dc:	e05a      	b.n	8002994 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a3b      	ldr	r2, [pc, #236]	@ (80029d0 <HAL_ADC_ConfigChannel+0x874>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d125      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11f      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a31      	ldr	r2, [pc, #196]	@ (80029c0 <HAL_ADC_ConfigChannel+0x864>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d104      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x7ac>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <HAL_ADC_ConfigChannel+0x878>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d047      	beq.n	8002998 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002910:	d004      	beq.n	800291c <HAL_ADC_ConfigChannel+0x7c0>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a2a      	ldr	r2, [pc, #168]	@ (80029c0 <HAL_ADC_ConfigChannel+0x864>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x7c4>
 800291c:	4a29      	ldr	r2, [pc, #164]	@ (80029c4 <HAL_ADC_ConfigChannel+0x868>)
 800291e:	e000      	b.n	8002922 <HAL_ADC_ConfigChannel+0x7c6>
 8002920:	4a23      	ldr	r2, [pc, #140]	@ (80029b0 <HAL_ADC_ConfigChannel+0x854>)
 8002922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f7fe fdd6 	bl	80014de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002932:	e031      	b.n	8002998 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a27      	ldr	r2, [pc, #156]	@ (80029d8 <HAL_ADC_ConfigChannel+0x87c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d12d      	bne.n	800299a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800293e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d127      	bne.n	800299a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1c      	ldr	r2, [pc, #112]	@ (80029c0 <HAL_ADC_ConfigChannel+0x864>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800295c:	d004      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x80c>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a17      	ldr	r2, [pc, #92]	@ (80029c0 <HAL_ADC_ConfigChannel+0x864>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x810>
 8002968:	4a16      	ldr	r2, [pc, #88]	@ (80029c4 <HAL_ADC_ConfigChannel+0x868>)
 800296a:	e000      	b.n	800296e <HAL_ADC_ConfigChannel+0x812>
 800296c:	4a10      	ldr	r2, [pc, #64]	@ (80029b0 <HAL_ADC_ConfigChannel+0x854>)
 800296e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002972:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f7fe fdb0 	bl	80014de <LL_ADC_SetCommonPathInternalCh>
 800297e:	e00c      	b.n	800299a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002992:	e002      	b.n	800299a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002994:	bf00      	nop
 8002996:	e000      	b.n	800299a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002998:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80029a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	37d8      	adds	r7, #216	@ 0xd8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	50000700 	.word	0x50000700
 80029b4:	c3210000 	.word	0xc3210000
 80029b8:	90c00010 	.word	0x90c00010
 80029bc:	50000600 	.word	0x50000600
 80029c0:	50000100 	.word	0x50000100
 80029c4:	50000300 	.word	0x50000300
 80029c8:	20000000 	.word	0x20000000
 80029cc:	053e2d63 	.word	0x053e2d63
 80029d0:	c7520000 	.word	0xc7520000
 80029d4:	50000500 	.word	0x50000500
 80029d8:	cb840000 	.word	0xcb840000

080029dc <LL_ADC_IsEnabled>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <LL_ADC_IsEnabled+0x18>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_ADC_IsEnabled+0x1a>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d101      	bne.n	8002a1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b0a1      	sub	sp, #132	@ 0x84
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e0e7      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ac2:	d102      	bne.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	e009      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6e      	ldr	r2, [pc, #440]	@ (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d102      	bne.n	8002ada <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002ad4:	4b6d      	ldr	r3, [pc, #436]	@ (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	e001      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0be      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff7f 	bl	8002a02 <LL_ADC_REG_IsConversionOngoing>
 8002b04:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff79 	bl	8002a02 <LL_ADC_REG_IsConversionOngoing>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 80a0 	bne.w	8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 809c 	bne.w	8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b28:	d004      	beq.n	8002b34 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a55      	ldr	r2, [pc, #340]	@ (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b34:	4b56      	ldr	r3, [pc, #344]	@ (8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002b36:	e000      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b38:	4b56      	ldr	r3, [pc, #344]	@ (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002b3a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d04b      	beq.n	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b56:	035b      	lsls	r3, r3, #13
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b68:	d004      	beq.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a45      	ldr	r2, [pc, #276]	@ (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10f      	bne.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b78:	f7ff ff30 	bl	80029dc <LL_ADC_IsEnabled>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	4841      	ldr	r0, [pc, #260]	@ (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b80:	f7ff ff2c 	bl	80029dc <LL_ADC_IsEnabled>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4323      	orrs	r3, r4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e012      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002b94:	483c      	ldr	r0, [pc, #240]	@ (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b96:	f7ff ff21 	bl	80029dc <LL_ADC_IsEnabled>
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	483b      	ldr	r0, [pc, #236]	@ (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b9e:	f7ff ff1d 	bl	80029dc <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	431c      	orrs	r4, r3
 8002ba6:	483c      	ldr	r0, [pc, #240]	@ (8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ba8:	f7ff ff18 	bl	80029dc <LL_ADC_IsEnabled>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4323      	orrs	r3, r4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d056      	beq.n	8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bc6:	f023 030f 	bic.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	6811      	ldr	r1, [r2, #0]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	6892      	ldr	r2, [r2, #8]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bda:	e047      	b.n	8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bf0:	d004      	beq.n	8002bfc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10f      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002bfc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c00:	f7ff feec 	bl	80029dc <LL_ADC_IsEnabled>
 8002c04:	4604      	mov	r4, r0
 8002c06:	481f      	ldr	r0, [pc, #124]	@ (8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c08:	f7ff fee8 	bl	80029dc <LL_ADC_IsEnabled>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4323      	orrs	r3, r4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e012      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002c1c:	481a      	ldr	r0, [pc, #104]	@ (8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c1e:	f7ff fedd 	bl	80029dc <LL_ADC_IsEnabled>
 8002c22:	4604      	mov	r4, r0
 8002c24:	4819      	ldr	r0, [pc, #100]	@ (8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c26:	f7ff fed9 	bl	80029dc <LL_ADC_IsEnabled>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	431c      	orrs	r4, r3
 8002c2e:	481a      	ldr	r0, [pc, #104]	@ (8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c30:	f7ff fed4 	bl	80029dc <LL_ADC_IsEnabled>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4323      	orrs	r3, r4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c4e:	f023 030f 	bic.w	r3, r3, #15
 8002c52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002c54:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c56:	e009      	b.n	8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c6a:	e000      	b.n	8002c6e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3784      	adds	r7, #132	@ 0x84
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	bf00      	nop
 8002c84:	50000100 	.word	0x50000100
 8002c88:	50000400 	.word	0x50000400
 8002c8c:	50000500 	.word	0x50000500
 8002c90:	50000300 	.word	0x50000300
 8002c94:	50000700 	.word	0x50000700
 8002c98:	50000600 	.word	0x50000600

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	@ (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	@ (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	@ (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	@ (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	@ 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	@ 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff29 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e60:	f7ff ff40 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff ff90 	bl	8002d90 <NVIC_EncodePriority>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff5f 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff33 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ffa4 	bl	8002df8 <SysTick_Config>
 8002eb0:	4603      	mov	r3, r0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e014      	b.n	8002ef6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fe f8ab 	bl	8001038 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_DAC_ConfigChannel+0x1c>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e1a1      	b.n	8003264 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	795b      	ldrb	r3, [r3, #5]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_DAC_ConfigChannel+0x32>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e198      	b.n	8003264 <HAL_DAC_ConfigChannel+0x364>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d17a      	bne.n	800303c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f46:	f7fe faab 	bl	80014a0 <HAL_GetTick>
 8002f4a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d13d      	bne.n	8002fce <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f52:	e018      	b.n	8002f86 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f54:	f7fe faa4 	bl	80014a0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d911      	bls.n	8002f86 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f043 0208 	orr.w	r2, r3, #8
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2203      	movs	r2, #3
 8002f80:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e16e      	b.n	8003264 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1df      	bne.n	8002f54 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f9e:	e020      	b.n	8002fe2 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fa0:	f7fe fa7e 	bl	80014a0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d90f      	bls.n	8002fce <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da0a      	bge.n	8002fce <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f043 0208 	orr.w	r2, r3, #8
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e14a      	b.n	8003264 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	dbe3      	blt.n	8002fa0 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	ea02 0103 	and.w	r1, r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	21ff      	movs	r1, #255	@ 0xff
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	ea02 0103 	and.w	r1, r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d11d      	bne.n	8003080 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	221f      	movs	r2, #31
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	4013      	ands	r3, r2
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003074:	4313      	orrs	r3, r2
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2207      	movs	r2, #7
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003098:	4013      	ands	r3, r2
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d102      	bne.n	80030aa <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	e00f      	b.n	80030ca <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d102      	bne.n	80030b8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80030b2:	2301      	movs	r3, #1
 80030b4:	623b      	str	r3, [r7, #32]
 80030b6:	e008      	b.n	80030ca <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030c0:	2301      	movs	r3, #1
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	e001      	b.n	80030ca <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ec:	4013      	ands	r3, r2
 80030ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	791b      	ldrb	r3, [r3, #4]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d102      	bne.n	80030fe <HAL_DAC_ConfigChannel+0x1fe>
 80030f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030fc:	e000      	b.n	8003100 <HAL_DAC_ConfigChannel+0x200>
 80030fe:	2300      	movs	r3, #0
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003118:	4013      	ands	r3, r2
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	795b      	ldrb	r3, [r3, #5]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d102      	bne.n	800312a <HAL_DAC_ConfigChannel+0x22a>
 8003124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003128:	e000      	b.n	800312c <HAL_DAC_ConfigChannel+0x22c>
 800312a:	2300      	movs	r3, #0
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d114      	bne.n	800316c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003142:	f001 f94b 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8003146:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4a48      	ldr	r2, [pc, #288]	@ (800326c <HAL_DAC_ConfigChannel+0x36c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d904      	bls.n	800315a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
 8003158:	e00f      	b.n	800317a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4a44      	ldr	r2, [pc, #272]	@ (8003270 <HAL_DAC_ConfigChannel+0x370>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d90a      	bls.n	8003178 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
 800316a:	e006      	b.n	800317a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003172:	4313      	orrs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	e000      	b.n	800317a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003178:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003188:	4313      	orrs	r3, r2
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003192:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43da      	mvns	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031cc:	4013      	ands	r3, r2
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e4:	4313      	orrs	r3, r2
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	22c0      	movs	r2, #192	@ 0xc0
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	ea02 0103 	and.w	r1, r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	409a      	lsls	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003262:	7ffb      	ldrb	r3, [r7, #31]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3728      	adds	r7, #40	@ 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	09896800 	.word	0x09896800
 8003270:	04c4b400 	.word	0x04c4b400

08003274 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d005      	beq.n	8003298 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2204      	movs	r2, #4
 8003290:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
 8003296:	e037      	b.n	8003308 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 020e 	bic.w	r2, r2, #14
 80032a6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032b6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032e4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032fc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003306:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d00d      	beq.n	800335a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2204      	movs	r2, #4
 8003342:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	e047      	b.n	80033ea <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 020e 	bic.w	r2, r2, #14
 8003368:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f003 021f 	and.w	r2, r3, #31
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00c      	beq.n	80033ca <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
    }
  }
  return status;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003402:	e15a      	b.n	80036ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 814c 	beq.w	80036b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d005      	beq.n	8003434 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003430:	2b02      	cmp	r3, #2
 8003432:	d130      	bne.n	8003496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800346a:	2201      	movs	r2, #1
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f003 0201 	and.w	r2, r3, #1
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d017      	beq.n	80034d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d123      	bne.n	8003526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	6939      	ldr	r1, [r7, #16]
 8003522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0203 	and.w	r2, r3, #3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a6 	beq.w	80036b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003568:	4b5b      	ldr	r3, [pc, #364]	@ (80036d8 <HAL_GPIO_Init+0x2e4>)
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	4a5a      	ldr	r2, [pc, #360]	@ (80036d8 <HAL_GPIO_Init+0x2e4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6613      	str	r3, [r2, #96]	@ 0x60
 8003574:	4b58      	ldr	r3, [pc, #352]	@ (80036d8 <HAL_GPIO_Init+0x2e4>)
 8003576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003580:	4a56      	ldr	r2, [pc, #344]	@ (80036dc <HAL_GPIO_Init+0x2e8>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035aa:	d01f      	beq.n	80035ec <HAL_GPIO_Init+0x1f8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a4c      	ldr	r2, [pc, #304]	@ (80036e0 <HAL_GPIO_Init+0x2ec>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d019      	beq.n	80035e8 <HAL_GPIO_Init+0x1f4>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a4b      	ldr	r2, [pc, #300]	@ (80036e4 <HAL_GPIO_Init+0x2f0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d013      	beq.n	80035e4 <HAL_GPIO_Init+0x1f0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a4a      	ldr	r2, [pc, #296]	@ (80036e8 <HAL_GPIO_Init+0x2f4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00d      	beq.n	80035e0 <HAL_GPIO_Init+0x1ec>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a49      	ldr	r2, [pc, #292]	@ (80036ec <HAL_GPIO_Init+0x2f8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <HAL_GPIO_Init+0x1e8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a48      	ldr	r2, [pc, #288]	@ (80036f0 <HAL_GPIO_Init+0x2fc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035d4:	2305      	movs	r3, #5
 80035d6:	e00a      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035d8:	2306      	movs	r3, #6
 80035da:	e008      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035dc:	2304      	movs	r3, #4
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e0:	2303      	movs	r3, #3
 80035e2:	e004      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e002      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035ec:	2300      	movs	r3, #0
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fe:	4937      	ldr	r1, [pc, #220]	@ (80036dc <HAL_GPIO_Init+0x2e8>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800360c:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003630:	4a30      	ldr	r2, [pc, #192]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003636:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800365a:	4a26      	ldr	r2, [pc, #152]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003660:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003684:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800368a:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036ae:	4a11      	ldr	r2, [pc, #68]	@ (80036f4 <HAL_GPIO_Init+0x300>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f ae9d 	bne.w	8003404 <HAL_GPIO_Init+0x10>
  }
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40010000 	.word	0x40010000
 80036e0:	48000400 	.word	0x48000400
 80036e4:	48000800 	.word	0x48000800
 80036e8:	48000c00 	.word	0x48000c00
 80036ec:	48001000 	.word	0x48001000
 80036f0:	48001400 	.word	0x48001400
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003714:	e002      	b.n	800371c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0c0      	b.n	80038bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fd70 	bl	8001234 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2203      	movs	r2, #3
 8003758:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f003 f869 	bl	8006838 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	e03e      	b.n	80037ea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	3311      	adds	r3, #17
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	440b      	add	r3, r1
 800378e:	3310      	adds	r3, #16
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	3313      	adds	r3, #19
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	440b      	add	r3, r1
 80037b6:	3320      	adds	r3, #32
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	440b      	add	r3, r1
 80037ca:	3324      	adds	r3, #36	@ 0x24
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	3301      	adds	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	791b      	ldrb	r3, [r3, #4]
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d3bb      	bcc.n	800376c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e044      	b.n	8003884 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	440b      	add	r3, r1
 800381e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003852:	7bfa      	ldrb	r2, [r7, #15]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	440b      	add	r3, r1
 8003860:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	440b      	add	r3, r1
 8003876:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3301      	adds	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	791b      	ldrb	r3, [r3, #4]
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3b5      	bcc.n	80037fa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	e893 0006 	ldmia.w	r3, {r1, r2}
 800389a:	f002 ffe8 	bl	800686e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	7a9b      	ldrb	r3, [r3, #10]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d102      	bne.n	80038ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f805 	bl	80038c4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f043 0302 	orr.w	r3, r3, #2
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d141      	bne.n	80039aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003926:	4b4b      	ldr	r3, [pc, #300]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003932:	d131      	bne.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003934:	4b47      	ldr	r3, [pc, #284]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800393a:	4a46      	ldr	r2, [pc, #280]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003940:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003944:	4b43      	ldr	r3, [pc, #268]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800394c:	4a41      	ldr	r2, [pc, #260]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003954:	4b40      	ldr	r3, [pc, #256]	@ (8003a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2232      	movs	r2, #50	@ 0x32
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a3f      	ldr	r2, [pc, #252]	@ (8003a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	0c9b      	lsrs	r3, r3, #18
 8003966:	3301      	adds	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800396a:	e002      	b.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3b01      	subs	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003972:	4b38      	ldr	r3, [pc, #224]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397e:	d102      	bne.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f2      	bne.n	800396c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003986:	4b33      	ldr	r3, [pc, #204]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003992:	d158      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e057      	b.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003998:	4b2e      	ldr	r3, [pc, #184]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800399e:	4a2d      	ldr	r2, [pc, #180]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039a8:	e04d      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b0:	d141      	bne.n	8003a36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039b2:	4b28      	ldr	r3, [pc, #160]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039be:	d131      	bne.n	8003a24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039c0:	4b24      	ldr	r3, [pc, #144]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039c6:	4a23      	ldr	r2, [pc, #140]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d0:	4b20      	ldr	r3, [pc, #128]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2232      	movs	r2, #50	@ 0x32
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	4a1c      	ldr	r2, [pc, #112]	@ (8003a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0c9b      	lsrs	r3, r3, #18
 80039f2:	3301      	adds	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f6:	e002      	b.n	80039fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039fe:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0a:	d102      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f2      	bne.n	80039f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a12:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1e:	d112      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e011      	b.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a24:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a34:	e007      	b.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a36:	4b07      	ldr	r3, [pc, #28]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a3e:	4a05      	ldr	r2, [pc, #20]	@ (8003a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40007000 	.word	0x40007000
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	431bde83 	.word	0x431bde83

08003a60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a64:	4b05      	ldr	r3, [pc, #20]	@ (8003a7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a04      	ldr	r2, [pc, #16]	@ (8003a7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a6e:	6093      	str	r3, [r2, #8]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40007000 	.word	0x40007000

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e2fe      	b.n	8004090 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d075      	beq.n	8003b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a9e:	4b97      	ldr	r3, [pc, #604]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa8:	4b94      	ldr	r3, [pc, #592]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d102      	bne.n	8003abe <HAL_RCC_OscConfig+0x3e>
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d002      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x44>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05b      	beq.n	8003b88 <HAL_RCC_OscConfig+0x108>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d157      	bne.n	8003b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e2d9      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_OscConfig+0x74>
 8003ae6:	4b85      	ldr	r3, [pc, #532]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a84      	ldr	r2, [pc, #528]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e01d      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x98>
 8003afe:	4b7f      	ldr	r3, [pc, #508]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7e      	ldr	r2, [pc, #504]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003b18:	4b78      	ldr	r3, [pc, #480]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a77      	ldr	r2, [pc, #476]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b75      	ldr	r3, [pc, #468]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a74      	ldr	r2, [pc, #464]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd fcb2 	bl	80014a0 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b40:	f7fd fcae 	bl	80014a0 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	@ 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e29e      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b52:	4b6a      	ldr	r3, [pc, #424]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0xc0>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7fd fc9e 	bl	80014a0 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b68:	f7fd fc9a 	bl	80014a0 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	@ 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e28a      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7a:	4b60      	ldr	r3, [pc, #384]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0xe8>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d075      	beq.n	8003c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b96:	4b59      	ldr	r3, [pc, #356]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba0:	4b56      	ldr	r3, [pc, #344]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d102      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x136>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_OscConfig+0x13c>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d11f      	bne.n	8003bfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x154>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e25d      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b49      	ldr	r3, [pc, #292]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	4946      	ldr	r1, [pc, #280]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003be8:	4b45      	ldr	r3, [pc, #276]	@ (8003d00 <HAL_RCC_OscConfig+0x280>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fd fc0b 	bl	8001408 <HAL_InitTick>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d043      	beq.n	8003c80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e249      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c04:	4b3d      	ldr	r3, [pc, #244]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a3c      	ldr	r2, [pc, #240]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fc46 	bl	80014a0 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c18:	f7fd fc42 	bl	80014a0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e232      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2a:	4b34      	ldr	r3, [pc, #208]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c36:	4b31      	ldr	r3, [pc, #196]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	492d      	ldr	r1, [pc, #180]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
 8003c4a:	e01a      	b.n	8003c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2a      	ldr	r2, [pc, #168]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fd fc22 	bl	80014a0 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c60:	f7fd fc1e 	bl	80014a0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e20e      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c72:	4b22      	ldr	r3, [pc, #136]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x1e0>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d041      	beq.n	8003d12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01c      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c96:	4b19      	ldr	r3, [pc, #100]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c9c:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fbfb 	bl	80014a0 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cae:	f7fd fbf7 	bl	80014a0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1e7      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ef      	beq.n	8003cae <HAL_RCC_OscConfig+0x22e>
 8003cce:	e020      	b.n	8003d12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd6:	4a09      	ldr	r2, [pc, #36]	@ (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fd fbde 	bl	80014a0 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce6:	e00d      	b.n	8003d04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7fd fbda 	bl	80014a0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d906      	bls.n	8003d04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e1ca      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d04:	4b8c      	ldr	r3, [pc, #560]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ea      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80a6 	beq.w	8003e6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d20:	2300      	movs	r3, #0
 8003d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d24:	4b84      	ldr	r3, [pc, #528]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_OscConfig+0x2b4>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x2b6>
 8003d34:	2300      	movs	r3, #0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d46:	4b7c      	ldr	r3, [pc, #496]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d52:	2301      	movs	r3, #1
 8003d54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d56:	4b79      	ldr	r3, [pc, #484]	@ (8003f3c <HAL_RCC_OscConfig+0x4bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d118      	bne.n	8003d94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d62:	4b76      	ldr	r3, [pc, #472]	@ (8003f3c <HAL_RCC_OscConfig+0x4bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a75      	ldr	r2, [pc, #468]	@ (8003f3c <HAL_RCC_OscConfig+0x4bc>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6e:	f7fd fb97 	bl	80014a0 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fd fb93 	bl	80014a0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e183      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d88:	4b6c      	ldr	r3, [pc, #432]	@ (8003f3c <HAL_RCC_OscConfig+0x4bc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d108      	bne.n	8003dae <HAL_RCC_OscConfig+0x32e>
 8003d9c:	4b66      	ldr	r3, [pc, #408]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	4a65      	ldr	r2, [pc, #404]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dac:	e024      	b.n	8003df8 <HAL_RCC_OscConfig+0x378>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d110      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x358>
 8003db6:	4b60      	ldr	r3, [pc, #384]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003dbe:	f043 0304 	orr.w	r3, r3, #4
 8003dc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dcc:	4a5a      	ldr	r2, [pc, #360]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd6:	e00f      	b.n	8003df8 <HAL_RCC_OscConfig+0x378>
 8003dd8:	4b57      	ldr	r3, [pc, #348]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dde:	4a56      	ldr	r2, [pc, #344]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de8:	4b53      	ldr	r3, [pc, #332]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dee:	4a52      	ldr	r2, [pc, #328]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003df0:	f023 0304 	bic.w	r3, r3, #4
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d016      	beq.n	8003e2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e00:	f7fd fb4e 	bl	80014a0 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e08:	f7fd fb4a 	bl	80014a0 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e138      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1e:	4b46      	ldr	r3, [pc, #280]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ed      	beq.n	8003e08 <HAL_RCC_OscConfig+0x388>
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fd fb37 	bl	80014a0 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fd fb33 	bl	80014a0 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e121      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1ed      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e60:	4b35      	ldr	r3, [pc, #212]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	4a34      	ldr	r2, [pc, #208]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d03c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01c      	beq.n	8003eba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e80:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e86:	4a2c      	ldr	r2, [pc, #176]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e90:	f7fd fb06 	bl	80014a0 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e98:	f7fd fb02 	bl	80014a0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0f2      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eaa:	4b23      	ldr	r3, [pc, #140]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ef      	beq.n	8003e98 <HAL_RCC_OscConfig+0x418>
 8003eb8:	e01b      	b.n	8003ef2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003eba:	4b1f      	ldr	r3, [pc, #124]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eca:	f7fd fae9 	bl	80014a0 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed2:	f7fd fae5 	bl	80014a0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0d5      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ee4:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1ef      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80c9 	beq.w	800408e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003efc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 030c 	and.w	r3, r3, #12
 8003f04:	2b0c      	cmp	r3, #12
 8003f06:	f000 8083 	beq.w	8004010 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d15e      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f12:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a08      	ldr	r2, [pc, #32]	@ (8003f38 <HAL_RCC_OscConfig+0x4b8>)
 8003f18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1e:	f7fd fabf 	bl	80014a0 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f24:	e00c      	b.n	8003f40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fd fabb 	bl	80014a0 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d905      	bls.n	8003f40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0ab      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f40:	4b55      	ldr	r3, [pc, #340]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ec      	bne.n	8003f26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f4c:	4b52      	ldr	r3, [pc, #328]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	4b52      	ldr	r3, [pc, #328]	@ (800409c <HAL_RCC_OscConfig+0x61c>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6a11      	ldr	r1, [r2, #32]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f66:	0212      	lsls	r2, r2, #8
 8003f68:	4311      	orrs	r1, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f6e:	0852      	lsrs	r2, r2, #1
 8003f70:	3a01      	subs	r2, #1
 8003f72:	0552      	lsls	r2, r2, #21
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f7a:	0852      	lsrs	r2, r2, #1
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0652      	lsls	r2, r2, #25
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f86:	06d2      	lsls	r2, r2, #27
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	4943      	ldr	r1, [pc, #268]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f90:	4b41      	ldr	r3, [pc, #260]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a40      	ldr	r2, [pc, #256]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fa7a 	bl	80014a0 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd fa76 	bl	80014a0 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e066      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	4b35      	ldr	r3, [pc, #212]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x530>
 8003fce:	e05e      	b.n	800408e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a30      	ldr	r2, [pc, #192]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fa60 	bl	80014a0 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd fa5c 	bl	80014a0 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e04c      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff6:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004002:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	4924      	ldr	r1, [pc, #144]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 8004008:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <HAL_RCC_OscConfig+0x620>)
 800400a:	4013      	ands	r3, r2
 800400c:	60cb      	str	r3, [r1, #12]
 800400e:	e03e      	b.n	800408e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e039      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800401c:	4b1e      	ldr	r3, [pc, #120]	@ (8004098 <HAL_RCC_OscConfig+0x618>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0203 	and.w	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	429a      	cmp	r2, r3
 800402e:	d12c      	bne.n	800408a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	3b01      	subs	r3, #1
 800403c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d123      	bne.n	800408a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d11b      	bne.n	800408a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d113      	bne.n	800408a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	3b01      	subs	r3, #1
 8004070:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d109      	bne.n	800408a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	3b01      	subs	r3, #1
 8004084:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40021000 	.word	0x40021000
 800409c:	019f800c 	.word	0x019f800c
 80040a0:	feeefffc 	.word	0xfeeefffc

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e11e      	b.n	80042fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b91      	ldr	r3, [pc, #580]	@ (8004304 <HAL_RCC_ClockConfig+0x260>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b8e      	ldr	r3, [pc, #568]	@ (8004304 <HAL_RCC_ClockConfig+0x260>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 020f 	bic.w	r2, r3, #15
 80040d2:	498c      	ldr	r1, [pc, #560]	@ (8004304 <HAL_RCC_ClockConfig+0x260>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b8a      	ldr	r3, [pc, #552]	@ (8004304 <HAL_RCC_ClockConfig+0x260>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e106      	b.n	80042fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d073      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d129      	bne.n	8004154 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004100:	4b81      	ldr	r3, [pc, #516]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0f4      	b.n	80042fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004110:	f000 f99c 	bl	800444c <RCC_GetSysClockFreqFromPLLSource>
 8004114:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4a7c      	ldr	r2, [pc, #496]	@ (800430c <HAL_RCC_ClockConfig+0x268>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d93f      	bls.n	800419e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800411e:	4b7a      	ldr	r3, [pc, #488]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004132:	2b00      	cmp	r3, #0
 8004134:	d033      	beq.n	800419e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800413a:	2b00      	cmp	r3, #0
 800413c:	d12f      	bne.n	800419e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800413e:	4b72      	ldr	r3, [pc, #456]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004146:	4a70      	ldr	r2, [pc, #448]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800414e:	2380      	movs	r3, #128	@ 0x80
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e024      	b.n	800419e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d107      	bne.n	800416c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800415c:	4b6a      	ldr	r3, [pc, #424]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0c6      	b.n	80042fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800416c:	4b66      	ldr	r3, [pc, #408]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0be      	b.n	80042fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800417c:	f000 f8ce 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8004180:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4a61      	ldr	r2, [pc, #388]	@ (800430c <HAL_RCC_ClockConfig+0x268>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d909      	bls.n	800419e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800418a:	4b5f      	ldr	r3, [pc, #380]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004192:	4a5d      	ldr	r2, [pc, #372]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004198:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b5a      	ldr	r3, [pc, #360]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4957      	ldr	r1, [pc, #348]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fd f976 	bl	80014a0 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fd f972 	bl	80014a0 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e095      	b.n	80042fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d023      	beq.n	8004234 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f8:	4b43      	ldr	r3, [pc, #268]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a42      	ldr	r2, [pc, #264]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80041fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004202:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d007      	beq.n	8004220 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004210:	4b3d      	ldr	r3, [pc, #244]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004218:	4a3b      	ldr	r2, [pc, #236]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 800421a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800421e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004220:	4b39      	ldr	r3, [pc, #228]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4936      	ldr	r1, [pc, #216]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
 8004232:	e008      	b.n	8004246 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b80      	cmp	r3, #128	@ 0x80
 8004238:	d105      	bne.n	8004246 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800423a:	4b33      	ldr	r3, [pc, #204]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4a32      	ldr	r2, [pc, #200]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 8004240:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004244:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004246:	4b2f      	ldr	r3, [pc, #188]	@ (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d21d      	bcs.n	8004290 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004254:	4b2b      	ldr	r3, [pc, #172]	@ (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f023 020f 	bic.w	r2, r3, #15
 800425c:	4929      	ldr	r1, [pc, #164]	@ (8004304 <HAL_RCC_ClockConfig+0x260>)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004264:	f7fd f91c 	bl	80014a0 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	e00a      	b.n	8004282 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426c:	f7fd f918 	bl	80014a0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e03b      	b.n	80042fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b20      	ldr	r3, [pc, #128]	@ (8004304 <HAL_RCC_ClockConfig+0x260>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d1ed      	bne.n	800426c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800429c:	4b1a      	ldr	r3, [pc, #104]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4917      	ldr	r1, [pc, #92]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ba:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	490f      	ldr	r1, [pc, #60]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ce:	f000 f825 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042d2:	4602      	mov	r2, r0
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <HAL_RCC_ClockConfig+0x264>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	490c      	ldr	r1, [pc, #48]	@ (8004310 <HAL_RCC_ClockConfig+0x26c>)
 80042e0:	5ccb      	ldrb	r3, [r1, r3]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004314 <HAL_RCC_ClockConfig+0x270>)
 80042ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <HAL_RCC_ClockConfig+0x274>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd f888 	bl	8001408 <HAL_InitTick>
 80042f8:	4603      	mov	r3, r0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40022000 	.word	0x40022000
 8004308:	40021000 	.word	0x40021000
 800430c:	04c4b400 	.word	0x04c4b400
 8004310:	0800691c 	.word	0x0800691c
 8004314:	20000000 	.word	0x20000000
 8004318:	20000004 	.word	0x20000004

0800431c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004322:	4b2c      	ldr	r3, [pc, #176]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b04      	cmp	r3, #4
 800432c:	d102      	bne.n	8004334 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800432e:	4b2a      	ldr	r3, [pc, #168]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	e047      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004334:	4b27      	ldr	r3, [pc, #156]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d102      	bne.n	8004346 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004340:	4b25      	ldr	r3, [pc, #148]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e03e      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004346:	4b23      	ldr	r3, [pc, #140]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d136      	bne.n	80043c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004352:	4b20      	ldr	r3, [pc, #128]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800435c:	4b1d      	ldr	r3, [pc, #116]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	3301      	adds	r3, #1
 8004368:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d10c      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004370:	4a19      	ldr	r2, [pc, #100]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	4a16      	ldr	r2, [pc, #88]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800437a:	68d2      	ldr	r2, [r2, #12]
 800437c:	0a12      	lsrs	r2, r2, #8
 800437e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	617b      	str	r3, [r7, #20]
      break;
 8004388:	e00c      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800438a:	4a13      	ldr	r2, [pc, #76]	@ (80043d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	4a10      	ldr	r2, [pc, #64]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004394:	68d2      	ldr	r2, [r2, #12]
 8004396:	0a12      	lsrs	r2, r2, #8
 8004398:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800439c:	fb02 f303 	mul.w	r3, r2, r3
 80043a0:	617b      	str	r3, [r7, #20]
      break;
 80043a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	0e5b      	lsrs	r3, r3, #25
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	3301      	adds	r3, #1
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	e001      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043c4:	693b      	ldr	r3, [r7, #16]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	00f42400 	.word	0x00f42400

080043dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e0:	4b03      	ldr	r3, [pc, #12]	@ (80043f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000000 	.word	0x20000000

080043f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043f8:	f7ff fff0 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4904      	ldr	r1, [pc, #16]	@ (800441c <HAL_RCC_GetPCLK1Freq+0x28>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	0800692c 	.word	0x0800692c

08004420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004424:	f7ff ffda 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_RCC_GetPCLK2Freq+0x24>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0adb      	lsrs	r3, r3, #11
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4904      	ldr	r1, [pc, #16]	@ (8004448 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	0800692c 	.word	0x0800692c

0800444c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004452:	4b1e      	ldr	r3, [pc, #120]	@ (80044cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800445c:	4b1b      	ldr	r3, [pc, #108]	@ (80044cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d10c      	bne.n	800448a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004470:	4a17      	ldr	r2, [pc, #92]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	4a14      	ldr	r2, [pc, #80]	@ (80044cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800447a:	68d2      	ldr	r2, [r2, #12]
 800447c:	0a12      	lsrs	r2, r2, #8
 800447e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	617b      	str	r3, [r7, #20]
    break;
 8004488:	e00c      	b.n	80044a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800448a:	4a11      	ldr	r2, [pc, #68]	@ (80044d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	4a0e      	ldr	r2, [pc, #56]	@ (80044cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004494:	68d2      	ldr	r2, [r2, #12]
 8004496:	0a12      	lsrs	r2, r2, #8
 8004498:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800449c:	fb02 f303 	mul.w	r3, r2, r3
 80044a0:	617b      	str	r3, [r7, #20]
    break;
 80044a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	0e5b      	lsrs	r3, r3, #25
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	3301      	adds	r3, #1
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044be:	687b      	ldr	r3, [r7, #4]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40021000 	.word	0x40021000
 80044d0:	00f42400 	.word	0x00f42400

080044d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044dc:	2300      	movs	r3, #0
 80044de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e0:	2300      	movs	r3, #0
 80044e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8098 	beq.w	8004622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b43      	ldr	r3, [pc, #268]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004506:	4a3f      	ldr	r2, [pc, #252]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450c:	6593      	str	r3, [r2, #88]	@ 0x58
 800450e:	4b3d      	ldr	r3, [pc, #244]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451a:	2301      	movs	r3, #1
 800451c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800451e:	4b3a      	ldr	r3, [pc, #232]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a39      	ldr	r2, [pc, #228]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004528:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800452a:	f7fc ffb9 	bl	80014a0 <HAL_GetTick>
 800452e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004530:	e009      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fc ffb5 	bl	80014a0 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d902      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	74fb      	strb	r3, [r7, #19]
        break;
 8004544:	e005      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004546:	4b30      	ldr	r3, [pc, #192]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ef      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004552:	7cfb      	ldrb	r3, [r7, #19]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d159      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004558:	4b2a      	ldr	r3, [pc, #168]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004562:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d01e      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d019      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004574:	4b23      	ldr	r3, [pc, #140]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004580:	4b20      	ldr	r3, [pc, #128]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	4a1f      	ldr	r2, [pc, #124]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004590:	4b1c      	ldr	r3, [pc, #112]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	4a1b      	ldr	r2, [pc, #108]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045a0:	4a18      	ldr	r2, [pc, #96]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fc ff75 	bl	80014a0 <HAL_GetTick>
 80045b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b8:	e00b      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fc ff71 	bl	80014a0 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d902      	bls.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	74fb      	strb	r3, [r7, #19]
            break;
 80045d0:	e006      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ec      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10b      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e6:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f4:	4903      	ldr	r1, [pc, #12]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	74bb      	strb	r3, [r7, #18]
 8004602:	e005      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004604:	40021000 	.word	0x40021000
 8004608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004610:	7c7b      	ldrb	r3, [r7, #17]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d105      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4ba7      	ldr	r3, [pc, #668]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	4aa6      	ldr	r2, [pc, #664]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004620:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800462e:	4ba1      	ldr	r3, [pc, #644]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004634:	f023 0203 	bic.w	r2, r3, #3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	499d      	ldr	r1, [pc, #628]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004650:	4b98      	ldr	r3, [pc, #608]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f023 020c 	bic.w	r2, r3, #12
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4995      	ldr	r1, [pc, #596]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004672:	4b90      	ldr	r3, [pc, #576]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004678:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	498c      	ldr	r1, [pc, #560]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004694:	4b87      	ldr	r3, [pc, #540]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	4984      	ldr	r1, [pc, #528]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046b6:	4b7f      	ldr	r3, [pc, #508]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	497b      	ldr	r1, [pc, #492]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d8:	4b76      	ldr	r3, [pc, #472]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	4973      	ldr	r1, [pc, #460]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046fa:	4b6e      	ldr	r3, [pc, #440]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004700:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	496a      	ldr	r1, [pc, #424]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800471c:	4b65      	ldr	r3, [pc, #404]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4962      	ldr	r1, [pc, #392]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800473e:	4b5d      	ldr	r3, [pc, #372]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	4959      	ldr	r1, [pc, #356]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004760:	4b54      	ldr	r3, [pc, #336]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004766:	f023 0203 	bic.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	4951      	ldr	r1, [pc, #324]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004782:	4b4c      	ldr	r3, [pc, #304]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004788:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	4948      	ldr	r1, [pc, #288]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d015      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047a4:	4b43      	ldr	r3, [pc, #268]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	4940      	ldr	r1, [pc, #256]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c2:	d105      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c4:	4b3b      	ldr	r3, [pc, #236]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a3a      	ldr	r2, [pc, #232]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d015      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047dc:	4b35      	ldr	r3, [pc, #212]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ea:	4932      	ldr	r1, [pc, #200]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047fa:	d105      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047fc:	4b2d      	ldr	r3, [pc, #180]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a2c      	ldr	r2, [pc, #176]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004806:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d015      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004814:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	4924      	ldr	r1, [pc, #144]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004832:	d105      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004834:	4b1f      	ldr	r3, [pc, #124]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4a1e      	ldr	r2, [pc, #120]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800483e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d015      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800484c:	4b19      	ldr	r3, [pc, #100]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485a:	4916      	ldr	r1, [pc, #88]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800486a:	d105      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486c:	4b11      	ldr	r3, [pc, #68]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4a10      	ldr	r2, [pc, #64]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004876:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d019      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004884:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	4908      	ldr	r1, [pc, #32]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048a2:	d109      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a4:	4b03      	ldr	r3, [pc, #12]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a02      	ldr	r2, [pc, #8]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ae:	60d3      	str	r3, [r2, #12]
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d015      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048c4:	4b29      	ldr	r3, [pc, #164]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	4926      	ldr	r1, [pc, #152]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048e4:	4b21      	ldr	r3, [pc, #132]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a20      	ldr	r2, [pc, #128]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d015      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80048fc:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490a:	4918      	ldr	r1, [pc, #96]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491a:	d105      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800491c:	4b13      	ldr	r3, [pc, #76]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4a12      	ldr	r2, [pc, #72]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004926:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d015      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004934:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004936:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800493a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004942:	490a      	ldr	r1, [pc, #40]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004952:	d105      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a04      	ldr	r2, [pc, #16]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800495a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800495e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004960:	7cbb      	ldrb	r3, [r7, #18]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000

08004970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e049      	b.n	8004a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fb8c 	bl	80010b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 facc 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01b      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f06f 0202 	mvn.w	r2, #2
 8004a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fa51 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004a6e:	e005      	b.n	8004a7c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fa43 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fa54 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d020      	beq.n	8004ace <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0204 	mvn.w	r2, #4
 8004a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fa2b 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004aba:	e005      	b.n	8004ac8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fa1d 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa2e 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01b      	beq.n	8004b1a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f06f 0208 	mvn.w	r2, #8
 8004aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2204      	movs	r2, #4
 8004af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa05 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004b06:	e005      	b.n	8004b14 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f9f7 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa08 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01b      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f06f 0210 	mvn.w	r2, #16
 8004b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f9df 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004b52:	e005      	b.n	8004b60 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f9d1 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f9e2 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00c      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0201 	mvn.w	r2, #1
 8004b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9af 	bl	8004ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fbba 	bl	800532c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fbb2 	bl	8005340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00c      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f99c 	bl	8004f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0220 	mvn.w	r2, #32
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fb7a 	bl	8005318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fb86 	bl	8005354 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fb7e 	bl	8005368 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fb76 	bl	800537c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fb6e 	bl	8005390 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e0f6      	b.n	8004ec6 <HAL_TIM_ConfigClockSource+0x20a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004cf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a6f      	ldr	r2, [pc, #444]	@ (8004ed0 <HAL_TIM_ConfigClockSource+0x214>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	f000 80c1 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d18:	4a6d      	ldr	r2, [pc, #436]	@ (8004ed0 <HAL_TIM_ConfigClockSource+0x214>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	f200 80c6 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d20:	4a6c      	ldr	r2, [pc, #432]	@ (8004ed4 <HAL_TIM_ConfigClockSource+0x218>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	f000 80b9 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d28:	4a6a      	ldr	r2, [pc, #424]	@ (8004ed4 <HAL_TIM_ConfigClockSource+0x218>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	f200 80be 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d30:	4a69      	ldr	r2, [pc, #420]	@ (8004ed8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f000 80b1 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d38:	4a67      	ldr	r2, [pc, #412]	@ (8004ed8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	f200 80b6 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d40:	4a66      	ldr	r2, [pc, #408]	@ (8004edc <HAL_TIM_ConfigClockSource+0x220>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	f000 80a9 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d48:	4a64      	ldr	r2, [pc, #400]	@ (8004edc <HAL_TIM_ConfigClockSource+0x220>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	f200 80ae 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d50:	4a63      	ldr	r2, [pc, #396]	@ (8004ee0 <HAL_TIM_ConfigClockSource+0x224>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	f000 80a1 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d58:	4a61      	ldr	r2, [pc, #388]	@ (8004ee0 <HAL_TIM_ConfigClockSource+0x224>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f200 80a6 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d60:	4a60      	ldr	r2, [pc, #384]	@ (8004ee4 <HAL_TIM_ConfigClockSource+0x228>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	f000 8099 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d68:	4a5e      	ldr	r2, [pc, #376]	@ (8004ee4 <HAL_TIM_ConfigClockSource+0x228>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f200 809e 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d74:	f000 8091 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d7c:	f200 8096 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d84:	f000 8089 	beq.w	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004d88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8c:	f200 808e 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d94:	d03e      	beq.n	8004e14 <HAL_TIM_ConfigClockSource+0x158>
 8004d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9a:	f200 8087 	bhi.w	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da2:	f000 8086 	beq.w	8004eb2 <HAL_TIM_ConfigClockSource+0x1f6>
 8004da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004daa:	d87f      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dac:	2b70      	cmp	r3, #112	@ 0x70
 8004dae:	d01a      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x12a>
 8004db0:	2b70      	cmp	r3, #112	@ 0x70
 8004db2:	d87b      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004db4:	2b60      	cmp	r3, #96	@ 0x60
 8004db6:	d050      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x19e>
 8004db8:	2b60      	cmp	r3, #96	@ 0x60
 8004dba:	d877      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dbc:	2b50      	cmp	r3, #80	@ 0x50
 8004dbe:	d03c      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x17e>
 8004dc0:	2b50      	cmp	r3, #80	@ 0x50
 8004dc2:	d873      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d058      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x1be>
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d86f      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dcc:	2b30      	cmp	r3, #48	@ 0x30
 8004dce:	d064      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004dd0:	2b30      	cmp	r3, #48	@ 0x30
 8004dd2:	d86b      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d060      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d867      	bhi.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d05c      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d05a      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x1de>
 8004de4:	e062      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004df6:	f000 f9d9 	bl	80051ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	609a      	str	r2, [r3, #8]
      break;
 8004e12:	e04f      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	f000 f9c2 	bl	80051ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e36:	609a      	str	r2, [r3, #8]
      break;
 8004e38:	e03c      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	461a      	mov	r2, r3
 8004e48:	f000 f934 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2150      	movs	r1, #80	@ 0x50
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f98d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004e58:	e02c      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e66:	461a      	mov	r2, r3
 8004e68:	f000 f953 	bl	8005112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2160      	movs	r1, #96	@ 0x60
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f97d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004e78:	e01c      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 f914 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2140      	movs	r1, #64	@ 0x40
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f96d 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004e98:	e00c      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	f000 f964 	bl	8005172 <TIM_ITRx_SetConfig>
      break;
 8004eaa:	e003      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb0:	e000      	b.n	8004eb4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	00100070 	.word	0x00100070
 8004ed4:	00100060 	.word	0x00100060
 8004ed8:	00100050 	.word	0x00100050
 8004edc:	00100040 	.word	0x00100040
 8004ee0:	00100030 	.word	0x00100030
 8004ee4:	00100020 	.word	0x00100020

08004ee8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8005090 <TIM_Base_SetConfig+0x144>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d017      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d013      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a49      	ldr	r2, [pc, #292]	@ (8005094 <TIM_Base_SetConfig+0x148>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a48      	ldr	r2, [pc, #288]	@ (8005098 <TIM_Base_SetConfig+0x14c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a47      	ldr	r2, [pc, #284]	@ (800509c <TIM_Base_SetConfig+0x150>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a46      	ldr	r2, [pc, #280]	@ (80050a0 <TIM_Base_SetConfig+0x154>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x48>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a45      	ldr	r2, [pc, #276]	@ (80050a4 <TIM_Base_SetConfig+0x158>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a39      	ldr	r2, [pc, #228]	@ (8005090 <TIM_Base_SetConfig+0x144>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d023      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb4:	d01f      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a36      	ldr	r2, [pc, #216]	@ (8005094 <TIM_Base_SetConfig+0x148>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a35      	ldr	r2, [pc, #212]	@ (8005098 <TIM_Base_SetConfig+0x14c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d017      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a34      	ldr	r2, [pc, #208]	@ (800509c <TIM_Base_SetConfig+0x150>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d013      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a33      	ldr	r2, [pc, #204]	@ (80050a0 <TIM_Base_SetConfig+0x154>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00f      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a33      	ldr	r2, [pc, #204]	@ (80050a8 <TIM_Base_SetConfig+0x15c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a32      	ldr	r2, [pc, #200]	@ (80050ac <TIM_Base_SetConfig+0x160>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d007      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a31      	ldr	r2, [pc, #196]	@ (80050b0 <TIM_Base_SetConfig+0x164>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <TIM_Base_SetConfig+0xaa>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80050a4 <TIM_Base_SetConfig+0x158>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d108      	bne.n	8005008 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a18      	ldr	r2, [pc, #96]	@ (8005090 <TIM_Base_SetConfig+0x144>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1a      	ldr	r2, [pc, #104]	@ (80050a0 <TIM_Base_SetConfig+0x154>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00f      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1a      	ldr	r2, [pc, #104]	@ (80050a8 <TIM_Base_SetConfig+0x15c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00b      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a19      	ldr	r2, [pc, #100]	@ (80050ac <TIM_Base_SetConfig+0x160>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a18      	ldr	r2, [pc, #96]	@ (80050b0 <TIM_Base_SetConfig+0x164>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_Base_SetConfig+0x110>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a13      	ldr	r2, [pc, #76]	@ (80050a4 <TIM_Base_SetConfig+0x158>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d103      	bne.n	8005064 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d105      	bne.n	8005082 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f023 0201 	bic.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	611a      	str	r2, [r3, #16]
  }
}
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800
 800509c:	40000c00 	.word	0x40000c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40015000 	.word	0x40015000
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 030a 	bic.w	r3, r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005112:	b480      	push	{r7}
 8005114:	b087      	sub	sp, #28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f023 0210 	bic.w	r2, r3, #16
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800513c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800514e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	f043 0307 	orr.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	021a      	lsls	r2, r3, #8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	609a      	str	r2, [r3, #8]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e074      	b.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a34      	ldr	r2, [pc, #208]	@ (80052fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a33      	ldr	r2, [pc, #204]	@ (8005300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a31      	ldr	r2, [pc, #196]	@ (8005304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005248:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800525a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a21      	ldr	r2, [pc, #132]	@ (80052fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d022      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005284:	d01d      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1f      	ldr	r2, [pc, #124]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1d      	ldr	r2, [pc, #116]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a11      	ldr	r2, [pc, #68]	@ (8005304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10c      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40013400 	.word	0x40013400
 8005304:	40015000 	.word	0x40015000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40014000 	.word	0x40014000

08005318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	460b      	mov	r3, r1
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e05b      	b.n	8005474 <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7fb feb0 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2224      	movs	r2, #36	@ 0x24
 80053d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_MultiProcessor_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fe9f 	bl	8006138 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fba0 	bl	8005b40 <UART_SetConfig>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_MultiProcessor_Init+0x66>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e034      	b.n	8005474 <HAL_MultiProcessor_Init+0xd0>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005418:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005428:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005430:	d10a      	bne.n	8005448 <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800543c:	7afb      	ldrb	r3, [r7, #11]
 800543e:	061a      	lsls	r2, r3, #24
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	430a      	orrs	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 ff05 	bl	800627c <UART_CheckIdleState>
 8005472:	4603      	mov	r3, r0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b0ba      	sub	sp, #232	@ 0xe8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80054a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80054aa:	4013      	ands	r3, r2
 80054ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80054b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11b      	bne.n	80054f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d015      	beq.n	80054f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8300 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
      }
      return;
 80054ee:	e2fa      	b.n	8005ae6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8123 	beq.w	8005740 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80054fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80054fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005734 <HAL_UART_IRQHandler+0x2b8>)
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005506:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800550a:	4b8b      	ldr	r3, [pc, #556]	@ (8005738 <HAL_UART_IRQHandler+0x2bc>)
 800550c:	4013      	ands	r3, r2
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 8116 	beq.w	8005740 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d011      	beq.n	8005544 <HAL_UART_IRQHandler+0xc8>
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2201      	movs	r2, #1
 8005532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553a:	f043 0201 	orr.w	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d011      	beq.n	8005574 <HAL_UART_IRQHandler+0xf8>
 8005550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00b      	beq.n	8005574 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2202      	movs	r2, #2
 8005562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556a:	f043 0204 	orr.w	r2, r3, #4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d011      	beq.n	80055a4 <HAL_UART_IRQHandler+0x128>
 8005580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2204      	movs	r2, #4
 8005592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559a:	f043 0202 	orr.w	r2, r3, #2
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d017      	beq.n	80055e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d105      	bne.n	80055c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80055bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80055c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005734 <HAL_UART_IRQHandler+0x2b8>)
 80055c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2208      	movs	r2, #8
 80055ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	f043 0208 	orr.w	r2, r3, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d012      	beq.n	8005612 <HAL_UART_IRQHandler+0x196>
 80055ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00c      	beq.n	8005612 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005608:	f043 0220 	orr.w	r2, r3, #32
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8266 	beq.w	8005aea <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d013      	beq.n	8005652 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800563a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d007      	beq.n	8005652 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005658:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005666:	2b40      	cmp	r3, #64	@ 0x40
 8005668:	d005      	beq.n	8005676 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800566a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800566e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005672:	2b00      	cmp	r3, #0
 8005674:	d054      	beq.n	8005720 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 ff17 	bl	80064aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005686:	2b40      	cmp	r3, #64	@ 0x40
 8005688:	d146      	bne.n	8005718 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1d9      	bne.n	800568a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d017      	beq.n	8005710 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056e6:	4a15      	ldr	r2, [pc, #84]	@ (800573c <HAL_UART_IRQHandler+0x2c0>)
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fd fe18 	bl	8003326 <HAL_DMA_Abort_IT>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d019      	beq.n	8005730 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800570a:	4610      	mov	r0, r2
 800570c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570e:	e00f      	b.n	8005730 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f9ff 	bl	8005b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005716:	e00b      	b.n	8005730 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f9fb 	bl	8005b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571e:	e007      	b.n	8005730 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f9f7 	bl	8005b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800572e:	e1dc      	b.n	8005aea <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	bf00      	nop
    return;
 8005732:	e1da      	b.n	8005aea <HAL_UART_IRQHandler+0x66e>
 8005734:	10000001 	.word	0x10000001
 8005738:	04000120 	.word	0x04000120
 800573c:	08006577 	.word	0x08006577

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005744:	2b01      	cmp	r3, #1
 8005746:	f040 8170 	bne.w	8005a2a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8169 	beq.w	8005a2a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8162 	beq.w	8005a2a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2210      	movs	r2, #16
 800576c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005778:	2b40      	cmp	r3, #64	@ 0x40
 800577a:	f040 80d8 	bne.w	800592e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800578c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80af 	beq.w	80058f4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800579c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057a0:	429a      	cmp	r2, r3
 80057a2:	f080 80a7 	bcs.w	80058f4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f040 8087 	bne.w	80058d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1da      	bne.n	80057c4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800581e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005832:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005836:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800583a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e1      	bne.n	800580e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800585a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800585c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800586e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005870:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005874:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800587c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e3      	bne.n	800584a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800589e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058a0:	f023 0310 	bic.w	r3, r3, #16
 80058a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e4      	bne.n	8005890 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fd fcd1 	bl	8003274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f91b 	bl	8005b28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80058f2:	e0fc      	b.n	8005aee <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058fe:	429a      	cmp	r2, r3
 8005900:	f040 80f5 	bne.w	8005aee <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b20      	cmp	r3, #32
 8005914:	f040 80eb 	bne.w	8005aee <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8fe 	bl	8005b28 <HAL_UARTEx_RxEventCallback>
      return;
 800592c:	e0df      	b.n	8005aee <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800593a:	b29b      	uxth	r3, r3
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80d1 	beq.w	8005af2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80cc 	beq.w	8005af2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800596e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800597c:	647b      	str	r3, [r7, #68]	@ 0x44
 800597e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800598a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e4      	bne.n	800595a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	623b      	str	r3, [r7, #32]
   return(result);
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80059ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e1      	bne.n	8005990 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f023 0310 	bic.w	r3, r3, #16
 80059f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	69b9      	ldr	r1, [r7, #24]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e4      	bne.n	80059e0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f880 	bl	8005b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a28:	e063      	b.n	8005af2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00e      	beq.n	8005a54 <HAL_UART_IRQHandler+0x5d8>
 8005a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fdcf 	bl	80065f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a52:	e051      	b.n	8005af8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d014      	beq.n	8005a8a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d03a      	beq.n	8005af6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
    }
    return;
 8005a88:	e035      	b.n	8005af6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <HAL_UART_IRQHandler+0x62e>
 8005a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fd79 	bl	800659a <UART_EndTransmit_IT>
    return;
 8005aa8:	e026      	b.n	8005af8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_UART_IRQHandler+0x64e>
 8005ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fda8 	bl	8006618 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ac8:	e016      	b.n	8005af8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ace:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d010      	beq.n	8005af8 <HAL_UART_IRQHandler+0x67c>
 8005ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	da0c      	bge.n	8005af8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fd90 	bl	8006604 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ae4:	e008      	b.n	8005af8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005ae6:	bf00      	nop
 8005ae8:	e006      	b.n	8005af8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005aea:	bf00      	nop
 8005aec:	e004      	b.n	8005af8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005aee:	bf00      	nop
 8005af0:	e002      	b.n	8005af8 <HAL_UART_IRQHandler+0x67c>
      return;
 8005af2:	bf00      	nop
 8005af4:	e000      	b.n	8005af8 <HAL_UART_IRQHandler+0x67c>
    return;
 8005af6:	bf00      	nop
  }
}
 8005af8:	37e8      	adds	r7, #232	@ 0xe8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop

08005b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b44:	b08c      	sub	sp, #48	@ 0x30
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4baa      	ldr	r3, [pc, #680]	@ (8005e18 <UART_SetConfig+0x2d8>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a9f      	ldr	r2, [pc, #636]	@ (8005e1c <UART_SetConfig+0x2dc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005bb6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	f023 010f 	bic.w	r1, r3, #15
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a90      	ldr	r2, [pc, #576]	@ (8005e20 <UART_SetConfig+0x2e0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d125      	bne.n	8005c30 <UART_SetConfig+0xf0>
 8005be4:	4b8f      	ldr	r3, [pc, #572]	@ (8005e24 <UART_SetConfig+0x2e4>)
 8005be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d81a      	bhi.n	8005c28 <UART_SetConfig+0xe8>
 8005bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <UART_SetConfig+0xb8>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	08005c11 	.word	0x08005c11
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c0e:	e116      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005c10:	2302      	movs	r3, #2
 8005c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c16:	e112      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c1e:	e10e      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005c20:	2308      	movs	r3, #8
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c26:	e10a      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2e:	e106      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a7c      	ldr	r2, [pc, #496]	@ (8005e28 <UART_SetConfig+0x2e8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d138      	bne.n	8005cac <UART_SetConfig+0x16c>
 8005c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e24 <UART_SetConfig+0x2e4>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c40:	f003 030c 	and.w	r3, r3, #12
 8005c44:	2b0c      	cmp	r3, #12
 8005c46:	d82d      	bhi.n	8005ca4 <UART_SetConfig+0x164>
 8005c48:	a201      	add	r2, pc, #4	@ (adr r2, 8005c50 <UART_SetConfig+0x110>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005c85 	.word	0x08005c85
 8005c54:	08005ca5 	.word	0x08005ca5
 8005c58:	08005ca5 	.word	0x08005ca5
 8005c5c:	08005ca5 	.word	0x08005ca5
 8005c60:	08005c95 	.word	0x08005c95
 8005c64:	08005ca5 	.word	0x08005ca5
 8005c68:	08005ca5 	.word	0x08005ca5
 8005c6c:	08005ca5 	.word	0x08005ca5
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	08005ca5 	.word	0x08005ca5
 8005c78:	08005ca5 	.word	0x08005ca5
 8005c7c:	08005ca5 	.word	0x08005ca5
 8005c80:	08005c9d 	.word	0x08005c9d
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8a:	e0d8      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	e0d4      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9a:	e0d0      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca2:	e0cc      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005caa:	e0c8      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a5e      	ldr	r2, [pc, #376]	@ (8005e2c <UART_SetConfig+0x2ec>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d125      	bne.n	8005d02 <UART_SetConfig+0x1c2>
 8005cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8005e24 <UART_SetConfig+0x2e4>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cc0:	2b30      	cmp	r3, #48	@ 0x30
 8005cc2:	d016      	beq.n	8005cf2 <UART_SetConfig+0x1b2>
 8005cc4:	2b30      	cmp	r3, #48	@ 0x30
 8005cc6:	d818      	bhi.n	8005cfa <UART_SetConfig+0x1ba>
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d00a      	beq.n	8005ce2 <UART_SetConfig+0x1a2>
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d814      	bhi.n	8005cfa <UART_SetConfig+0x1ba>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <UART_SetConfig+0x19a>
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d008      	beq.n	8005cea <UART_SetConfig+0x1aa>
 8005cd8:	e00f      	b.n	8005cfa <UART_SetConfig+0x1ba>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce0:	e0ad      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce8:	e0a9      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005cea:	2304      	movs	r3, #4
 8005cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf0:	e0a5      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf8:	e0a1      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005cfa:	2310      	movs	r3, #16
 8005cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d00:	e09d      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a4a      	ldr	r2, [pc, #296]	@ (8005e30 <UART_SetConfig+0x2f0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d125      	bne.n	8005d58 <UART_SetConfig+0x218>
 8005d0c:	4b45      	ldr	r3, [pc, #276]	@ (8005e24 <UART_SetConfig+0x2e4>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d18:	d016      	beq.n	8005d48 <UART_SetConfig+0x208>
 8005d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d1c:	d818      	bhi.n	8005d50 <UART_SetConfig+0x210>
 8005d1e:	2b80      	cmp	r3, #128	@ 0x80
 8005d20:	d00a      	beq.n	8005d38 <UART_SetConfig+0x1f8>
 8005d22:	2b80      	cmp	r3, #128	@ 0x80
 8005d24:	d814      	bhi.n	8005d50 <UART_SetConfig+0x210>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <UART_SetConfig+0x1f0>
 8005d2a:	2b40      	cmp	r3, #64	@ 0x40
 8005d2c:	d008      	beq.n	8005d40 <UART_SetConfig+0x200>
 8005d2e:	e00f      	b.n	8005d50 <UART_SetConfig+0x210>
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d36:	e082      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d3e:	e07e      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d46:	e07a      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4e:	e076      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	e072      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a35      	ldr	r2, [pc, #212]	@ (8005e34 <UART_SetConfig+0x2f4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d12a      	bne.n	8005db8 <UART_SetConfig+0x278>
 8005d62:	4b30      	ldr	r3, [pc, #192]	@ (8005e24 <UART_SetConfig+0x2e4>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d70:	d01a      	beq.n	8005da8 <UART_SetConfig+0x268>
 8005d72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d76:	d81b      	bhi.n	8005db0 <UART_SetConfig+0x270>
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d7c:	d00c      	beq.n	8005d98 <UART_SetConfig+0x258>
 8005d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d82:	d815      	bhi.n	8005db0 <UART_SetConfig+0x270>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <UART_SetConfig+0x250>
 8005d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d8c:	d008      	beq.n	8005da0 <UART_SetConfig+0x260>
 8005d8e:	e00f      	b.n	8005db0 <UART_SetConfig+0x270>
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d96:	e052      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d9e:	e04e      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da6:	e04a      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dae:	e046      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db6:	e042      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <UART_SetConfig+0x2dc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d13a      	bne.n	8005e38 <UART_SetConfig+0x2f8>
 8005dc2:	4b18      	ldr	r3, [pc, #96]	@ (8005e24 <UART_SetConfig+0x2e4>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005dcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dd0:	d01a      	beq.n	8005e08 <UART_SetConfig+0x2c8>
 8005dd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dd6:	d81b      	bhi.n	8005e10 <UART_SetConfig+0x2d0>
 8005dd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ddc:	d00c      	beq.n	8005df8 <UART_SetConfig+0x2b8>
 8005dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005de2:	d815      	bhi.n	8005e10 <UART_SetConfig+0x2d0>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <UART_SetConfig+0x2b0>
 8005de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dec:	d008      	beq.n	8005e00 <UART_SetConfig+0x2c0>
 8005dee:	e00f      	b.n	8005e10 <UART_SetConfig+0x2d0>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df6:	e022      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfe:	e01e      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e06:	e01a      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0e:	e016      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	e012      	b.n	8005e3e <UART_SetConfig+0x2fe>
 8005e18:	cfff69f3 	.word	0xcfff69f3
 8005e1c:	40008000 	.word	0x40008000
 8005e20:	40013800 	.word	0x40013800
 8005e24:	40021000 	.word	0x40021000
 8005e28:	40004400 	.word	0x40004400
 8005e2c:	40004800 	.word	0x40004800
 8005e30:	40004c00 	.word	0x40004c00
 8005e34:	40005000 	.word	0x40005000
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4aae      	ldr	r2, [pc, #696]	@ (80060fc <UART_SetConfig+0x5bc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	f040 8097 	bne.w	8005f78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d823      	bhi.n	8005e9a <UART_SetConfig+0x35a>
 8005e52:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <UART_SetConfig+0x318>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e9b 	.word	0x08005e9b
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e9b 	.word	0x08005e9b
 8005e68:	08005e8b 	.word	0x08005e8b
 8005e6c:	08005e9b 	.word	0x08005e9b
 8005e70:	08005e9b 	.word	0x08005e9b
 8005e74:	08005e9b 	.word	0x08005e9b
 8005e78:	08005e93 	.word	0x08005e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7fe faba 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8005e80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e82:	e010      	b.n	8005ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e84:	4b9e      	ldr	r3, [pc, #632]	@ (8006100 <UART_SetConfig+0x5c0>)
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e88:	e00d      	b.n	8005ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8a:	f7fe fa47 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8005e8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e90:	e009      	b.n	8005ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e98:	e005      	b.n	8005ea6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ea4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8130 	beq.w	800610e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	4a94      	ldr	r2, [pc, #592]	@ (8006104 <UART_SetConfig+0x5c4>)
 8005eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	4413      	add	r3, r2
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d305      	bcc.n	8005ede <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d903      	bls.n	8005ee6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ee4:	e113      	b.n	800610e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	2200      	movs	r2, #0
 8005eea:	60bb      	str	r3, [r7, #8]
 8005eec:	60fa      	str	r2, [r7, #12]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	4a84      	ldr	r2, [pc, #528]	@ (8006104 <UART_SetConfig+0x5c4>)
 8005ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2200      	movs	r2, #0
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f08:	f7fa f986 	bl	8000218 <__aeabi_uldivmod>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4610      	mov	r0, r2
 8005f12:	4619      	mov	r1, r3
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	020b      	lsls	r3, r1, #8
 8005f1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f22:	0202      	lsls	r2, r0, #8
 8005f24:	6979      	ldr	r1, [r7, #20]
 8005f26:	6849      	ldr	r1, [r1, #4]
 8005f28:	0849      	lsrs	r1, r1, #1
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	4605      	mov	r5, r0
 8005f30:	eb12 0804 	adds.w	r8, r2, r4
 8005f34:	eb43 0905 	adc.w	r9, r3, r5
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	469a      	mov	sl, r3
 8005f40:	4693      	mov	fp, r2
 8005f42:	4652      	mov	r2, sl
 8005f44:	465b      	mov	r3, fp
 8005f46:	4640      	mov	r0, r8
 8005f48:	4649      	mov	r1, r9
 8005f4a:	f7fa f965 	bl	8000218 <__aeabi_uldivmod>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4613      	mov	r3, r2
 8005f54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f5c:	d308      	bcc.n	8005f70 <UART_SetConfig+0x430>
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f64:	d204      	bcs.n	8005f70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6a3a      	ldr	r2, [r7, #32]
 8005f6c:	60da      	str	r2, [r3, #12]
 8005f6e:	e0ce      	b.n	800610e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f76:	e0ca      	b.n	800610e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f80:	d166      	bne.n	8006050 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005f82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d827      	bhi.n	8005fda <UART_SetConfig+0x49a>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <UART_SetConfig+0x450>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fb5 	.word	0x08005fb5
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fc5 	.word	0x08005fc5
 8005f9c:	08005fdb 	.word	0x08005fdb
 8005fa0:	08005fcb 	.word	0x08005fcb
 8005fa4:	08005fdb 	.word	0x08005fdb
 8005fa8:	08005fdb 	.word	0x08005fdb
 8005fac:	08005fdb 	.word	0x08005fdb
 8005fb0:	08005fd3 	.word	0x08005fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb4:	f7fe fa1e 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8005fb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fba:	e014      	b.n	8005fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fbc:	f7fe fa30 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8005fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fc2:	e010      	b.n	8005fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fc4:	4b4e      	ldr	r3, [pc, #312]	@ (8006100 <UART_SetConfig+0x5c0>)
 8005fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fc8:	e00d      	b.n	8005fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fca:	f7fe f9a7 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8005fce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fd0:	e009      	b.n	8005fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fd8:	e005      	b.n	8005fe6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8090 	beq.w	800610e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	4a44      	ldr	r2, [pc, #272]	@ (8006104 <UART_SetConfig+0x5c4>)
 8005ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006000:	005a      	lsls	r2, r3, #1
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	441a      	add	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	2b0f      	cmp	r3, #15
 8006018:	d916      	bls.n	8006048 <UART_SetConfig+0x508>
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006020:	d212      	bcs.n	8006048 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f023 030f 	bic.w	r3, r3, #15
 800602a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	b29b      	uxth	r3, r3
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	b29a      	uxth	r2, r3
 8006038:	8bfb      	ldrh	r3, [r7, #30]
 800603a:	4313      	orrs	r3, r2
 800603c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	8bfa      	ldrh	r2, [r7, #30]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	e062      	b.n	800610e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800604e:	e05e      	b.n	800610e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006050:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006054:	2b08      	cmp	r3, #8
 8006056:	d828      	bhi.n	80060aa <UART_SetConfig+0x56a>
 8006058:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <UART_SetConfig+0x520>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	080060ab 	.word	0x080060ab
 8006070:	0800609b 	.word	0x0800609b
 8006074:	080060ab 	.word	0x080060ab
 8006078:	080060ab 	.word	0x080060ab
 800607c:	080060ab 	.word	0x080060ab
 8006080:	080060a3 	.word	0x080060a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fe f9b6 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8006088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800608a:	e014      	b.n	80060b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fe f9c8 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8006090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006092:	e010      	b.n	80060b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006094:	4b1a      	ldr	r3, [pc, #104]	@ (8006100 <UART_SetConfig+0x5c0>)
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006098:	e00d      	b.n	80060b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7fe f93f 	bl	800431c <HAL_RCC_GetSysClockFreq>
 800609e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060a0:	e009      	b.n	80060b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060a8:	e005      	b.n	80060b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060b4:	bf00      	nop
    }

    if (pclk != 0U)
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d028      	beq.n	800610e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	4a10      	ldr	r2, [pc, #64]	@ (8006104 <UART_SetConfig+0x5c4>)
 80060c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c6:	461a      	mov	r2, r3
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	441a      	add	r2, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	2b0f      	cmp	r3, #15
 80060e4:	d910      	bls.n	8006108 <UART_SetConfig+0x5c8>
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ec:	d20c      	bcs.n	8006108 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60da      	str	r2, [r3, #12]
 80060f8:	e009      	b.n	800610e <UART_SetConfig+0x5ce>
 80060fa:	bf00      	nop
 80060fc:	40008000 	.word	0x40008000
 8006100:	00f42400 	.word	0x00f42400
 8006104:	08006934 	.word	0x08006934
      }
      else
      {
        ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2201      	movs	r2, #1
 8006112:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2201      	movs	r2, #1
 800611a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2200      	movs	r2, #0
 8006122:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800612a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800612e:	4618      	mov	r0, r3
 8006130:	3730      	adds	r7, #48	@ 0x30
 8006132:	46bd      	mov	sp, r7
 8006134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01a      	beq.n	800624e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006236:	d10a      	bne.n	800624e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b098      	sub	sp, #96	@ 0x60
 8006280:	af02      	add	r7, sp, #8
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800628c:	f7fb f908 	bl	80014a0 <HAL_GetTick>
 8006290:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d12f      	bne.n	8006300 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062a8:	2200      	movs	r2, #0
 80062aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f88e 	bl	80063d0 <UART_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d022      	beq.n	8006300 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e6      	bne.n	80062ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e063      	b.n	80063c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b04      	cmp	r3, #4
 800630c:	d149      	bne.n	80063a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006316:	2200      	movs	r2, #0
 8006318:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f857 	bl	80063d0 <UART_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d03c      	beq.n	80063a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	623b      	str	r3, [r7, #32]
   return(result);
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800633c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006346:	633b      	str	r3, [r7, #48]	@ 0x30
 8006348:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800634c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e6      	bne.n	8006328 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3308      	adds	r3, #8
 8006360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	60fb      	str	r3, [r7, #12]
   return(result);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800637a:	61fa      	str	r2, [r7, #28]
 800637c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	69b9      	ldr	r1, [r7, #24]
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	617b      	str	r3, [r7, #20]
   return(result);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e5      	bne.n	800635a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e012      	b.n	80063c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3758      	adds	r7, #88	@ 0x58
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e0:	e04f      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063e8:	d04b      	beq.n	8006482 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ea:	f7fb f859 	bl	80014a0 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d302      	bcc.n	8006400 <UART_WaitOnFlagUntilTimeout+0x30>
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e04e      	b.n	80064a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b00      	cmp	r3, #0
 8006410:	d037      	beq.n	8006482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b80      	cmp	r3, #128	@ 0x80
 8006416:	d034      	beq.n	8006482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b40      	cmp	r3, #64	@ 0x40
 800641c:	d031      	beq.n	8006482 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b08      	cmp	r3, #8
 800642a:	d110      	bne.n	800644e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2208      	movs	r2, #8
 8006432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f838 	bl	80064aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2208      	movs	r2, #8
 800643e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e029      	b.n	80064a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800645c:	d111      	bne.n	8006482 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f81e 	bl	80064aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e00f      	b.n	80064a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	429a      	cmp	r2, r3
 8006490:	bf0c      	ite	eq
 8006492:	2301      	moveq	r3, #1
 8006494:	2300      	movne	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	429a      	cmp	r2, r3
 800649e:	d0a0      	beq.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b095      	sub	sp, #84	@ 0x54
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80064d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e6      	bne.n	80064b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3308      	adds	r3, #8
 80064ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006508:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800650a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800650e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e3      	bne.n	80064e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006520:	2b01      	cmp	r3, #1
 8006522:	d118      	bne.n	8006556 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	60bb      	str	r3, [r7, #8]
   return(result);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f023 0310 	bic.w	r3, r3, #16
 8006538:	647b      	str	r3, [r7, #68]	@ 0x44
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6979      	ldr	r1, [r7, #20]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	613b      	str	r3, [r7, #16]
   return(result);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e6      	bne.n	8006524 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800656a:	bf00      	nop
 800656c:	3754      	adds	r7, #84	@ 0x54
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff fac1 	bl	8005b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b088      	sub	sp, #32
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6979      	ldr	r1, [r7, #20]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	613b      	str	r3, [r7, #16]
   return(result);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff fa8c 	bl	8005b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065e8:	bf00      	nop
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_UARTEx_EnableFifoMode+0x16>
 800663e:	2302      	movs	r3, #2
 8006640:	e02b      	b.n	800669a <HAL_UARTEx_EnableFifoMode+0x6e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2224      	movs	r2, #36	@ 0x24
 800664e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006670:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006678:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f88a 	bl	800679c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e02d      	b.n	8006716 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2224      	movs	r2, #36	@ 0x24
 80066c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f850 	bl	800679c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006732:	2302      	movs	r3, #2
 8006734:	e02d      	b.n	8006792 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2224      	movs	r2, #36	@ 0x24
 8006742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f812 	bl	800679c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d108      	bne.n	80067be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067bc:	e031      	b.n	8006822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067be:	2308      	movs	r3, #8
 80067c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067c2:	2308      	movs	r3, #8
 80067c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	0e5b      	lsrs	r3, r3, #25
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	0f5b      	lsrs	r3, r3, #29
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	7b3a      	ldrb	r2, [r7, #12]
 80067ea:	4911      	ldr	r1, [pc, #68]	@ (8006830 <UARTEx_SetNbDataToProcess+0x94>)
 80067ec:	5c8a      	ldrb	r2, [r1, r2]
 80067ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067f2:	7b3a      	ldrb	r2, [r7, #12]
 80067f4:	490f      	ldr	r1, [pc, #60]	@ (8006834 <UARTEx_SetNbDataToProcess+0x98>)
 80067f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	7b7a      	ldrb	r2, [r7, #13]
 8006808:	4909      	ldr	r1, [pc, #36]	@ (8006830 <UARTEx_SetNbDataToProcess+0x94>)
 800680a:	5c8a      	ldrb	r2, [r1, r2]
 800680c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006810:	7b7a      	ldrb	r2, [r7, #13]
 8006812:	4908      	ldr	r1, [pc, #32]	@ (8006834 <UARTEx_SetNbDataToProcess+0x98>)
 8006814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006816:	fb93 f3f2 	sdiv	r3, r3, r2
 800681a:	b29a      	uxth	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	0800694c 	.word	0x0800694c
 8006834:	08006954 	.word	0x08006954

08006838 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006840:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006844:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	b29b      	uxth	r3, r3
 8006852:	43db      	mvns	r3, r3
 8006854:	b29b      	uxth	r3, r3
 8006856:	4013      	ands	r3, r2
 8006858:	b29a      	uxth	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	1d3b      	adds	r3, r7, #4
 8006878:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <memset>:
 80068aa:	4402      	add	r2, r0
 80068ac:	4603      	mov	r3, r0
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d100      	bne.n	80068b4 <memset+0xa>
 80068b2:	4770      	bx	lr
 80068b4:	f803 1b01 	strb.w	r1, [r3], #1
 80068b8:	e7f9      	b.n	80068ae <memset+0x4>
	...

080068bc <__libc_init_array>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4d0d      	ldr	r5, [pc, #52]	@ (80068f4 <__libc_init_array+0x38>)
 80068c0:	4c0d      	ldr	r4, [pc, #52]	@ (80068f8 <__libc_init_array+0x3c>)
 80068c2:	1b64      	subs	r4, r4, r5
 80068c4:	10a4      	asrs	r4, r4, #2
 80068c6:	2600      	movs	r6, #0
 80068c8:	42a6      	cmp	r6, r4
 80068ca:	d109      	bne.n	80068e0 <__libc_init_array+0x24>
 80068cc:	4d0b      	ldr	r5, [pc, #44]	@ (80068fc <__libc_init_array+0x40>)
 80068ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006900 <__libc_init_array+0x44>)
 80068d0:	f000 f818 	bl	8006904 <_init>
 80068d4:	1b64      	subs	r4, r4, r5
 80068d6:	10a4      	asrs	r4, r4, #2
 80068d8:	2600      	movs	r6, #0
 80068da:	42a6      	cmp	r6, r4
 80068dc:	d105      	bne.n	80068ea <__libc_init_array+0x2e>
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e4:	4798      	blx	r3
 80068e6:	3601      	adds	r6, #1
 80068e8:	e7ee      	b.n	80068c8 <__libc_init_array+0xc>
 80068ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ee:	4798      	blx	r3
 80068f0:	3601      	adds	r6, #1
 80068f2:	e7f2      	b.n	80068da <__libc_init_array+0x1e>
 80068f4:	08006964 	.word	0x08006964
 80068f8:	08006964 	.word	0x08006964
 80068fc:	08006964 	.word	0x08006964
 8006900:	08006968 	.word	0x08006968

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
