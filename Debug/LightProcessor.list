
LightProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ffc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080081d4  080081d4  000091d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083ac  080083ac  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080083ac  080083ac  000093ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b4  080083b4  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080083b4  080083b4  000093b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083bc  080083bc  000093bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080083c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  20000070  08008430  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a44  08008430  0000aa44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021bd4  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f5b  00000000  00000000  0002bc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0002fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000147d  00000000  00000000  00031640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d862  00000000  00000000  00032abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f350  00000000  00000000  0006031f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c9ee  00000000  00000000  0007f66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019c05d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077e0  00000000  00000000  0019c0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001a3880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080081bc 	.word	0x080081bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	080081bc 	.word	0x080081bc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <fifo_empty>:
#include "fifo.h"

//============================================================================
// Return 1 if the fifo holds no characters to remove.  Otherwise 0.
//============================================================================
int fifo_empty(const struct fifo *f) {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    if (f->head == f->tail)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000552:	b2da      	uxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800055a:	b2db      	uxtb	r3, r3
 800055c:	429a      	cmp	r2, r3
 800055e:	d101      	bne.n	8000564 <fifo_empty+0x20>
        return 1;
 8000560:	2301      	movs	r3, #1
 8000562:	e000      	b.n	8000566 <fifo_empty+0x22>
    else
        return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <fifo_full>:

//============================================================================
// Return 1 if the fifo cannot hold any more characters.  Otherwise 0.
//============================================================================
int fifo_full(const struct fifo *f) {
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
    uint8_t next = (f->tail + 1) % sizeof f->buffer;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000580:	b2db      	uxtb	r3, r3
 8000582:	3301      	adds	r3, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800058a:	73fb      	strb	r3, [r7, #15]
    // We can't let the tail reach the head.
    if (next == f->head)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000592:	b2db      	uxtb	r3, r3
 8000594:	7bfa      	ldrb	r2, [r7, #15]
 8000596:	429a      	cmp	r2, r3
 8000598:	d101      	bne.n	800059e <fifo_full+0x2c>
        return 1;
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <fifo_full+0x2e>
    else
        return 0;
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <fifo_insert>:

//============================================================================
// Append a character to the tail of the fifo.
// If the fifo is already full, drop the character.
//============================================================================
void fifo_insert(struct fifo *f, char ch) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
    if (fifo_full(f))
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffda 	bl	8000572 <fifo_full>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d12e      	bne.n	8000622 <fifo_insert+0x76>
        return; // FIFO is full.  Just drop the new character.
    uint8_t next = (f->tail + 1) % sizeof f->buffer;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005d4:	73fb      	strb	r3, [r7, #15]
    if (ch == '\n')
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	2b0a      	cmp	r3, #10
 80005da:	d107      	bne.n	80005ec <fifo_insert+0x40>
        f->newline = f->tail; // a newline has been inserted
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 80005ea:	e00d      	b.n	8000608 <fifo_insert+0x5c>
    else if (f->newline == f->tail)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d103      	bne.n	8000608 <fifo_insert+0x5c>
        f->newline = next; // no newline detected yet
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7bfa      	ldrb	r2, [r7, #15]
 8000604:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    f->buffer[f->tail] = ch;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	78fa      	ldrb	r2, [r7, #3]
 8000616:	545a      	strb	r2, [r3, r1]
    f->tail = next;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7bfa      	ldrb	r2, [r7, #15]
 800061c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8000620:	e000      	b.n	8000624 <fifo_insert+0x78>
        return; // FIFO is full.  Just drop the new character.
 8000622:	bf00      	nop
}
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <fifo_uninsert>:

//============================================================================
// Remove a character from the *tail* of the fifo.
// In other words, undo the last insertion.
//============================================================================
char fifo_uninsert(struct fifo *f) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b084      	sub	sp, #16
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
    if (fifo_empty(f))
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ff86 	bl	8000544 <fifo_empty>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <fifo_uninsert+0x18>
        return '$'; // something unexpected
 800063e:	2324      	movs	r3, #36	@ 0x24
 8000640:	e032      	b.n	80006a8 <fifo_uninsert+0x7e>
    int prev = (f->tail == 0) ? sizeof f->buffer - 1 : f->tail - 1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d005      	beq.n	800065a <fifo_uninsert+0x30>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000654:	b2db      	uxtb	r3, r3
 8000656:	3b01      	subs	r3, #1
 8000658:	e000      	b.n	800065c <fifo_uninsert+0x32>
 800065a:	237f      	movs	r3, #127	@ 0x7f
 800065c:	60fb      	str	r3, [r7, #12]
    if (f->newline == f->tail)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000664:	b2da      	uxtb	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800066c:	b2db      	uxtb	r3, r3
 800066e:	429a      	cmp	r2, r3
 8000670:	d104      	bne.n	800067c <fifo_uninsert+0x52>
        f->newline = prev;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    f->tail = prev;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    char ch = f->buffer[f->tail];
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800068c:	b2db      	uxtb	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	5c9b      	ldrb	r3, [r3, r2]
 8000694:	72fb      	strb	r3, [r7, #11]
    f->buffer[f->tail] = '@'; // something unexpected
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2140      	movs	r1, #64	@ 0x40
 80006a4:	5499      	strb	r1, [r3, r2]
    return ch;
 80006a6:	7afb      	ldrb	r3, [r7, #11]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <fifo_newline>:

//============================================================================
// Return 1 if the fifo contains at least one newline.  Otherwise 0.
//============================================================================
int fifo_newline(const struct fifo *f) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    if (fifo_empty(f))
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ff43 	bl	8000544 <fifo_empty>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <fifo_newline+0x18>
        return 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	e00c      	b.n	80006e2 <fifo_newline+0x32>
    if (f->newline != f->tail)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	429a      	cmp	r2, r3
 80006da:	d001      	beq.n	80006e0 <fifo_newline+0x30>
        return 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <fifo_newline+0x32>
    return 0;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <fifo_remove>:

//============================================================================
// Remove a character from the head of the fifo.
// If the fifo is empty, you get a tilde (~).
//============================================================================
char fifo_remove(struct fifo *f) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b084      	sub	sp, #16
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
    if (fifo_empty(f))
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff26 	bl	8000544 <fifo_empty>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <fifo_remove+0x18>
        return '!'; // something unexpected.
 80006fe:	2321      	movs	r3, #33	@ 0x21
 8000700:	e02e      	b.n	8000760 <fifo_remove+0x76>
    char ch = f->buffer[f->head];
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	5c9b      	ldrb	r3, [r3, r2]
 8000710:	73fb      	strb	r3, [r7, #15]
    if (f->newline == f->head)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000718:	b2da      	uxtb	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000720:	b2db      	uxtb	r3, r3
 8000722:	429a      	cmp	r2, r3
 8000724:	d106      	bne.n	8000734 <fifo_remove+0x4a>
        f->newline = f->tail; // We just read the last newline.  Clear nl.
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800072c:	b2da      	uxtb	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    f->buffer[f->head] = '~'; // overwrite removed char with something weird
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	217e      	movs	r1, #126	@ 0x7e
 8000742:	5499      	strb	r1, [r3, r2]
    uint8_t next = (f->head + 1) % sizeof f->buffer;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800074a:	b2db      	uxtb	r3, r3
 800074c:	3301      	adds	r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000754:	73bb      	strb	r3, [r7, #14]
    f->head = next;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7bba      	ldrb	r2, [r7, #14]
 800075a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return ch;
 800075e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	SCB->VTOR = FLASH_BASE;
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <main+0x40>)
 800076e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000772:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f001 fa3b 	bl	8001bee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f818 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 fb2e 	bl	8000ddc <MX_GPIO_Init>
  MX_UART5_Init();
 8000780:	f000 fab8 	bl	8000cf4 <MX_UART5_Init>
  MX_ADC1_Init();
 8000784:	f000 f85e 	bl	8000844 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000788:	f000 f8d4 	bl	8000934 <MX_ADC2_Init>
  MX_ADC3_Init();
 800078c:	f000 f938 	bl	8000a00 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000790:	f000 f9ae 	bl	8000af0 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000794:	f000 fa4c 	bl	8000c30 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000798:	f000 fa10 	bl	8000bbc <MX_DAC1_Init>
  MX_USB_PCD_Init();
 800079c:	f000 faf6 	bl	8000d8c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  run();
 80007a0:	f000 fcd4 	bl	800114c <run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <main+0x3c>
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	2238      	movs	r2, #56	@ 0x38
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f007 fa4a 	bl	8007c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f003 ffb4 	bl	800473c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007d4:	2321      	movs	r3, #33	@ 0x21
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	2303      	movs	r3, #3
 80007e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007ea:	2304      	movs	r3, #4
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007ee:	2355      	movs	r3, #85	@ 0x55
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	4618      	mov	r0, r3
 8000804:	f004 f84e 	bl	80048a4 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800080e:	f000 fb75 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2303      	movs	r3, #3
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2104      	movs	r1, #4
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fb4c 	bl	8004ec8 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000836:	f000 fb61 	bl	8000efc <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	@ 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	@ 0x30
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800084a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2220      	movs	r2, #32
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f007 f9f9 	bl	8007c54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000862:	4b32      	ldr	r3, [pc, #200]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000864:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000868:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086a:	4b30      	ldr	r3, [pc, #192]	@ (800092c <MX_ADC1_Init+0xe8>)
 800086c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000870:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000872:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000878:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <MX_ADC1_Init+0xe8>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088a:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_ADC1_Init+0xe8>)
 800088c:	2204      	movs	r2, #4
 800088e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000890:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000898:	2200      	movs	r2, #0
 800089a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800089c:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_ADC1_Init+0xe8>)
 800089e:	2201      	movs	r2, #1
 80008a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	4817      	ldr	r0, [pc, #92]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008ce:	f001 fc3f 	bl	8002150 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80008d8:	f000 fb10 	bl	8000efc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_ADC1_Init+0xe8>)
 80008e8:	f002 fed0 	bl	800368c <HAL_ADCEx_MultiModeConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008f2:	f000 fb03 	bl	8000efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_ADC1_Init+0xec>)
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fa:	2306      	movs	r3, #6
 80008fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000902:	237f      	movs	r3, #127	@ 0x7f
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000906:	2304      	movs	r3, #4
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <MX_ADC1_Init+0xe8>)
 8000914:	f002 f98c 	bl	8002c30 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800091e:	f000 faed 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	@ 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000008c 	.word	0x2000008c
 8000930:	0c900008 	.word	0x0c900008

08000934 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2220      	movs	r2, #32
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f007 f987 	bl	8007c54 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000946:	4b2b      	ldr	r3, [pc, #172]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 8000948:	4a2b      	ldr	r2, [pc, #172]	@ (80009f8 <MX_ADC2_Init+0xc4>)
 800094a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800094c:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 800094e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000952:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000954:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095a:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000960:	4b24      	ldr	r3, [pc, #144]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000966:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096c:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 800096e:	2204      	movs	r2, #4
 8000970:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 8000974:	2200      	movs	r2, #0
 8000976:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000978:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 800097a:	2200      	movs	r2, #0
 800097c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800097e:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 8000980:	2201      	movs	r2, #1
 8000982:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009ae:	4811      	ldr	r0, [pc, #68]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 80009b0:	f001 fbce 	bl	8002150 <HAL_ADC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80009ba:	f000 fa9f 	bl	8000efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_ADC2_Init+0xc8>)
 80009c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c2:	2306      	movs	r3, #6
 80009c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ca:	237f      	movs	r3, #127	@ 0x7f
 80009cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ce:	2304      	movs	r3, #4
 80009d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <MX_ADC2_Init+0xc0>)
 80009dc:	f002 f928 	bl	8002c30 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80009e6:	f000 fa89 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000124 	.word	0x20000124
 80009f8:	50000100 	.word	0x50000100
 80009fc:	0c900008 	.word	0x0c900008

08000a00 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	@ 0x30
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f007 f91b 	bl	8007c54 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a20:	4a31      	ldr	r2, [pc, #196]	@ (8000ae8 <MX_ADC3_Init+0xe8>)
 8000a22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a26:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000a38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000a56:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a86:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000a88:	f001 fb62 	bl	8002150 <HAL_ADC_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000a92:	f000 fa33 	bl	8000efc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4810      	ldr	r0, [pc, #64]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000aa2:	f002 fdf3 	bl	800368c <HAL_ADCEx_MultiModeConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000aac:	f000 fa26 	bl	8000efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_ADC3_Init+0xec>)
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000abc:	237f      	movs	r3, #127	@ 0x7f
 8000abe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_ADC3_Init+0xe4>)
 8000ace:	f002 f8af 	bl	8002c30 <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000ad8:	f000 fa10 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	@ 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200001bc 	.word	0x200001bc
 8000ae8:	50000400 	.word	0x50000400
 8000aec:	04300002 	.word	0x04300002

08000af0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2220      	movs	r2, #32
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f007 f8a9 	bl	8007c54 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b02:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b04:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb4 <MX_ADC4_Init+0xc4>)
 8000b06:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b0a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b0e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000b10:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b16:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b22:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b28:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b48:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000b62:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000b6a:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b6c:	f001 faf0 	bl	8002150 <HAL_ADC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000b76:	f000 f9c1 	bl	8000efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_ADC4_Init+0xc8>)
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7e:	2306      	movs	r3, #6
 8000b80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b86:	237f      	movs	r3, #127	@ 0x7f
 8000b88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <MX_ADC4_Init+0xc0>)
 8000b98:	f002 f84a 	bl	8002c30 <HAL_ADC_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000ba2:	f000 f9ab 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000254 	.word	0x20000254
 8000bb4:	50000500 	.word	0x50000500
 8000bb8:	14f00020 	.word	0x14f00020

08000bbc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2230      	movs	r2, #48	@ 0x30
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 f843 	bl	8007c54 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_DAC1_Init+0x6c>)
 8000bd0:	4a16      	ldr	r2, [pc, #88]	@ (8000c2c <MX_DAC1_Init+0x70>)
 8000bd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bd4:	4814      	ldr	r0, [pc, #80]	@ (8000c28 <MX_DAC1_Init+0x6c>)
 8000bd6:	f002 ff80 	bl	8003ada <HAL_DAC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000be0:	f000 f98c 	bl	8000efc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000be4:	2302      	movs	r3, #2
 8000be6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <MX_DAC1_Init+0x6c>)
 8000c10:	f002 ff86 	bl	8003b20 <HAL_DAC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000c1a:	f000 f96f 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	@ 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200002ec 	.word	0x200002ec
 8000c2c:	50000800 	.word	0x50000800

08000c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4e:	4b27      	ldr	r3, [pc, #156]	@ (8000cec <MX_TIM2_Init+0xbc>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c52:	4a26      	ldr	r2, [pc, #152]	@ (8000cec <MX_TIM2_Init+0xbc>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5a:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <MX_TIM2_Init+0xbc>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c66:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000c68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000c70:	2205      	movs	r2, #5
 8000c72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000c7c:	2254      	movs	r2, #84	@ 0x54
 8000c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c8c:	4818      	ldr	r0, [pc, #96]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000c8e:	f004 fd81 	bl	8005794 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c98:	f000 f930 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4811      	ldr	r0, [pc, #68]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000caa:	f004 ff51 	bl	8005b50 <HAL_TIM_ConfigClockSource>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000cb4:	f000 f922 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <MX_TIM2_Init+0xc0>)
 8000cc6:	f005 fa83 	bl	80061d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000cd0:	f000 f914 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	201c      	movs	r0, #28
 8000cda:	f002 feca 	bl	8003a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cde:	201c      	movs	r0, #28
 8000ce0:	f002 fee1 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	20000300 	.word	0x20000300

08000cf4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	@ (8000d88 <MX_UART5_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d3e:	f005 fb2d 	bl	800639c <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000d48:	f000 f8d8 	bl	8000efc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d50:	f006 fc87 	bl	8007662 <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 f8cf 	bl	8000efc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d62:	f006 fcbc 	bl	80076de <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f000 f8c6 	bl	8000efc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart5) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <MX_UART5_Init+0x90>)
 8000d72:	f006 fc3b 	bl	80075ec <HAL_UARTEx_EnableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 f8be 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200003cc 	.word	0x200003cc
 8000d88:	40005000 	.word	0x40005000

08000d8c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000d92:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <MX_USB_PCD_Init+0x4c>)
 8000d94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000d98:	2208      	movs	r2, #8
 8000d9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <MX_USB_PCD_Init+0x48>)
 8000dc2:	f003 fad9 	bl	8004378 <HAL_PCD_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000dcc:	f000 f896 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000460 	.word	0x20000460
 8000dd8:	40005c00 	.word	0x40005c00

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0320 	and.w	r3, r3, #32
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a38      	ldr	r2, [pc, #224]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	4a32      	ldr	r2, [pc, #200]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a26      	ldr	r2, [pc, #152]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <MX_GPIO_Init+0x114>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RX_IND_Pin|TX_IND_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e74:	f003 fa68 	bl	8004348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC4_IDLE_IND_Pin ADC1_IDLE_IND_Pin ADC1_MOD1_IND_Pin ADC1_MOD2_IND_Pin
                           ADC_MOD3_IND_Pin ADC3_MOD2_IND_Pin ADC2_MOD3_IND_Pin ADC2_MOD3_INDC7_Pin
                           ADC2_MOD2_IND_Pin ADC2_MOD1_IND_Pin */
  GPIO_InitStruct.Pin = ADC4_IDLE_IND_Pin|ADC1_IDLE_IND_Pin|ADC1_MOD1_IND_Pin|ADC1_MOD2_IND_Pin
 8000e78:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000e7c:	617b      	str	r3, [r7, #20]
                          |ADC_MOD3_IND_Pin|ADC3_MOD2_IND_Pin|ADC2_MOD3_IND_Pin|ADC2_MOD3_INDC7_Pin
                          |ADC2_MOD2_IND_Pin|ADC2_MOD1_IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4819      	ldr	r0, [pc, #100]	@ (8000ef4 <MX_GPIO_Init+0x118>)
 8000e8e:	f003 f8c1 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_MOD3_IND_Pin ADC1_MOD4_IND_Pin ADC_MOD4_IND_Pin ADC2_IDLE_IND_Pin */
  GPIO_InitStruct.Pin = ADC1_MOD3_IND_Pin|ADC1_MOD4_IND_Pin|ADC_MOD4_IND_Pin|ADC2_IDLE_IND_Pin;
 8000e92:	f240 1383 	movw	r3, #387	@ 0x183
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eaa:	f003 f8b3 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_MOD1_IND_Pin ADC3_IDLE_IND_Pin ADC4_MOD4_IND_Pin ADC4_MOD3_IND_Pin
                           ADC4_MOD2_IND_Pin ADC4_MOD1_IND_Pin */
  GPIO_InitStruct.Pin = ADC3_MOD1_IND_Pin|ADC3_IDLE_IND_Pin|ADC4_MOD4_IND_Pin|ADC4_MOD3_IND_Pin
 8000eae:	f647 0305 	movw	r3, #30725	@ 0x7805
 8000eb2:	617b      	str	r3, [r7, #20]
                          |ADC4_MOD2_IND_Pin|ADC4_MOD1_IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <MX_GPIO_Init+0x11c>)
 8000ec4:	f003 f8a6 	bl	8004014 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_IND_Pin TX_IND_Pin */
  GPIO_InitStruct.Pin = RX_IND_Pin|TX_IND_Pin;
 8000ec8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee4:	f003 f896 	bl	8004014 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	@ 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48000400 	.word	0x48000400

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <Error_Handler+0x8>

08000f08 <_ZN7Usb_ComC1EP19__PCD_HandleTypeDef>:
#include <stdio.h>

class Usb_Com{
public:
//Declaration
	Usb_Com(PCD_HandleTypeDef * hpcd_USB_FS) {usb_instance = hpcd_USB_FS;};
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_ZN9Usb_SetupC1EP19__PCD_HandleTypeDef>:
#define INC_USBSETUP_HPP_
#include "stm32g4xx_hal.h"

class Usb_Setup {
public:
	Usb_Setup(PCD_HandleTypeDef * hpcd_USB_FS) {usb_instance = hpcd_USB_FS;}
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_ZN9Usb_Setup16DeviceDescriptorC1Ev>:
		uint16_t bcdDevice;
		uint8_t iManufacturer;
		uint8_t iProduct;
		uint8_t iSerialNumber;
		uint8_t bNumConfigurations;
	} DeviceDescriptor;
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2212      	movs	r2, #18
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	705a      	strb	r2, [r3, #1]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f76:	805a      	strh	r2, [r3, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2240      	movs	r2, #64	@ 0x40
 8000f7c:	71da      	strb	r2, [r3, #7]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_Z18ProcessEndOfSampleP19__ADC_HandleTypeDef>:

void Usb_Received(PCD_HandleTypeDef *hpcd, uint8_t epnum){
	usb.Received = true;
}

void ProcessEndOfSample(ADC_HandleTypeDef * hadc){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SquareWaveInit>:

void SquareWaveInit(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <SquareWaveInit+0x7c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	4a1c      	ldr	r2, [pc, #112]	@ (800101c <SquareWaveInit+0x7c>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <SquareWaveInit+0x7c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <SquareWaveInit+0x7c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a16      	ldr	r2, [pc, #88]	@ (800101c <SquareWaveInit+0x7c>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <SquareWaveInit+0x7c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = ADC1_IN3_Pin | ADC2_IN3_Pin;
 8000fe6:	2344      	movs	r3, #68	@ 0x44
 8000fe8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ADC1_IN3_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffc:	f003 f80a 	bl	8004014 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ADC3_IN1_Pin | ADC4_IN5_Pin;
 8001000:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001004:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ADC3_IN1_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <SquareWaveInit+0x80>)
 800100e:	f003 f801 	bl	8004014 <HAL_GPIO_Init>
}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400

08001024 <_Z14CheckSquareValP19__TIM_HandleTypeDef>:

	GPIO_InitStruct.Pin = ADC3_IN1_Pin | ADC4_IN5_Pin;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

void CheckSquareVal(TIM_HandleTypeDef * htim2){
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
//	fprintf(stdout, "CV\n");
	GPIO_PinState PinState = HAL_GPIO_ReadPin(ADC1_IN3_GPIO_Port, ADC1_IN3_Pin);
 800102c:	2104      	movs	r1, #4
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f003 f971 	bl	8004318 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
	if (PinState == GPIO_PIN_SET){
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d11a      	bne.n	8001076 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0x52>
		fprintf(stdout, "1\n");
 8001040:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xe4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2202      	movs	r2, #2
 8001048:	2101      	movs	r1, #1
 800104a:	4830      	ldr	r0, [pc, #192]	@ (800110c <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xe8>)
 800104c:	f006 fd1c 	bl	8007a88 <fwrite>
		UartTransmitBuffer[bytePointer] |= 0x1 << bitPointer;
 8001050:	4b2f      	ldr	r3, [pc, #188]	@ (8001110 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xec>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a2f      	ldr	r2, [pc, #188]	@ (8001114 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf0>)
 8001056:	5cd3      	ldrb	r3, [r2, r3]
 8001058:	b25a      	sxtb	r2, r3
 800105a:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf4>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	2301      	movs	r3, #1
 8001062:	408b      	lsls	r3, r1
 8001064:	b25b      	sxtb	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b25a      	sxtb	r2, r3
 800106a:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xec>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	b2d1      	uxtb	r1, r2
 8001070:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf0>)
 8001072:	54d1      	strb	r1, [r2, r3]
 8001074:	e01b      	b.n	80010ae <_Z14CheckSquareValP19__TIM_HandleTypeDef+0x8a>
	}
	else{
		fprintf(stdout, "0\n");
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xe4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2202      	movs	r2, #2
 800107e:	2101      	movs	r1, #1
 8001080:	4826      	ldr	r0, [pc, #152]	@ (800111c <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf8>)
 8001082:	f006 fd01 	bl	8007a88 <fwrite>
		UartTransmitBuffer[bytePointer] &= ~(0x1 << bitPointer);
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xec>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a22      	ldr	r2, [pc, #136]	@ (8001114 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf0>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	b25a      	sxtb	r2, r3
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf4>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	2301      	movs	r3, #1
 8001098:	408b      	lsls	r3, r1
 800109a:	b25b      	sxtb	r3, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	b25a      	sxtb	r2, r3
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xec>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	b2d1      	uxtb	r1, r2
 80010aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001114 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf0>)
 80010ac:	54d1      	strb	r1, [r2, r3]
	}

	bitPointer += 1;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf4>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf4>)
 80010b8:	701a      	strb	r2, [r3, #0]

	//ADC1
	if ((bytePointer == 63) && (bitPointer == 7)){ //Sampling last bit of the packet
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xec>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b3f      	cmp	r3, #63	@ 0x3f
 80010c0:	d112      	bne.n	80010e8 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xc4>
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d10e      	bne.n	80010e8 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xc4>
		bytePointer = 0; //Reset bit and byte pointer
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
		bitPointer = 0;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]

//		HAL_UART_Transmit(&huart5, UartTransmitBuffer, 64, 0);
		fprintf(stdout, "Data Transmitted\n");
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xe4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2211      	movs	r2, #17
 80010de:	2101      	movs	r1, #1
 80010e0:	480f      	ldr	r0, [pc, #60]	@ (8001120 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xfc>)
 80010e2:	f006 fcd1 	bl	8007a88 <fwrite>
		bitPointer = 0;
	}
	//ADC2
	//ADC3
	//ADC4
}
 80010e6:	e00b      	b.n	8001100 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xdc>
	else if (bitPointer == 7){ //Sampling last bit of each byte
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d107      	bne.n	8001100 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xdc>
		bytePointer += 1;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xec>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a06      	ldr	r2, [pc, #24]	@ (8001110 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xec>)
 80010f8:	6013      	str	r3, [r2, #0]
		bitPointer = 0;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <_Z14CheckSquareValP19__TIM_HandleTypeDef+0xf4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000020 	.word	0x20000020
 800110c:	080082c4 	.word	0x080082c4
 8001110:	2000081c 	.word	0x2000081c
 8001114:	20000824 	.word	0x20000824
 8001118:	20000820 	.word	0x20000820
 800111c:	080082c8 	.word	0x080082c8
 8001120:	080082cc 	.word	0x080082cc

08001124 <_Z12CheckSineValP19__TIM_HandleTypeDef>:

void CheckSineVal(TIM_HandleTypeDef * htim2){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	fprintf(stdout, "CAV");
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <_Z12CheckSineValP19__TIM_HandleTypeDef+0x20>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2203      	movs	r2, #3
 8001134:	2101      	movs	r1, #1
 8001136:	4804      	ldr	r0, [pc, #16]	@ (8001148 <_Z12CheckSineValP19__TIM_HandleTypeDef+0x24>)
 8001138:	f006 fca6 	bl	8007a88 <fwrite>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000020 	.word	0x20000020
 8001148:	080082e0 	.word	0x080082e0

0800114c <run>:

extern "C" void run(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
//	}
//	fprintf(stdout, "Endpoint %d Opened\n", tracked_ep);
//	fprintf(stdout, "Usb Config Finished\n");

//ADC Config
	fprintf(stdout, "Started ADC Config\n");
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <run+0xa8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2213      	movs	r2, #19
 8001158:	2101      	movs	r1, #1
 800115a:	4827      	ldr	r0, [pc, #156]	@ (80011f8 <run+0xac>)
 800115c:	f006 fc94 	bl	8007a88 <fwrite>
	SquareWaveInit();
 8001160:	f7ff ff1e 	bl	8000fa0 <SquareWaveInit>
	hadc1.EndOfSamplingCallback = ProcessEndOfSample;
 8001164:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <run+0xb0>)
 8001166:	4a26      	ldr	r2, [pc, #152]	@ (8001200 <run+0xb4>)
 8001168:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	if (HAL_ADC_Start(&hadc1) != HAL_OK){
 800116c:	4823      	ldr	r0, [pc, #140]	@ (80011fc <run+0xb0>)
 800116e:	f001 f9e9 	bl	8002544 <HAL_ADC_Start>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d008      	beq.n	8001194 <run+0x48>
		fprintf(stdout, "Failed to Config ADC\n");
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <run+0xa8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	2215      	movs	r2, #21
 800118a:	2101      	movs	r1, #1
 800118c:	481d      	ldr	r0, [pc, #116]	@ (8001204 <run+0xb8>)
 800118e:	f006 fc7b 	bl	8007a88 <fwrite>
		return;
 8001192:	e02e      	b.n	80011f2 <run+0xa6>
	}
	fprintf(stdout, "ADC Config Finished\n");
 8001194:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <run+0xa8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2214      	movs	r2, #20
 800119c:	2101      	movs	r1, #1
 800119e:	481a      	ldr	r0, [pc, #104]	@ (8001208 <run+0xbc>)
 80011a0:	f006 fc72 	bl	8007a88 <fwrite>

//Timer Config
	fprintf(stdout, "Started Timer Config\n");
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <run+0xa8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2215      	movs	r2, #21
 80011ac:	2101      	movs	r1, #1
 80011ae:	4817      	ldr	r0, [pc, #92]	@ (800120c <run+0xc0>)
 80011b0:	f006 fc6a 	bl	8007a88 <fwrite>
	if (isSquareMode){
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <run+0xc4>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <run+0x7a>
		htim2.PeriodElapsedCallback = CheckSquareVal;
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <run+0xc8>)
 80011be:	4a16      	ldr	r2, [pc, #88]	@ (8001218 <run+0xcc>)
 80011c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80011c4:	e003      	b.n	80011ce <run+0x82>
	}
	else{
		htim2.PeriodElapsedCallback = CheckSineVal;
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <run+0xc8>)
 80011c8:	4a14      	ldr	r2, [pc, #80]	@ (800121c <run+0xd0>)
 80011ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
//		fprintf(stdout, "Failed to config Timer\n");
//		return;
//	}

	//Manually Enable TIM2 Interrupt
	htim2.Instance->DIER = TIM_DIER_UIE;
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <run+0xc8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	60da      	str	r2, [r3, #12]
	htim2.Instance->CR1 = TIM_CR1_CEN;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <run+0xc8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

	fprintf(stdout, "Timer Config Finished\n");
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <run+0xa8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2216      	movs	r2, #22
 80011e6:	2101      	movs	r1, #1
 80011e8:	480d      	ldr	r0, [pc, #52]	@ (8001220 <run+0xd4>)
 80011ea:	f006 fc4d 	bl	8007a88 <fwrite>

	while (1){
		__WFI();
 80011ee:	bf30      	wfi
 80011f0:	e7fd      	b.n	80011ee <run+0xa2>
	}
}
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000020 	.word	0x20000020
 80011f8:	080082e4 	.word	0x080082e4
 80011fc:	2000008c 	.word	0x2000008c
 8001200:	08000f8d 	.word	0x08000f8d
 8001204:	080082f8 	.word	0x080082f8
 8001208:	08008310 	.word	0x08008310
 800120c:	08008328 	.word	0x08008328
 8001210:	20000000 	.word	0x20000000
 8001214:	20000300 	.word	0x20000300
 8001218:	08001025 	.word	0x08001025
 800121c:	08001125 	.word	0x08001125
 8001220:	08008340 	.word	0x08008340

08001224 <_Z41__static_initialization_and_destruction_0v>:
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
Usb_Com usb = Usb_Com(&hpcd_USB_FS);
 8001228:	4906      	ldr	r1, [pc, #24]	@ (8001244 <_Z41__static_initialization_and_destruction_0v+0x20>)
 800122a:	4807      	ldr	r0, [pc, #28]	@ (8001248 <_Z41__static_initialization_and_destruction_0v+0x24>)
 800122c:	f7ff fe6c 	bl	8000f08 <_ZN7Usb_ComC1EP19__PCD_HandleTypeDef>
Usb_Setup usb_setup = Usb_Setup(&hpcd_USB_FS);
 8001230:	4904      	ldr	r1, [pc, #16]	@ (8001244 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <_Z41__static_initialization_and_destruction_0v+0x28>)
 8001234:	f7ff fe80 	bl	8000f38 <_ZN9Usb_SetupC1EP19__PCD_HandleTypeDef>
Usb_Setup::DeviceDescriptor usb_descriptor;
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 800123a:	f7ff fe8f 	bl	8000f5c <_ZN9Usb_Setup16DeviceDescriptorC1Ev>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000460 	.word	0x20000460
 8001248:	20000778 	.word	0x20000778
 800124c:	20000800 	.word	0x20000800
 8001250:	20000808 	.word	0x20000808

08001254 <_GLOBAL__sub_I_usb>:
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
 8001258:	f7ff ffe4 	bl	8001224 <_Z41__static_initialization_and_destruction_0v>
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_MspInit+0x44>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126a:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6613      	str	r3, [r2, #96]	@ 0x60
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <HAL_MspInit+0x44>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x44>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x44>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6593      	str	r3, [r2, #88]	@ 0x58
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x44>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001296:	f003 faf5 	bl	8004884 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0a4      	sub	sp, #144	@ 0x90
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c4:	2254      	movs	r2, #84	@ 0x54
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 fcc3 	bl	8007c54 <memset>
  if(hadc->Instance==ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d6:	d148      	bne.n	800136a <HAL_ADC_MspInit+0xc2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 f805 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012f4:	f7ff fe02 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012f8:	4b92      	ldr	r3, [pc, #584]	@ (8001544 <HAL_ADC_MspInit+0x29c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a91      	ldr	r2, [pc, #580]	@ (8001544 <HAL_ADC_MspInit+0x29c>)
 8001300:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001302:	4b90      	ldr	r3, [pc, #576]	@ (8001544 <HAL_ADC_MspInit+0x29c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10b      	bne.n	8001322 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800130a:	4b8f      	ldr	r3, [pc, #572]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130e:	4a8e      	ldr	r2, [pc, #568]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001310:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001316:	4b8c      	ldr	r3, [pc, #560]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b89      	ldr	r3, [pc, #548]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a88      	ldr	r2, [pc, #544]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b86      	ldr	r3, [pc, #536]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	623b      	str	r3, [r7, #32]
 8001338:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800133a:	2304      	movs	r3, #4
 800133c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133e:	2303      	movs	r3, #3
 8001340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800134e:	4619      	mov	r1, r3
 8001350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001354:	f002 fe5e 	bl	8004014 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2012      	movs	r0, #18
 800135e:	f002 fb88 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001362:	2012      	movs	r0, #18
 8001364:	f002 fb9f 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001368:	e0e7      	b.n	800153a <HAL_ADC_MspInit+0x292>
  else if(hadc->Instance==ADC2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a77      	ldr	r2, [pc, #476]	@ (800154c <HAL_ADC_MspInit+0x2a4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d148      	bne.n	8001406 <HAL_ADC_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800137a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800137e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001384:	4618      	mov	r0, r3
 8001386:	f003 ffb7 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_ADC_MspInit+0xec>
      Error_Handler();
 8001390:	f7ff fdb4 	bl	8000efc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001394:	4b6b      	ldr	r3, [pc, #428]	@ (8001544 <HAL_ADC_MspInit+0x29c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a6a      	ldr	r2, [pc, #424]	@ (8001544 <HAL_ADC_MspInit+0x29c>)
 800139c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800139e:	4b69      	ldr	r3, [pc, #420]	@ (8001544 <HAL_ADC_MspInit+0x29c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d10b      	bne.n	80013be <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013a6:	4b68      	ldr	r3, [pc, #416]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	4a67      	ldr	r2, [pc, #412]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80013ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b2:	4b65      	ldr	r3, [pc, #404]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b62      	ldr	r3, [pc, #392]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a61      	ldr	r2, [pc, #388]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d6:	2340      	movs	r3, #64	@ 0x40
 80013d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013da:	2303      	movs	r3, #3
 80013dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f0:	f002 fe10 	bl	8004014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2012      	movs	r0, #18
 80013fa:	f002 fb3a 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013fe:	2012      	movs	r0, #18
 8001400:	f002 fb51 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 8001404:	e099      	b.n	800153a <HAL_ADC_MspInit+0x292>
  else if(hadc->Instance==ADC3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a51      	ldr	r2, [pc, #324]	@ (8001550 <HAL_ADC_MspInit+0x2a8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d147      	bne.n	80014a0 <HAL_ADC_MspInit+0x1f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001416:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800141a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001420:	4618      	mov	r0, r3
 8001422:	f003 ff69 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 800142c:	f7ff fd66 	bl	8000efc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001430:	4b48      	ldr	r3, [pc, #288]	@ (8001554 <HAL_ADC_MspInit+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a47      	ldr	r2, [pc, #284]	@ (8001554 <HAL_ADC_MspInit+0x2ac>)
 8001438:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800143a:	4b46      	ldr	r3, [pc, #280]	@ (8001554 <HAL_ADC_MspInit+0x2ac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d10b      	bne.n	800145a <HAL_ADC_MspInit+0x1b2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001442:	4b41      	ldr	r3, [pc, #260]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	4a40      	ldr	r2, [pc, #256]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144e:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b3b      	ldr	r3, [pc, #236]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	4a3a      	ldr	r2, [pc, #232]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001466:	4b38      	ldr	r3, [pc, #224]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001472:	2302      	movs	r3, #2
 8001474:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001476:	2303      	movs	r3, #3
 8001478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001486:	4619      	mov	r1, r3
 8001488:	4833      	ldr	r0, [pc, #204]	@ (8001558 <HAL_ADC_MspInit+0x2b0>)
 800148a:	f002 fdc3 	bl	8004014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	202f      	movs	r0, #47	@ 0x2f
 8001494:	f002 faed 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001498:	202f      	movs	r0, #47	@ 0x2f
 800149a:	f002 fb04 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 800149e:	e04c      	b.n	800153a <HAL_ADC_MspInit+0x292>
  else if(hadc->Instance==ADC4)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2d      	ldr	r2, [pc, #180]	@ (800155c <HAL_ADC_MspInit+0x2b4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d147      	bne.n	800153a <HAL_ADC_MspInit+0x292>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014b4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 ff1c 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_ADC_MspInit+0x222>
      Error_Handler();
 80014c6:	f7ff fd19 	bl	8000efc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <HAL_ADC_MspInit+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a20      	ldr	r2, [pc, #128]	@ (8001554 <HAL_ADC_MspInit+0x2ac>)
 80014d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_ADC_MspInit+0x2ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d10b      	bne.n	80014f4 <HAL_ADC_MspInit+0x24c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e0:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80014e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	4a13      	ldr	r2, [pc, #76]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_ADC_MspInit+0x2a0>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800150c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001510:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <HAL_ADC_MspInit+0x2b0>)
 8001526:	f002 fd75 	bl	8004014 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	203d      	movs	r0, #61	@ 0x3d
 8001530:	f002 fa9f 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8001534:	203d      	movs	r0, #61	@ 0x3d
 8001536:	f002 fab6 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3790      	adds	r7, #144	@ 0x90
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000864 	.word	0x20000864
 8001548:	40021000 	.word	0x40021000
 800154c:	50000100 	.word	0x50000100
 8001550:	50000400 	.word	0x50000400
 8001554:	20000868 	.word	0x20000868
 8001558:	48000400 	.word	0x48000400
 800155c:	50000500 	.word	0x50000500

08001560 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a15      	ldr	r2, [pc, #84]	@ (80015d4 <HAL_DAC_MspInit+0x74>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d124      	bne.n	80015cc <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_DAC_MspInit+0x78>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <HAL_DAC_MspInit+0x78>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_DAC_MspInit+0x78>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_DAC_MspInit+0x78>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_DAC_MspInit+0x78>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_DAC_MspInit+0x78>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b2:	2310      	movs	r3, #16
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c8:	f002 fd24 	bl	8004014 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	@ 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	50000800 	.word	0x50000800
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015ec:	d113      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_TIM_Base_MspInit+0x44>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	201c      	movs	r0, #28
 800160c:	f002 fa31 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001610:	201c      	movs	r0, #28
 8001612:	f002 fa48 	bl	8003aa6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b0a0      	sub	sp, #128	@ 0x80
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163c:	f107 0318 	add.w	r3, r7, #24
 8001640:	2254      	movs	r2, #84	@ 0x54
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f006 fb05 	bl	8007c54 <memset>
  if(huart->Instance==UART5)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a31      	ldr	r2, [pc, #196]	@ (8001714 <HAL_UART_MspInit+0xf0>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d15a      	bne.n	800170a <HAL_UART_MspInit+0xe6>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001654:	2310      	movs	r3, #16
 8001656:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fe49 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800166c:	f7ff fc46 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001670:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001674:	4a28      	ldr	r2, [pc, #160]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 8001676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800167a:	6593      	str	r3, [r2, #88]	@ 0x58
 800167c:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	4a22      	ldr	r2, [pc, #136]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <HAL_UART_MspInit+0xf4>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80016ca:	2305      	movs	r3, #5
 80016cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ce:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016d2:	4619      	mov	r1, r3
 80016d4:	4811      	ldr	r0, [pc, #68]	@ (800171c <HAL_UART_MspInit+0xf8>)
 80016d6:	f002 fc9d 	bl	8004014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016da:	2304      	movs	r3, #4
 80016dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80016ea:	2305      	movs	r3, #5
 80016ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016f2:	4619      	mov	r1, r3
 80016f4:	480a      	ldr	r0, [pc, #40]	@ (8001720 <HAL_UART_MspInit+0xfc>)
 80016f6:	f002 fc8d 	bl	8004014 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2035      	movs	r0, #53	@ 0x35
 8001700:	f002 f9b7 	bl	8003a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001704:	2035      	movs	r0, #53	@ 0x35
 8001706:	f002 f9ce 	bl	8003aa6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 800170a:	bf00      	nop
 800170c:	3780      	adds	r7, #128	@ 0x80
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005000 	.word	0x40005000
 8001718:	40021000 	.word	0x40021000
 800171c:	48000800 	.word	0x48000800
 8001720:	48000c00 	.word	0x48000c00

08001724 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b098      	sub	sp, #96	@ 0x60
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2254      	movs	r2, #84	@ 0x54
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f006 fa8d 	bl	8007c54 <memset>
  if(hpcd->Instance==USB)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <HAL_PCD_MspInit+0x60>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d11a      	bne.n	800177a <HAL_PCD_MspInit+0x56>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001748:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800174a:	2300      	movs	r3, #0
 800174c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fdd0 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800175e:	f7ff fbcd 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_PCD_MspInit+0x64>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	4a08      	ldr	r2, [pc, #32]	@ (8001788 <HAL_PCD_MspInit+0x64>)
 8001768:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800176c:	6593      	str	r3, [r2, #88]	@ 0x58
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_PCD_MspInit+0x64>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800177a:	bf00      	nop
 800177c:	3760      	adds	r7, #96	@ 0x60
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40005c00 	.word	0x40005c00
 8001788:	40021000 	.word	0x40021000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <NMI_Handler+0x4>

08001794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <MemManage_Handler+0x4>

080017a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f000 fa57 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <ADC1_2_IRQHandler+0x14>)
 80017f2:	f000 ff8b 	bl	800270c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017f6:	4803      	ldr	r0, [pc, #12]	@ (8001804 <ADC1_2_IRQHandler+0x18>)
 80017f8:	f000 ff88 	bl	800270c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000008c 	.word	0x2000008c
 8001804:	20000124 	.word	0x20000124

08001808 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <TIM2_IRQHandler+0x10>)
 800180e:	f004 f825 	bl	800585c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000300 	.word	0x20000300

0800181c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <ADC3_IRQHandler+0x10>)
 8001822:	f000 ff73 	bl	800270c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001bc 	.word	0x200001bc

08001830 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <UART5_IRQHandler+0x10>)
 8001836:	f004 fe01 	bl	800643c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200003cc 	.word	0x200003cc

08001844 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <ADC4_IRQHandler+0x10>)
 800184a:	f000 ff5f 	bl	800270c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000254 	.word	0x20000254

08001858 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e00a      	b.n	8001880 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800186a:	f000 f8cf 	bl	8001a0c <__io_getchar>
 800186e:	4601      	mov	r1, r0
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	b2ca      	uxtb	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3301      	adds	r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbf0      	blt.n	800186a <_read+0x12>
  }

  return len;
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e009      	b.n	80018b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60ba      	str	r2, [r7, #8]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f889 	bl	80019c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf1      	blt.n	80018a4 <_write+0x12>
  }
  return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_close>:

int _close(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f2:	605a      	str	r2, [r3, #4]
  return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_isatty>:

int _isatty(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	@ (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	@ (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f006 f9c4 	bl	8007cf0 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	@ (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20020000 	.word	0x20020000
 8001994:	00000400 	.word	0x00000400
 8001998:	2000086c 	.word	0x2000086c
 800199c:	20000a48 	.word	0x20000a48

080019a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__io_putchar>:
#include "terminal.h"


int __io_putchar(int c) {
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
    if (c == '\n'){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b0a      	cmp	r3, #10
 80019d0:	d109      	bne.n	80019e6 <__io_putchar+0x22>
        while(!(UART5->ISR & USART_ISR_TXE));
 80019d2:	bf00      	nop
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <__io_putchar+0x44>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f9      	beq.n	80019d4 <__io_putchar+0x10>
        UART5->TDR = '\r';
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <__io_putchar+0x44>)
 80019e2:	220d      	movs	r2, #13
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    while(!(UART5->ISR & USART_ISR_TXE));
 80019e6:	bf00      	nop
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <__io_putchar+0x44>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f9      	beq.n	80019e8 <__io_putchar+0x24>
    UART5->TDR = c;
 80019f4:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <__io_putchar+0x44>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6293      	str	r3, [r2, #40]	@ 0x28
    return c;
 80019fa:	687b      	ldr	r3, [r7, #4]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40005000 	.word	0x40005000

08001a0c <__io_getchar>:

int __io_getchar(void) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
    int c = line_buffer_getchar();
 8001a12:	f000 f88f 	bl	8001b34 <line_buffer_getchar>
 8001a16:	6078      	str	r0, [r7, #4]
    return c;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <putstr>:
int line_mode = 1;       // should we wait for a newline?

//=======================================================================
// Simply write a string one char at a time.
//=======================================================================
static void putstr(const char *s) {
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
    while(*s)
 8001a2a:	e006      	b.n	8001a3a <putstr+0x18>
        __io_putchar(*s++);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ffc5 	bl	80019c4 <__io_putchar>
    while(*s)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f4      	bne.n	8001a2c <putstr+0xa>
}
 8001a42:	bf00      	nop
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <insert_echo_char>:
//=======================================================================
// Insert a character and echo it.
// (or, if it's a backspace, remove a char and erase it from the line).
// If echo_mode is turned off, just insert the character and get out.
//=======================================================================
void insert_echo_char(char ch) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
    if (ch == '\r')
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b0d      	cmp	r3, #13
 8001a5a:	d101      	bne.n	8001a60 <insert_echo_char+0x14>
        ch = '\n';
 8001a5c:	230a      	movs	r3, #10
 8001a5e:	71fb      	strb	r3, [r7, #7]
    if (!echo_mode) {
 8001a60:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <insert_echo_char+0xd0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <insert_echo_char+0x28>
        fifo_insert(&input_fifo, ch);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	482c      	ldr	r0, [pc, #176]	@ (8001b20 <insert_echo_char+0xd4>)
 8001a6e:	f7fe fd9d 	bl	80005ac <fifo_insert>
        return;
 8001a72:	e04f      	b.n	8001b14 <insert_echo_char+0xc8>
    }
    if (ch == '\b' || ch == '\177') {
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d002      	beq.n	8001a80 <insert_echo_char+0x34>
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a7e:	d11d      	bne.n	8001abc <insert_echo_char+0x70>
        if (!fifo_empty(&input_fifo)) {
 8001a80:	4827      	ldr	r0, [pc, #156]	@ (8001b20 <insert_echo_char+0xd4>)
 8001a82:	f7fe fd5f 	bl	8000544 <fifo_empty>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d142      	bne.n	8001b12 <insert_echo_char+0xc6>
            char tmp = fifo_uninsert(&input_fifo);
 8001a8c:	4824      	ldr	r0, [pc, #144]	@ (8001b20 <insert_echo_char+0xd4>)
 8001a8e:	f7fe fdcc 	bl	800062a <fifo_uninsert>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73fb      	strb	r3, [r7, #15]
            if (tmp == '\n')
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	2b0a      	cmp	r3, #10
 8001a9a:	d104      	bne.n	8001aa6 <insert_echo_char+0x5a>
                fifo_insert(&input_fifo, '\n');
 8001a9c:	210a      	movs	r1, #10
 8001a9e:	4820      	ldr	r0, [pc, #128]	@ (8001b20 <insert_echo_char+0xd4>)
 8001aa0:	f7fe fd84 	bl	80005ac <fifo_insert>
            else if (tmp < 32)
                putstr("\b\b  \b\b");
            else
                putstr("\b \b");
        }
        return; // Don't put a backspace into buffer.
 8001aa4:	e035      	b.n	8001b12 <insert_echo_char+0xc6>
            else if (tmp < 32)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b1f      	cmp	r3, #31
 8001aaa:	d803      	bhi.n	8001ab4 <insert_echo_char+0x68>
                putstr("\b\b  \b\b");
 8001aac:	481d      	ldr	r0, [pc, #116]	@ (8001b24 <insert_echo_char+0xd8>)
 8001aae:	f7ff ffb8 	bl	8001a22 <putstr>
        return; // Don't put a backspace into buffer.
 8001ab2:	e02e      	b.n	8001b12 <insert_echo_char+0xc6>
                putstr("\b \b");
 8001ab4:	481c      	ldr	r0, [pc, #112]	@ (8001b28 <insert_echo_char+0xdc>)
 8001ab6:	f7ff ffb4 	bl	8001a22 <putstr>
        return; // Don't put a backspace into buffer.
 8001aba:	e02a      	b.n	8001b12 <insert_echo_char+0xc6>
    } else if (ch == '\n') {
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2b0a      	cmp	r3, #10
 8001ac0:	d103      	bne.n	8001aca <insert_echo_char+0x7e>
        __io_putchar('\n');
 8001ac2:	200a      	movs	r0, #10
 8001ac4:	f7ff ff7e 	bl	80019c4 <__io_putchar>
 8001ac8:	e01d      	b.n	8001b06 <insert_echo_char+0xba>
    } else if (ch == 0){
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <insert_echo_char+0x8c>
        putstr("^0");
 8001ad0:	4816      	ldr	r0, [pc, #88]	@ (8001b2c <insert_echo_char+0xe0>)
 8001ad2:	f7ff ffa6 	bl	8001a22 <putstr>
 8001ad6:	e016      	b.n	8001b06 <insert_echo_char+0xba>
    } else if (ch == 28) {
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b1c      	cmp	r3, #28
 8001adc:	d103      	bne.n	8001ae6 <insert_echo_char+0x9a>
        putstr("^\\");
 8001ade:	4814      	ldr	r0, [pc, #80]	@ (8001b30 <insert_echo_char+0xe4>)
 8001ae0:	f7ff ff9f 	bl	8001a22 <putstr>
 8001ae4:	e00f      	b.n	8001b06 <insert_echo_char+0xba>
    } else if (ch < 32) {
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b1f      	cmp	r3, #31
 8001aea:	d808      	bhi.n	8001afe <insert_echo_char+0xb2>
        __io_putchar('^');
 8001aec:	205e      	movs	r0, #94	@ 0x5e
 8001aee:	f7ff ff69 	bl	80019c4 <__io_putchar>
        __io_putchar('A'-1+ch);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	3340      	adds	r3, #64	@ 0x40
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff64 	bl	80019c4 <__io_putchar>
 8001afc:	e003      	b.n	8001b06 <insert_echo_char+0xba>
    } else {
        __io_putchar(ch);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5f 	bl	80019c4 <__io_putchar>
    }
    fifo_insert(&input_fifo, ch);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <insert_echo_char+0xd4>)
 8001b0c:	f7fe fd4e 	bl	80005ac <fifo_insert>
 8001b10:	e000      	b.n	8001b14 <insert_echo_char+0xc8>
        return; // Don't put a backspace into buffer.
 8001b12:	bf00      	nop
}
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	20000870 	.word	0x20000870
 8001b24:	08008358 	.word	0x08008358
 8001b28:	08008360 	.word	0x08008360
 8001b2c:	08008364 	.word	0x08008364
 8001b30:	08008368 	.word	0x08008368

08001b34 <line_buffer_getchar>:


int line_buffer_getchar(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
    USART_TypeDef *u = UART5;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <line_buffer_getchar+0x60>)
 8001b3c:	607b      	str	r3, [r7, #4]
    // If we missed reading some characters, clear the overrun flag.
    if (u->ISR & USART_ISR_ORE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d013      	beq.n	8001b72 <line_buffer_getchar+0x3e>
        u->ICR |= USART_ICR_ORECF;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	f043 0208 	orr.w	r2, r3, #8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	621a      	str	r2, [r3, #32]
    // Wait for a newline to complete the buffer.
    while(fifo_newline(&input_fifo) == 0) {
 8001b56:	e00c      	b.n	8001b72 <line_buffer_getchar+0x3e>
        while (!(u->ISR & USART_ISR_RXNE))
 8001b58:	bf00      	nop
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f9      	beq.n	8001b5a <line_buffer_getchar+0x26>
            ;
        insert_echo_char(u->RDR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff6d 	bl	8001a4c <insert_echo_char>
    while(fifo_newline(&input_fifo) == 0) {
 8001b72:	4809      	ldr	r0, [pc, #36]	@ (8001b98 <line_buffer_getchar+0x64>)
 8001b74:	f7fe fd9c 	bl	80006b0 <fifo_newline>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0ec      	beq.n	8001b58 <line_buffer_getchar+0x24>
    }
    // Return a character from the line buffer.
    char ch = fifo_remove(&input_fifo);
 8001b7e:	4806      	ldr	r0, [pc, #24]	@ (8001b98 <line_buffer_getchar+0x64>)
 8001b80:	f7fe fdb3 	bl	80006ea <fifo_remove>
 8001b84:	4603      	mov	r3, r0
 8001b86:	70fb      	strb	r3, [r7, #3]
    return ch;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40005000 	.word	0x40005000
 8001b98:	20000870 	.word	0x20000870

08001b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba0:	f7ff fefe 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001be8 <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f006 f897 	bl	8007cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7fe fdcb 	bl	8000768 <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   r0, =_estack
 8001bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001be0:	080083c0 	.word	0x080083c0
  ldr r2, =_sbss
 8001be4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001be8:	20000a44 	.word	0x20000a44

08001bec <ADC5_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC5_IRQHandler>

08001bee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f001 ff2f 	bl	8003a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfe:	200f      	movs	r0, #15
 8001c00:	f000 f80e 	bl	8001c20 <HAL_InitTick>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	e001      	b.n	8001c14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c10:	f7ff fb26 	bl	8001260 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c14:	79fb      	ldrb	r3, [r7, #7]

}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c2c:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <HAL_InitTick+0x68>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d022      	beq.n	8001c7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_InitTick+0x6c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_InitTick+0x68>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 ff3a 	bl	8003ac2 <HAL_SYSTICK_Config>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10f      	bne.n	8001c74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	d809      	bhi.n	8001c6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c62:	f001 ff06 	bl	8003a72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <HAL_InitTick+0x70>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e007      	b.n	8001c7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e004      	b.n	8001c7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000010 	.word	0x20000010
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_IncTick+0x1c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_IncTick+0x20>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a03      	ldr	r2, [pc, #12]	@ (8001cb0 <HAL_IncTick+0x1c>)
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	200008f4 	.word	0x200008f4
 8001cb4:	20000010 	.word	0x20000010

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	200008f4 	.word	0x200008f4

08001cd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3360      	adds	r3, #96	@ 0x60
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <LL_ADC_SetOffset+0x44>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	03fff000 	.word	0x03fff000

08001d80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3360      	adds	r3, #96	@ 0x60
 8001d8e:	461a      	mov	r2, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3360      	adds	r3, #96	@ 0x60
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b087      	sub	sp, #28
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3360      	adds	r3, #96	@ 0x60
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3360      	adds	r3, #96	@ 0x60
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e42:	bf00      	nop
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	615a      	str	r2, [r3, #20]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b087      	sub	sp, #28
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3330      	adds	r3, #48	@ 0x30
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	4413      	add	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	211f      	movs	r1, #31
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 011f 	and.w	r1, r3, #31
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3314      	adds	r3, #20
 8001f28:	461a      	mov	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	0e5b      	lsrs	r3, r3, #25
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	4413      	add	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	0d1b      	lsrs	r3, r3, #20
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2107      	movs	r1, #7
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0d1b      	lsrs	r3, r3, #20
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0318 	and.w	r3, r3, #24
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f94:	40d9      	lsrs	r1, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	400b      	ands	r3, r1
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	0007ffff 	.word	0x0007ffff

08001fb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6093      	str	r3, [r2, #8]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002028:	d101      	bne.n	800202e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800204c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002050:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002078:	d101      	bne.n	800207e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800209c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020a0:	f043 0201 	orr.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <LL_ADC_IsEnabled+0x18>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <LL_ADC_IsEnabled+0x1a>
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020ee:	f043 0204 	orr.w	r2, r3, #4
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d101      	bne.n	800211a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b08      	cmp	r3, #8
 800213a:	d101      	bne.n	8002140 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1e4      	b.n	8002534 <HAL_ADC_Init+0x3e4>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d133      	bne.n	80021e0 <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a68      	ldr	r2, [pc, #416]	@ (800231c <HAL_ADC_Init+0x1cc>)
 800217c:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a67      	ldr	r2, [pc, #412]	@ (8002320 <HAL_ADC_Init+0x1d0>)
 8002182:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a67      	ldr	r2, [pc, #412]	@ (8002324 <HAL_ADC_Init+0x1d4>)
 8002188:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a66      	ldr	r2, [pc, #408]	@ (8002328 <HAL_ADC_Init+0x1d8>)
 800218e:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a66      	ldr	r2, [pc, #408]	@ (800232c <HAL_ADC_Init+0x1dc>)
 8002194:	67da      	str	r2, [r3, #124]	@ 0x7c
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a65      	ldr	r2, [pc, #404]	@ (8002330 <HAL_ADC_Init+0x1e0>)
 800219a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a64      	ldr	r2, [pc, #400]	@ (8002334 <HAL_ADC_Init+0x1e4>)
 80021a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a63      	ldr	r2, [pc, #396]	@ (8002338 <HAL_ADC_Init+0x1e8>)
 80021aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a62      	ldr	r2, [pc, #392]	@ (800233c <HAL_ADC_Init+0x1ec>)
 80021b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    if (hadc->MspInitCallback == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002340 <HAL_ADC_Init+0x1f0>)
 80021c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff15 	bl	8002014 <LL_ADC_IsDeepPowerDownEnabled>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fefb 	bl	8001ff0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff30 	bl	8002064 <LL_ADC_IsInternalRegulatorEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff14 	bl	800203c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002214:	4b4b      	ldr	r3, [pc, #300]	@ (8002344 <HAL_ADC_Init+0x1f4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	4a4b      	ldr	r2, [pc, #300]	@ (8002348 <HAL_ADC_Init+0x1f8>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	3301      	adds	r3, #1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002228:	e002      	b.n	8002230 <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3b01      	subs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff12 	bl	8002064 <LL_ADC_IsInternalRegulatorEnabled>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff4b 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 800226c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 8153 	bne.w	8002522 <HAL_ADC_Init+0x3d2>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 814f 	bne.w	8002522 <HAL_ADC_Init+0x3d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002288:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800228c:	f043 0202 	orr.w	r2, r3, #2
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff0b 	bl	80020b4 <LL_ADC_IsEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d164      	bne.n	800236e <HAL_ADC_Init+0x21e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_Init+0x168>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a26      	ldr	r2, [pc, #152]	@ (800234c <HAL_ADC_Init+0x1fc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10f      	bne.n	80022d8 <HAL_ADC_Init+0x188>
 80022b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022bc:	f7ff fefa 	bl	80020b4 <LL_ADC_IsEnabled>
 80022c0:	4604      	mov	r4, r0
 80022c2:	4822      	ldr	r0, [pc, #136]	@ (800234c <HAL_ADC_Init+0x1fc>)
 80022c4:	f7ff fef6 	bl	80020b4 <LL_ADC_IsEnabled>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4323      	orrs	r3, r4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e012      	b.n	80022fe <HAL_ADC_Init+0x1ae>
 80022d8:	481d      	ldr	r0, [pc, #116]	@ (8002350 <HAL_ADC_Init+0x200>)
 80022da:	f7ff feeb 	bl	80020b4 <LL_ADC_IsEnabled>
 80022de:	4604      	mov	r4, r0
 80022e0:	481c      	ldr	r0, [pc, #112]	@ (8002354 <HAL_ADC_Init+0x204>)
 80022e2:	f7ff fee7 	bl	80020b4 <LL_ADC_IsEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	431c      	orrs	r4, r3
 80022ea:	481b      	ldr	r0, [pc, #108]	@ (8002358 <HAL_ADC_Init+0x208>)
 80022ec:	f7ff fee2 	bl	80020b4 <LL_ADC_IsEnabled>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4323      	orrs	r3, r4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d035      	beq.n	800236e <HAL_ADC_Init+0x21e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800230a:	d004      	beq.n	8002316 <HAL_ADC_Init+0x1c6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_ADC_Init+0x1fc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d124      	bne.n	8002360 <HAL_ADC_Init+0x210>
 8002316:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_ADC_Init+0x20c>)
 8002318:	e023      	b.n	8002362 <HAL_ADC_Init+0x212>
 800231a:	bf00      	nop
 800231c:	08002be1 	.word	0x08002be1
 8002320:	08002bf5 	.word	0x08002bf5
 8002324:	08002c09 	.word	0x08002c09
 8002328:	08002c1d 	.word	0x08002c1d
 800232c:	08003629 	.word	0x08003629
 8002330:	0800363d 	.word	0x0800363d
 8002334:	08003651 	.word	0x08003651
 8002338:	08003665 	.word	0x08003665
 800233c:	08003679 	.word	0x08003679
 8002340:	080012a9 	.word	0x080012a9
 8002344:	20000004 	.word	0x20000004
 8002348:	053e2d63 	.word	0x053e2d63
 800234c:	50000100 	.word	0x50000100
 8002350:	50000400 	.word	0x50000400
 8002354:	50000500 	.word	0x50000500
 8002358:	50000600 	.word	0x50000600
 800235c:	50000300 	.word	0x50000300
 8002360:	4a76      	ldr	r2, [pc, #472]	@ (800253c <HAL_ADC_Init+0x3ec>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff fcb1 	bl	8001cd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7f5b      	ldrb	r3, [r3, #29]
 8002372:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002378:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800237e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002384:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800238c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_ADC_Init+0x25a>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	3b01      	subs	r3, #1
 80023a2:	045b      	lsls	r3, r3, #17
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_ADC_Init+0x276>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002540 <HAL_ADC_Init+0x3f0>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	69b9      	ldr	r1, [r7, #24]
 80023d6:	430b      	orrs	r3, r1
 80023d8:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe97 	bl	8002128 <LL_ADC_INJ_IsConversionOngoing>
 80023fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d16d      	bne.n	80024de <HAL_ADC_Init+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d16a      	bne.n	80024de <HAL_ADC_Init+0x38e>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800240c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002414:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002424:	f023 0302 	bic.w	r3, r3, #2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	69b9      	ldr	r1, [r7, #24]
 800242e:	430b      	orrs	r3, r1
 8002430:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d017      	beq.n	800246a <HAL_ADC_Init+0x31a>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002448:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002452:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002456:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6911      	ldr	r1, [r2, #16]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	430b      	orrs	r3, r1
 8002464:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002468:	e013      	b.n	8002492 <HAL_ADC_Init+0x342>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002478:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800248a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800248e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002498:	2b01      	cmp	r3, #1
 800249a:	d118      	bne.n	80024ce <HAL_ADC_Init+0x37e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80024a6:	f023 0304 	bic.w	r3, r3, #4
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024b8:	4311      	orrs	r1, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024be:	430a      	orrs	r2, r1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	611a      	str	r2, [r3, #16]
 80024cc:	e007      	b.n	80024de <HAL_ADC_Init+0x38e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10c      	bne.n	8002500 <HAL_ADC_Init+0x3b0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	f023 010f 	bic.w	r1, r3, #15
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	1e5a      	subs	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80024fe:	e007      	b.n	8002510 <HAL_ADC_Init+0x3c0>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 020f 	bic.w	r2, r2, #15
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	f023 0303 	bic.w	r3, r3, #3
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002520:	e007      	b.n	8002532 <HAL_ADC_Init+0x3e2>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	f043 0210 	orr.w	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002532:	7ffb      	ldrb	r3, [r7, #31]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3724      	adds	r7, #36	@ 0x24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	50000700 	.word	0x50000700
 8002540:	fff04007 	.word	0xfff04007

08002544 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002554:	d004      	beq.n	8002560 <HAL_ADC_Start+0x1c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a67      	ldr	r2, [pc, #412]	@ (80026f8 <HAL_ADC_Start+0x1b4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_ADC_Start+0x20>
 8002560:	4b66      	ldr	r3, [pc, #408]	@ (80026fc <HAL_ADC_Start+0x1b8>)
 8002562:	e000      	b.n	8002566 <HAL_ADC_Start+0x22>
 8002564:	4b66      	ldr	r3, [pc, #408]	@ (8002700 <HAL_ADC_Start+0x1bc>)
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fd26 	bl	8001fb8 <LL_ADC_GetMultimode>
 800256c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fdc5 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 80b4 	bne.w	80026e8 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_ADC_Start+0x4a>
 800258a:	2302      	movs	r3, #2
 800258c:	e0af      	b.n	80026ee <HAL_ADC_Start+0x1aa>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 ff8a 	bl	80034b0 <ADC_Enable>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 809b 	bne.w	80026de <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a4d      	ldr	r2, [pc, #308]	@ (80026f8 <HAL_ADC_Start+0x1b4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_ADC_Start+0x96>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002704 <HAL_ADC_Start+0x1c0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d002      	beq.n	80025d6 <HAL_ADC_Start+0x92>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	e003      	b.n	80025de <HAL_ADC_Start+0x9a>
 80025d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <HAL_ADC_Start+0x1c4>)
 80025d8:	e001      	b.n	80025de <HAL_ADC_Start+0x9a>
 80025da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d002      	beq.n	80025ec <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d105      	bne.n	80025f8 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002604:	d106      	bne.n	8002614 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	f023 0206 	bic.w	r2, r3, #6
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	661a      	str	r2, [r3, #96]	@ 0x60
 8002612:	e002      	b.n	800261a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	221c      	movs	r2, #28
 8002620:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a32      	ldr	r2, [pc, #200]	@ (80026f8 <HAL_ADC_Start+0x1b4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_ADC_Start+0x104>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a32      	ldr	r2, [pc, #200]	@ (8002704 <HAL_ADC_Start+0x1c0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d002      	beq.n	8002644 <HAL_ADC_Start+0x100>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	e003      	b.n	800264c <HAL_ADC_Start+0x108>
 8002644:	4b30      	ldr	r3, [pc, #192]	@ (8002708 <HAL_ADC_Start+0x1c4>)
 8002646:	e001      	b.n	800264c <HAL_ADC_Start+0x108>
 8002648:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	4293      	cmp	r3, r2
 8002652:	d008      	beq.n	8002666 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d002      	beq.n	8002666 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b09      	cmp	r3, #9
 8002664:	d114      	bne.n	8002690 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800267c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fd26 	bl	80020da <LL_ADC_REG_StartConversion>
 800268e:	e02d      	b.n	80026ec <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a15      	ldr	r2, [pc, #84]	@ (80026f8 <HAL_ADC_Start+0x1b4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_ADC_Start+0x176>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a16      	ldr	r2, [pc, #88]	@ (8002704 <HAL_ADC_Start+0x1c0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d002      	beq.n	80026b6 <HAL_ADC_Start+0x172>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	e003      	b.n	80026be <HAL_ADC_Start+0x17a>
 80026b6:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <HAL_ADC_Start+0x1c4>)
 80026b8:	e001      	b.n	80026be <HAL_ADC_Start+0x17a>
 80026ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026be:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00f      	beq.n	80026ec <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026dc:	e006      	b.n	80026ec <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80026e6:	e001      	b.n	80026ec <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
 80026ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	50000100 	.word	0x50000100
 80026fc:	50000300 	.word	0x50000300
 8002700:	50000700 	.word	0x50000700
 8002704:	50000500 	.word	0x50000500
 8002708:	50000400 	.word	0x50000400

0800270c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	@ 0x28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002730:	d004      	beq.n	800273c <HAL_ADC_IRQHandler+0x30>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a8f      	ldr	r2, [pc, #572]	@ (8002974 <HAL_ADC_IRQHandler+0x268>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_ADC_IRQHandler+0x34>
 800273c:	4b8e      	ldr	r3, [pc, #568]	@ (8002978 <HAL_ADC_IRQHandler+0x26c>)
 800273e:	e000      	b.n	8002742 <HAL_ADC_IRQHandler+0x36>
 8002740:	4b8e      	ldr	r3, [pc, #568]	@ (800297c <HAL_ADC_IRQHandler+0x270>)
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fc38 	bl	8001fb8 <LL_ADC_GetMultimode>
 8002748:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d019      	beq.n	8002788 <HAL_ADC_IRQHandler+0x7c>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d014      	beq.n	8002788 <HAL_ADC_IRQHandler+0x7c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2202      	movs	r2, #2
 8002786:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_ADC_IRQHandler+0x90>
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_ADC_IRQHandler+0xa8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8095 	beq.w	80028d2 <HAL_ADC_IRQHandler+0x1c6>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 808f 	beq.w	80028d2 <HAL_ADC_IRQHandler+0x1c6>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_ADC_IRQHandler+0xc0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fb4f 	bl	8001e74 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d072      	beq.n	80028c2 <HAL_ADC_IRQHandler+0x1b6>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a64      	ldr	r2, [pc, #400]	@ (8002974 <HAL_ADC_IRQHandler+0x268>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_ADC_IRQHandler+0xee>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a65      	ldr	r2, [pc, #404]	@ (8002980 <HAL_ADC_IRQHandler+0x274>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d002      	beq.n	80027f6 <HAL_ADC_IRQHandler+0xea>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	e003      	b.n	80027fe <HAL_ADC_IRQHandler+0xf2>
 80027f6:	4b63      	ldr	r3, [pc, #396]	@ (8002984 <HAL_ADC_IRQHandler+0x278>)
 80027f8:	e001      	b.n	80027fe <HAL_ADC_IRQHandler+0xf2>
 80027fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4293      	cmp	r3, r2
 8002804:	d008      	beq.n	8002818 <HAL_ADC_IRQHandler+0x10c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_ADC_IRQHandler+0x10c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d002      	beq.n	8002818 <HAL_ADC_IRQHandler+0x10c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b09      	cmp	r3, #9
 8002816:	d104      	bne.n	8002822 <HAL_ADC_IRQHandler+0x116>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	e014      	b.n	800284c <HAL_ADC_IRQHandler+0x140>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	@ (8002974 <HAL_ADC_IRQHandler+0x268>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_ADC_IRQHandler+0x134>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a53      	ldr	r2, [pc, #332]	@ (8002980 <HAL_ADC_IRQHandler+0x274>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d002      	beq.n	800283c <HAL_ADC_IRQHandler+0x130>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	e003      	b.n	8002844 <HAL_ADC_IRQHandler+0x138>
 800283c:	4b51      	ldr	r3, [pc, #324]	@ (8002984 <HAL_ADC_IRQHandler+0x278>)
 800283e:	e001      	b.n	8002844 <HAL_ADC_IRQHandler+0x138>
 8002840:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002844:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d135      	bne.n	80028c2 <HAL_ADC_IRQHandler+0x1b6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b08      	cmp	r3, #8
 8002862:	d12e      	bne.n	80028c2 <HAL_ADC_IRQHandler+0x1b6>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fc4a 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11a      	bne.n	80028aa <HAL_ADC_IRQHandler+0x19e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020c 	bic.w	r2, r2, #12
 8002882:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002894:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d112      	bne.n	80028c2 <HAL_ADC_IRQHandler+0x1b6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028a8:	e00b      	b.n	80028c2 <HAL_ADC_IRQHandler+0x1b6>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	f043 0210 	orr.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	220c      	movs	r2, #12
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <HAL_ADC_IRQHandler+0x1da>
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_ADC_IRQHandler+0x1f2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80b3 	beq.w	8002a58 <HAL_ADC_IRQHandler+0x34c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80ad 	beq.w	8002a58 <HAL_ADC_IRQHandler+0x34c>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_ADC_IRQHandler+0x20a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fae9 	bl	8001ef2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002920:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff faa4 	bl	8001e74 <LL_ADC_REG_IsTriggerSourceSWStart>
 800292c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a10      	ldr	r2, [pc, #64]	@ (8002974 <HAL_ADC_IRQHandler+0x268>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d009      	beq.n	800294c <HAL_ADC_IRQHandler+0x240>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a10      	ldr	r2, [pc, #64]	@ (8002980 <HAL_ADC_IRQHandler+0x274>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d002      	beq.n	8002948 <HAL_ADC_IRQHandler+0x23c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e003      	b.n	8002950 <HAL_ADC_IRQHandler+0x244>
 8002948:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_ADC_IRQHandler+0x278>)
 800294a:	e001      	b.n	8002950 <HAL_ADC_IRQHandler+0x244>
 800294c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	4293      	cmp	r3, r2
 8002956:	d008      	beq.n	800296a <HAL_ADC_IRQHandler+0x25e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_ADC_IRQHandler+0x25e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b06      	cmp	r3, #6
 8002962:	d002      	beq.n	800296a <HAL_ADC_IRQHandler+0x25e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b07      	cmp	r3, #7
 8002968:	d10e      	bne.n	8002988 <HAL_ADC_IRQHandler+0x27c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	623b      	str	r3, [r7, #32]
 8002972:	e01e      	b.n	80029b2 <HAL_ADC_IRQHandler+0x2a6>
 8002974:	50000100 	.word	0x50000100
 8002978:	50000300 	.word	0x50000300
 800297c:	50000700 	.word	0x50000700
 8002980:	50000500 	.word	0x50000500
 8002984:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a8f      	ldr	r2, [pc, #572]	@ (8002bcc <HAL_ADC_IRQHandler+0x4c0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_ADC_IRQHandler+0x29a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a8e      	ldr	r2, [pc, #568]	@ (8002bd0 <HAL_ADC_IRQHandler+0x4c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d002      	beq.n	80029a2 <HAL_ADC_IRQHandler+0x296>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	e003      	b.n	80029aa <HAL_ADC_IRQHandler+0x29e>
 80029a2:	4b8c      	ldr	r3, [pc, #560]	@ (8002bd4 <HAL_ADC_IRQHandler+0x4c8>)
 80029a4:	e001      	b.n	80029aa <HAL_ADC_IRQHandler+0x29e>
 80029a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029aa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d047      	beq.n	8002a48 <HAL_ADC_IRQHandler+0x33c>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_ADC_IRQHandler+0x2c6>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d03f      	beq.n	8002a48 <HAL_ADC_IRQHandler+0x33c>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d13a      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x33c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029dc:	2b40      	cmp	r3, #64	@ 0x40
 80029de:	d133      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x33c>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d12e      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x33c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fb9a 	bl	8002128 <LL_ADC_INJ_IsConversionOngoing>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d11a      	bne.n	8002a30 <HAL_ADC_IRQHandler+0x324>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a08:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d112      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x33c>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a2e:	e00b      	b.n	8002a48 <HAL_ADC_IRQHandler+0x33c>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	f043 0210 	orr.w	r2, r3, #16
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	661a      	str	r2, [r3, #96]	@ 0x60
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2260      	movs	r2, #96	@ 0x60
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_ADC_IRQHandler+0x37c>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <HAL_ADC_IRQHandler+0x37c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2280      	movs	r2, #128	@ 0x80
 8002a86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d014      	beq.n	8002abc <HAL_ADC_IRQHandler+0x3b0>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00f      	beq.n	8002abc <HAL_ADC_IRQHandler+0x3b0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d014      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x3e4>
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00f      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x3e4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d044      	beq.n	8002b84 <HAL_ADC_IRQHandler+0x478>
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d03f      	beq.n	8002b84 <HAL_ADC_IRQHandler+0x478>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <HAL_ADC_IRQHandler+0x406>
    {
      overrun_error = 1UL;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b10:	e021      	b.n	8002b56 <HAL_ADC_IRQHandler+0x44a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x438>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b20:	d004      	beq.n	8002b2c <HAL_ADC_IRQHandler+0x420>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a29      	ldr	r2, [pc, #164]	@ (8002bcc <HAL_ADC_IRQHandler+0x4c0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x424>
 8002b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <HAL_ADC_IRQHandler+0x4cc>)
 8002b2e:	e000      	b.n	8002b32 <HAL_ADC_IRQHandler+0x426>
 8002b30:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <HAL_ADC_IRQHandler+0x4d0>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fa4e 	bl	8001fd4 <LL_ADC_GetMultiDMATransfer>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x44a>
        {
          overrun_error = 1UL;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b42:	e008      	b.n	8002b56 <HAL_ADC_IRQHandler+0x44a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x44a>
        {
          overrun_error = 1UL;
 8002b52:	2301      	movs	r3, #1
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10f      	bne.n	8002b7c <HAL_ADC_IRQHandler+0x470>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6c:	f043 0202 	orr.w	r2, r3, #2
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	661a      	str	r2, [r3, #96]	@ 0x60
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2210      	movs	r2, #16
 8002b82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01a      	beq.n	8002bc4 <HAL_ADC_IRQHandler+0x4b8>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d015      	beq.n	8002bc4 <HAL_ADC_IRQHandler+0x4b8>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba8:	f043 0208 	orr.w	r2, r3, #8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002bc4:	bf00      	nop
 8002bc6:	3728      	adds	r7, #40	@ 0x28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	50000100 	.word	0x50000100
 8002bd0:	50000500 	.word	0x50000500
 8002bd4:	50000400 	.word	0x50000400
 8002bd8:	50000300 	.word	0x50000300
 8002bdc:	50000700 	.word	0x50000700

08002be0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b0b6      	sub	sp, #216	@ 0xd8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d102      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x24>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f000 bc13 	b.w	800347a <HAL_ADC_ConfigChannel+0x84a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fa4e 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 83f3 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7ff f90d 	bl	8001e9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fa3c 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002c8a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fa48 	bl	8002128 <LL_ADC_INJ_IsConversionOngoing>
 8002c98:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 81d9 	bne.w	8003058 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ca6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f040 81d4 	bne.w	8003058 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cb8:	d10f      	bne.n	8002cda <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f7ff f927 	bl	8001f18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f8bb 	bl	8001e4e <LL_ADC_SetSamplingTimeCommonConfig>
 8002cd8:	e00e      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f7ff f916 	bl	8001f18 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f8ab 	bl	8001e4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	08db      	lsrs	r3, r3, #3
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d022      	beq.n	8002d60 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6919      	ldr	r1, [r3, #16]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d2a:	f7ff f805 	bl	8001d38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6919      	ldr	r1, [r3, #16]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f7ff f851 	bl	8001de2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x126>
 8002d50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d54:	e000      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x128>
 8002d56:	2300      	movs	r3, #0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f7ff f85d 	bl	8001e18 <LL_ADC_SetOffsetSaturation>
 8002d5e:	e17b      	b.n	8003058 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f80a 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x15c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe ffff 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	f003 021f 	and.w	r2, r3, #31
 8002d8a:	e01e      	b.n	8002dca <HAL_ADC_ConfigChannel+0x19a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fff4 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e004      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d105      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x1b2>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	e018      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x1e4>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e004      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d106      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe ffc3 	bl	8001dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe ffa7 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x222>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe ff9c 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	0e9b      	lsrs	r3, r3, #26
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	e01e      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x260>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2101      	movs	r1, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe ff91 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002e70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002e78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e004      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x278>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	e018      	b.n	8002eda <HAL_ADC_ConfigChannel+0x2aa>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002ebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	e004      	b.n	8002eda <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d106      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe ff60 	bl	8001dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe ff44 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x2e8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe ff39 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	0e9b      	lsrs	r3, r3, #26
 8002f12:	f003 021f 	and.w	r2, r3, #31
 8002f16:	e01e      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x326>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe ff2e 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002f36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002f3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e004      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x33e>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	e016      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x36c>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002f80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002f8e:	2320      	movs	r3, #32
 8002f90:	e004      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d106      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2102      	movs	r1, #2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe feff 	bl	8001dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2103      	movs	r1, #3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe fee3 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x3aa>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2103      	movs	r1, #3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fed8 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	0e9b      	lsrs	r3, r3, #26
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	e017      	b.n	800300a <HAL_ADC_ConfigChannel+0x3da>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2103      	movs	r1, #3
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe fecd 	bl	8001d80 <LL_ADC_GetOffsetChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	e003      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x3f2>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	e011      	b.n	8003046 <HAL_ADC_ConfigChannel+0x416>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003032:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800303a:	2320      	movs	r3, #32
 800303c:	e003      	b.n	8003046 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800303e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003046:	429a      	cmp	r2, r3
 8003048:	d106      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	2103      	movs	r1, #3
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe feaa 	bl	8001dac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f829 	bl	80020b4 <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 813d 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	461a      	mov	r2, r3
 8003078:	f7fe ff7a 	bl	8001f70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4aa2      	ldr	r2, [pc, #648]	@ (800330c <HAL_ADC_ConfigChannel+0x6dc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	f040 812e 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x480>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0e9b      	lsrs	r3, r3, #26
 800309e:	3301      	adds	r3, #1
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2b09      	cmp	r3, #9
 80030a6:	bf94      	ite	ls
 80030a8:	2301      	movls	r3, #1
 80030aa:	2300      	movhi	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e019      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x4b4>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80030be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80030c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e003      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80030cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2b09      	cmp	r3, #9
 80030dc:	bf94      	ite	ls
 80030de:	2301      	movls	r3, #1
 80030e0:	2300      	movhi	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d079      	beq.n	80031dc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x4d4>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0e9b      	lsrs	r3, r3, #26
 80030fa:	3301      	adds	r3, #1
 80030fc:	069b      	lsls	r3, r3, #26
 80030fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003102:	e015      	b.n	8003130 <HAL_ADC_ConfigChannel+0x500>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003114:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800311c:	2320      	movs	r3, #32
 800311e:	e003      	b.n	8003128 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	069b      	lsls	r3, r3, #26
 800312c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x520>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0e9b      	lsrs	r3, r3, #26
 8003142:	3301      	adds	r3, #1
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	e017      	b.n	8003180 <HAL_ADC_ConfigChannel+0x550>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800315e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003160:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e003      	b.n	8003174 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800316c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	ea42 0103 	orr.w	r1, r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x576>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	3301      	adds	r3, #1
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	051b      	lsls	r3, r3, #20
 80031a4:	e018      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x5a8>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80031b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80031b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80031be:	2320      	movs	r3, #32
 80031c0:	e003      	b.n	80031ca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80031c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d8:	430b      	orrs	r3, r1
 80031da:	e07e      	b.n	80032da <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x5c8>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	3301      	adds	r3, #1
 80031f0:	069b      	lsls	r3, r3, #26
 80031f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031f6:	e015      	b.n	8003224 <HAL_ADC_ConfigChannel+0x5f4>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800320a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	069b      	lsls	r3, r3, #26
 8003220:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x614>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	0e9b      	lsrs	r3, r3, #26
 8003236:	3301      	adds	r3, #1
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	e017      	b.n	8003274 <HAL_ADC_ConfigChannel+0x644>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	61fb      	str	r3, [r7, #28]
  return result;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e003      	b.n	8003268 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3301      	adds	r3, #1
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	2101      	movs	r1, #1
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	ea42 0103 	orr.w	r1, r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x670>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	3301      	adds	r3, #1
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	3b1e      	subs	r3, #30
 8003298:	051b      	lsls	r3, r3, #20
 800329a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800329e:	e01b      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x6a8>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	613b      	str	r3, [r7, #16]
  return result;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80032b8:	2320      	movs	r3, #32
 80032ba:	e003      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f003 021f 	and.w	r2, r3, #31
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	3b1e      	subs	r3, #30
 80032d2:	051b      	lsls	r3, r3, #20
 80032d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fe fe1a 	bl	8001f18 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <HAL_ADC_ConfigChannel+0x6e0>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80be 	beq.w	800346e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032fa:	d004      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x6d6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a04      	ldr	r2, [pc, #16]	@ (8003314 <HAL_ADC_ConfigChannel+0x6e4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10a      	bne.n	800331c <HAL_ADC_ConfigChannel+0x6ec>
 8003306:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <HAL_ADC_ConfigChannel+0x6e8>)
 8003308:	e009      	b.n	800331e <HAL_ADC_ConfigChannel+0x6ee>
 800330a:	bf00      	nop
 800330c:	407f0000 	.word	0x407f0000
 8003310:	80080000 	.word	0x80080000
 8003314:	50000100 	.word	0x50000100
 8003318:	50000300 	.word	0x50000300
 800331c:	4b59      	ldr	r3, [pc, #356]	@ (8003484 <HAL_ADC_ConfigChannel+0x854>)
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fcfc 	bl	8001d1c <LL_ADC_GetCommonPathInternalCh>
 8003324:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a56      	ldr	r2, [pc, #344]	@ (8003488 <HAL_ADC_ConfigChannel+0x858>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_ADC_ConfigChannel+0x70c>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a55      	ldr	r2, [pc, #340]	@ (800348c <HAL_ADC_ConfigChannel+0x85c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d13a      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800333c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003340:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d134      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003350:	d005      	beq.n	800335e <HAL_ADC_ConfigChannel+0x72e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a4e      	ldr	r2, [pc, #312]	@ (8003490 <HAL_ADC_ConfigChannel+0x860>)
 8003358:	4293      	cmp	r3, r2
 800335a:	f040 8085 	bne.w	8003468 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003366:	d004      	beq.n	8003372 <HAL_ADC_ConfigChannel+0x742>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a49      	ldr	r2, [pc, #292]	@ (8003494 <HAL_ADC_ConfigChannel+0x864>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x746>
 8003372:	4a49      	ldr	r2, [pc, #292]	@ (8003498 <HAL_ADC_ConfigChannel+0x868>)
 8003374:	e000      	b.n	8003378 <HAL_ADC_ConfigChannel+0x748>
 8003376:	4a43      	ldr	r2, [pc, #268]	@ (8003484 <HAL_ADC_ConfigChannel+0x854>)
 8003378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800337c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f7fe fcb7 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003388:	4b44      	ldr	r3, [pc, #272]	@ (800349c <HAL_ADC_ConfigChannel+0x86c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	4a44      	ldr	r2, [pc, #272]	@ (80034a0 <HAL_ADC_ConfigChannel+0x870>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033a2:	e002      	b.n	80033aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f9      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b0:	e05a      	b.n	8003468 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a3b      	ldr	r2, [pc, #236]	@ (80034a4 <HAL_ADC_ConfigChannel+0x874>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d125      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11f      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a31      	ldr	r2, [pc, #196]	@ (8003494 <HAL_ADC_ConfigChannel+0x864>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d104      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x7ac>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a34      	ldr	r2, [pc, #208]	@ (80034a8 <HAL_ADC_ConfigChannel+0x878>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d047      	beq.n	800346c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033e4:	d004      	beq.n	80033f0 <HAL_ADC_ConfigChannel+0x7c0>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003494 <HAL_ADC_ConfigChannel+0x864>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x7c4>
 80033f0:	4a29      	ldr	r2, [pc, #164]	@ (8003498 <HAL_ADC_ConfigChannel+0x868>)
 80033f2:	e000      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x7c6>
 80033f4:	4a23      	ldr	r2, [pc, #140]	@ (8003484 <HAL_ADC_ConfigChannel+0x854>)
 80033f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033fe:	4619      	mov	r1, r3
 8003400:	4610      	mov	r0, r2
 8003402:	f7fe fc78 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003406:	e031      	b.n	800346c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a27      	ldr	r2, [pc, #156]	@ (80034ac <HAL_ADC_ConfigChannel+0x87c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d12d      	bne.n	800346e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d127      	bne.n	800346e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <HAL_ADC_ConfigChannel+0x864>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d022      	beq.n	800346e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003430:	d004      	beq.n	800343c <HAL_ADC_ConfigChannel+0x80c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a17      	ldr	r2, [pc, #92]	@ (8003494 <HAL_ADC_ConfigChannel+0x864>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x810>
 800343c:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <HAL_ADC_ConfigChannel+0x868>)
 800343e:	e000      	b.n	8003442 <HAL_ADC_ConfigChannel+0x812>
 8003440:	4a10      	ldr	r2, [pc, #64]	@ (8003484 <HAL_ADC_ConfigChannel+0x854>)
 8003442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003446:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f7fe fc52 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
 8003452:	e00c      	b.n	800346e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003466:	e002      	b.n	800346e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003468:	bf00      	nop
 800346a:	e000      	b.n	800346e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800346c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003476:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800347a:	4618      	mov	r0, r3
 800347c:	37d8      	adds	r7, #216	@ 0xd8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	50000700 	.word	0x50000700
 8003488:	c3210000 	.word	0xc3210000
 800348c:	90c00010 	.word	0x90c00010
 8003490:	50000600 	.word	0x50000600
 8003494:	50000100 	.word	0x50000100
 8003498:	50000300 	.word	0x50000300
 800349c:	20000004 	.word	0x20000004
 80034a0:	053e2d63 	.word	0x053e2d63
 80034a4:	c7520000 	.word	0xc7520000
 80034a8:	50000500 	.word	0x50000500
 80034ac:	cb840000 	.word	0xcb840000

080034b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fdf7 	bl	80020b4 <LL_ADC_IsEnabled>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d176      	bne.n	80035ba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	4b3c      	ldr	r3, [pc, #240]	@ (80035c4 <ADC_Enable+0x114>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e062      	b.n	80035bc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fdc6 	bl	800208c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003508:	d004      	beq.n	8003514 <ADC_Enable+0x64>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2e      	ldr	r2, [pc, #184]	@ (80035c8 <ADC_Enable+0x118>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <ADC_Enable+0x68>
 8003514:	4b2d      	ldr	r3, [pc, #180]	@ (80035cc <ADC_Enable+0x11c>)
 8003516:	e000      	b.n	800351a <ADC_Enable+0x6a>
 8003518:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <ADC_Enable+0x120>)
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fbfe 	bl	8001d1c <LL_ADC_GetCommonPathInternalCh>
 8003520:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003526:	2b00      	cmp	r3, #0
 8003528:	d013      	beq.n	8003552 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800352a:	4b2a      	ldr	r3, [pc, #168]	@ (80035d4 <ADC_Enable+0x124>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	4a29      	ldr	r2, [pc, #164]	@ (80035d8 <ADC_Enable+0x128>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003544:	e002      	b.n	800354c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3b01      	subs	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f9      	bne.n	8003546 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003552:	f7fe fbb1 	bl	8001cb8 <HAL_GetTick>
 8003556:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003558:	e028      	b.n	80035ac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fda8 	bl	80020b4 <LL_ADC_IsEnabled>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fe fd8c 	bl	800208c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003574:	f7fe fba0 	bl	8001cb8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d914      	bls.n	80035ac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d00d      	beq.n	80035ac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003594:	f043 0210 	orr.w	r2, r3, #16
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e007      	b.n	80035bc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d1cf      	bne.n	800355a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	8000003f 	.word	0x8000003f
 80035c8:	50000100 	.word	0x50000100
 80035cc:	50000300 	.word	0x50000300
 80035d0:	50000700 	.word	0x50000700
 80035d4:	20000004 	.word	0x20000004
 80035d8:	053e2d63 	.word	0x053e2d63

080035dc <LL_ADC_IsEnabled>:
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <LL_ADC_IsEnabled+0x18>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <LL_ADC_IsEnabled+0x1a>
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_ADC_REG_IsConversionOngoing>:
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d101      	bne.n	800361a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b0ad      	sub	sp, #180	@ 0xb4
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e0f8      	b.n	800389c <HAL_ADCEx_MultiModeConfigChannel+0x210>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80036b2:	2300      	movs	r3, #0
 80036b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80036c2:	2300      	movs	r3, #0
 80036c4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ce:	d102      	bne.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80036d0:	4b74      	ldr	r3, [pc, #464]	@ (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e009      	b.n	80036ea <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a73      	ldr	r2, [pc, #460]	@ (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d102      	bne.n	80036e6 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 80036e0:	4b72      	ldr	r3, [pc, #456]	@ (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e001      	b.n	80036ea <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0c9      	b.n	800389c <HAL_ADCEx_MultiModeConfigChannel+0x210>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff79 	bl	8003602 <LL_ADC_REG_IsConversionOngoing>
 8003710:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff72 	bl	8003602 <LL_ADC_REG_IsConversionOngoing>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 80aa 	bne.w	800387a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003726:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 80a5 	bne.w	800387a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003738:	d004      	beq.n	8003744 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a59      	ldr	r2, [pc, #356]	@ (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8003744:	4b5a      	ldr	r3, [pc, #360]	@ (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x224>)
 8003746:	e000      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8003748:	4b5a      	ldr	r3, [pc, #360]	@ (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x228>)
 800374a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d04f      	beq.n	80037f6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800376a:	035b      	lsls	r3, r3, #13
 800376c:	430b      	orrs	r3, r1
 800376e:	431a      	orrs	r2, r3
 8003770:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003774:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800377e:	d004      	beq.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a47      	ldr	r2, [pc, #284]	@ (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10f      	bne.n	80037aa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
 800378a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800378e:	f7ff ff25 	bl	80035dc <LL_ADC_IsEnabled>
 8003792:	4604      	mov	r4, r0
 8003794:	4843      	ldr	r0, [pc, #268]	@ (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003796:	f7ff ff21 	bl	80035dc <LL_ADC_IsEnabled>
 800379a:	4603      	mov	r3, r0
 800379c:	4323      	orrs	r3, r4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e012      	b.n	80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x144>
 80037aa:	483f      	ldr	r0, [pc, #252]	@ (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 80037ac:	f7ff ff16 	bl	80035dc <LL_ADC_IsEnabled>
 80037b0:	4604      	mov	r4, r0
 80037b2:	483e      	ldr	r0, [pc, #248]	@ (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 80037b4:	f7ff ff12 	bl	80035dc <LL_ADC_IsEnabled>
 80037b8:	4603      	mov	r3, r0
 80037ba:	431c      	orrs	r4, r3
 80037bc:	483e      	ldr	r0, [pc, #248]	@ (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 80037be:	f7ff ff0d 	bl	80035dc <LL_ADC_IsEnabled>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4323      	orrs	r3, r4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d05c      	beq.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037de:	f023 030f 	bic.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	6811      	ldr	r1, [r2, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	6892      	ldr	r2, [r2, #8]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037f2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037f4:	e04b      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x202>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003800:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003804:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380e:	d004      	beq.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a23      	ldr	r2, [pc, #140]	@ (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10f      	bne.n	800383a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800381a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800381e:	f7ff fedd 	bl	80035dc <LL_ADC_IsEnabled>
 8003822:	4604      	mov	r4, r0
 8003824:	481f      	ldr	r0, [pc, #124]	@ (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x218>)
 8003826:	f7ff fed9 	bl	80035dc <LL_ADC_IsEnabled>
 800382a:	4603      	mov	r3, r0
 800382c:	4323      	orrs	r3, r4
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf0c      	ite	eq
 8003832:	2301      	moveq	r3, #1
 8003834:	2300      	movne	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e012      	b.n	8003860 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>
 800383a:	481b      	ldr	r0, [pc, #108]	@ (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x21c>)
 800383c:	f7ff fece 	bl	80035dc <LL_ADC_IsEnabled>
 8003840:	4604      	mov	r4, r0
 8003842:	481a      	ldr	r0, [pc, #104]	@ (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x220>)
 8003844:	f7ff feca 	bl	80035dc <LL_ADC_IsEnabled>
 8003848:	4603      	mov	r3, r0
 800384a:	431c      	orrs	r4, r3
 800384c:	481a      	ldr	r0, [pc, #104]	@ (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x22c>)
 800384e:	f7ff fec5 	bl	80035dc <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	4323      	orrs	r3, r4
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d014      	beq.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x202>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003864:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800386e:	f023 030f 	bic.w	r3, r3, #15
 8003872:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003876:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003878:	e009      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x202>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 800388c:	e000      	b.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x204>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800388e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003898:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 800389c:	4618      	mov	r0, r3
 800389e:	37b4      	adds	r7, #180	@ 0xb4
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd90      	pop	{r4, r7, pc}
 80038a4:	50000100 	.word	0x50000100
 80038a8:	50000400 	.word	0x50000400
 80038ac:	50000500 	.word	0x50000500
 80038b0:	50000300 	.word	0x50000300
 80038b4:	50000700 	.word	0x50000700
 80038b8:	50000600 	.word	0x50000600

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ee:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	@ (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4907      	ldr	r1, [pc, #28]	@ (8003958 <__NVIC_EnableIRQ+0x38>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	@ (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	@ (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	@ 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a28:	d301      	bcc.n	8003a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e00f      	b.n	8003a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <SysTick_Config+0x40>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a36:	210f      	movs	r1, #15
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	f7ff ff8e 	bl	800395c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <SysTick_Config+0x40>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a46:	4b04      	ldr	r3, [pc, #16]	@ (8003a58 <SysTick_Config+0x40>)
 8003a48:	2207      	movs	r2, #7
 8003a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	e000e010 	.word	0xe000e010

08003a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ff29 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a80:	f7ff ff40 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff ff90 	bl	80039b0 <NVIC_EncodePriority>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff5f 	bl	800395c <__NVIC_SetPriority>
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff33 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ffa4 	bl	8003a18 <SysTick_Config>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e014      	b.n	8003b16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	791b      	ldrb	r3, [r3, #4]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fd fd2f 	bl	8001560 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	@ 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_DAC_ConfigChannel+0x1c>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e1a1      	b.n	8003e84 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	795b      	ldrb	r3, [r3, #5]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_DAC_ConfigChannel+0x32>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e198      	b.n	8003e84 <HAL_DAC_ConfigChannel+0x364>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d17a      	bne.n	8003c5c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b66:	f7fe f8a7 	bl	8001cb8 <HAL_GetTick>
 8003b6a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d13d      	bne.n	8003bee <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b72:	e018      	b.n	8003ba6 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b74:	f7fe f8a0 	bl	8001cb8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d911      	bls.n	8003ba6 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f043 0208 	orr.w	r2, r3, #8
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e16e      	b.n	8003e84 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1df      	bne.n	8003b74 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bbe:	e020      	b.n	8003c02 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bc0:	f7fe f87a 	bl	8001cb8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d90f      	bls.n	8003bee <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	da0a      	bge.n	8003bee <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f043 0208 	orr.w	r2, r3, #8
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2203      	movs	r2, #3
 8003be8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e14a      	b.n	8003e84 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	dbe3      	blt.n	8003bc0 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	ea02 0103 	and.w	r1, r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	21ff      	movs	r1, #255	@ 0xff
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	ea02 0103 	and.w	r1, r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d11d      	bne.n	8003ca0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	221f      	movs	r2, #31
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	4313      	orrs	r3, r2
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2207      	movs	r2, #7
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb8:	4013      	ands	r3, r2
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d102      	bne.n	8003cca <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	e00f      	b.n	8003cea <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d102      	bne.n	8003cd8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	e008      	b.n	8003cea <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	e001      	b.n	8003cea <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	6a3a      	ldr	r2, [r7, #32]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	791b      	ldrb	r3, [r3, #4]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d102      	bne.n	8003d1e <HAL_DAC_ConfigChannel+0x1fe>
 8003d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d1c:	e000      	b.n	8003d20 <HAL_DAC_ConfigChannel+0x200>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d38:	4013      	ands	r3, r2
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	795b      	ldrb	r3, [r3, #5]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <HAL_DAC_ConfigChannel+0x22a>
 8003d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d48:	e000      	b.n	8003d4c <HAL_DAC_ConfigChannel+0x22c>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d114      	bne.n	8003d8c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d62:	f001 fa4d 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8003d66:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4a48      	ldr	r2, [pc, #288]	@ (8003e8c <HAL_DAC_ConfigChannel+0x36c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d904      	bls.n	8003d7a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d78:	e00f      	b.n	8003d9a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4a44      	ldr	r2, [pc, #272]	@ (8003e90 <HAL_DAC_ConfigChannel+0x370>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d90a      	bls.n	8003d98 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8a:	e006      	b.n	8003d9a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d92:	4313      	orrs	r3, r2
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d96:	e000      	b.n	8003d9a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003d98:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da8:	4313      	orrs	r3, r2
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	400a      	ands	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dec:	4013      	ands	r3, r2
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e04:	4313      	orrs	r3, r2
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	22c0      	movs	r2, #192	@ 0xc0
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43da      	mvns	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	400a      	ands	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	ea02 0103 	and.w	r1, r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3728      	adds	r7, #40	@ 0x28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	09896800 	.word	0x09896800
 8003e90:	04c4b400 	.word	0x04c4b400

08003e94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d005      	beq.n	8003eb8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2204      	movs	r2, #4
 8003eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e037      	b.n	8003f28 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 020e 	bic.w	r2, r2, #14
 8003ec6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ed6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f04:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f1c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f26:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d00d      	beq.n	8003f7a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
 8003f78:	e047      	b.n	800400a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 020e 	bic.w	r2, r2, #14
 8003f88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	f003 021f 	and.w	r2, r3, #31
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fc6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00c      	beq.n	8003fea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fe8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
    }
  }
  return status;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004022:	e15a      	b.n	80042da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	2101      	movs	r1, #1
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	fa01 f303 	lsl.w	r3, r1, r3
 8004030:	4013      	ands	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 814c 	beq.w	80042d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d005      	beq.n	8004054 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004050:	2b02      	cmp	r3, #2
 8004052:	d130      	bne.n	80040b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2203      	movs	r2, #3
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4013      	ands	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800408a:	2201      	movs	r2, #1
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	f003 0201 	and.w	r2, r3, #1
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d017      	beq.n	80040f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2203      	movs	r2, #3
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d123      	bne.n	8004146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	08da      	lsrs	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3208      	adds	r2, #8
 8004106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800410a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	220f      	movs	r2, #15
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	08da      	lsrs	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3208      	adds	r2, #8
 8004140:	6939      	ldr	r1, [r7, #16]
 8004142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	2203      	movs	r2, #3
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4013      	ands	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 0203 	and.w	r2, r3, #3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80a6 	beq.w	80042d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004188:	4b5b      	ldr	r3, [pc, #364]	@ (80042f8 <HAL_GPIO_Init+0x2e4>)
 800418a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418c:	4a5a      	ldr	r2, [pc, #360]	@ (80042f8 <HAL_GPIO_Init+0x2e4>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6613      	str	r3, [r2, #96]	@ 0x60
 8004194:	4b58      	ldr	r3, [pc, #352]	@ (80042f8 <HAL_GPIO_Init+0x2e4>)
 8004196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041a0:	4a56      	ldr	r2, [pc, #344]	@ (80042fc <HAL_GPIO_Init+0x2e8>)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	3302      	adds	r3, #2
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	220f      	movs	r2, #15
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041ca:	d01f      	beq.n	800420c <HAL_GPIO_Init+0x1f8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004300 <HAL_GPIO_Init+0x2ec>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d019      	beq.n	8004208 <HAL_GPIO_Init+0x1f4>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a4b      	ldr	r2, [pc, #300]	@ (8004304 <HAL_GPIO_Init+0x2f0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <HAL_GPIO_Init+0x1f0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a4a      	ldr	r2, [pc, #296]	@ (8004308 <HAL_GPIO_Init+0x2f4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00d      	beq.n	8004200 <HAL_GPIO_Init+0x1ec>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a49      	ldr	r2, [pc, #292]	@ (800430c <HAL_GPIO_Init+0x2f8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d007      	beq.n	80041fc <HAL_GPIO_Init+0x1e8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a48      	ldr	r2, [pc, #288]	@ (8004310 <HAL_GPIO_Init+0x2fc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d101      	bne.n	80041f8 <HAL_GPIO_Init+0x1e4>
 80041f4:	2305      	movs	r3, #5
 80041f6:	e00a      	b.n	800420e <HAL_GPIO_Init+0x1fa>
 80041f8:	2306      	movs	r3, #6
 80041fa:	e008      	b.n	800420e <HAL_GPIO_Init+0x1fa>
 80041fc:	2304      	movs	r3, #4
 80041fe:	e006      	b.n	800420e <HAL_GPIO_Init+0x1fa>
 8004200:	2303      	movs	r3, #3
 8004202:	e004      	b.n	800420e <HAL_GPIO_Init+0x1fa>
 8004204:	2302      	movs	r3, #2
 8004206:	e002      	b.n	800420e <HAL_GPIO_Init+0x1fa>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_GPIO_Init+0x1fa>
 800420c:	2300      	movs	r3, #0
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	f002 0203 	and.w	r2, r2, #3
 8004214:	0092      	lsls	r2, r2, #2
 8004216:	4093      	lsls	r3, r2
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800421e:	4937      	ldr	r1, [pc, #220]	@ (80042fc <HAL_GPIO_Init+0x2e8>)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800422c:	4b39      	ldr	r3, [pc, #228]	@ (8004314 <HAL_GPIO_Init+0x300>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004250:	4a30      	ldr	r2, [pc, #192]	@ (8004314 <HAL_GPIO_Init+0x300>)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004256:	4b2f      	ldr	r3, [pc, #188]	@ (8004314 <HAL_GPIO_Init+0x300>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43db      	mvns	r3, r3
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4013      	ands	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800427a:	4a26      	ldr	r2, [pc, #152]	@ (8004314 <HAL_GPIO_Init+0x300>)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004280:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <HAL_GPIO_Init+0x300>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004314 <HAL_GPIO_Init+0x300>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <HAL_GPIO_Init+0x300>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042ce:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <HAL_GPIO_Init+0x300>)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3301      	adds	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f47f ae9d 	bne.w	8004024 <HAL_GPIO_Init+0x10>
  }
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40010000 	.word	0x40010000
 8004300:	48000400 	.word	0x48000400
 8004304:	48000800 	.word	0x48000800
 8004308:	48000c00 	.word	0x48000c00
 800430c:	48001000 	.word	0x48001000
 8004310:	48001400 	.word	0x48001400
 8004314:	40010400 	.word	0x40010400

08004318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	887b      	ldrh	r3, [r7, #2]
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	e001      	b.n	800433a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	807b      	strh	r3, [r7, #2]
 8004354:	4613      	mov	r3, r2
 8004356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004358:	787b      	ldrb	r3, [r7, #1]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800435e:	887a      	ldrh	r2, [r7, #2]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004364:	e002      	b.n	800436c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004366:	887a      	ldrh	r2, [r7, #2]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e0ff      	b.n	800458a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d145      	bne.n	8004422 <HAL_PCD_Init+0xaa>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback = HAL_PCD_SOFCallback;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a7c      	ldr	r2, [pc, #496]	@ (8004594 <HAL_PCD_Init+0x21c>)
 80043a2:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
    hpcd->SetupStageCallback = HAL_PCD_SetupStageCallback;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a7b      	ldr	r2, [pc, #492]	@ (8004598 <HAL_PCD_Init+0x220>)
 80043aa:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
    hpcd->ResetCallback = HAL_PCD_ResetCallback;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a7a      	ldr	r2, [pc, #488]	@ (800459c <HAL_PCD_Init+0x224>)
 80043b2:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    hpcd->SuspendCallback = HAL_PCD_SuspendCallback;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a79      	ldr	r2, [pc, #484]	@ (80045a0 <HAL_PCD_Init+0x228>)
 80043ba:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
    hpcd->ResumeCallback = HAL_PCD_ResumeCallback;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a78      	ldr	r2, [pc, #480]	@ (80045a4 <HAL_PCD_Init+0x22c>)
 80043c2:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
    hpcd->ConnectCallback = HAL_PCD_ConnectCallback;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a77      	ldr	r2, [pc, #476]	@ (80045a8 <HAL_PCD_Init+0x230>)
 80043ca:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
    hpcd->DisconnectCallback = HAL_PCD_DisconnectCallback;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a76      	ldr	r2, [pc, #472]	@ (80045ac <HAL_PCD_Init+0x234>)
 80043d2:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
    hpcd->DataOutStageCallback = HAL_PCD_DataOutStageCallback;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a75      	ldr	r2, [pc, #468]	@ (80045b0 <HAL_PCD_Init+0x238>)
 80043da:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
    hpcd->DataInStageCallback = HAL_PCD_DataInStageCallback;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a74      	ldr	r2, [pc, #464]	@ (80045b4 <HAL_PCD_Init+0x23c>)
 80043e2:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
    hpcd->ISOOUTIncompleteCallback = HAL_PCD_ISOOUTIncompleteCallback;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a73      	ldr	r2, [pc, #460]	@ (80045b8 <HAL_PCD_Init+0x240>)
 80043ea:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
    hpcd->ISOINIncompleteCallback = HAL_PCD_ISOINIncompleteCallback;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a72      	ldr	r2, [pc, #456]	@ (80045bc <HAL_PCD_Init+0x244>)
 80043f2:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
    hpcd->LPMCallback = HAL_PCDEx_LPM_Callback;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a71      	ldr	r2, [pc, #452]	@ (80045c0 <HAL_PCD_Init+0x248>)
 80043fa:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
    hpcd->BCDCallback = HAL_PCDEx_BCD_Callback;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a70      	ldr	r2, [pc, #448]	@ (80045c4 <HAL_PCD_Init+0x24c>)
 8004402:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    if (hpcd->MspInitCallback == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <HAL_PCD_Init+0xa0>
    {
      hpcd->MspInitCallback = HAL_PCD_MspInit;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a6d      	ldr	r2, [pc, #436]	@ (80045c8 <HAL_PCD_Init+0x250>)
 8004414:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
    }

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f003 f9e2 	bl	80077f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e03e      	b.n	80044b8 <HAL_PCD_Init+0x140>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800443a:	7bfa      	ldrb	r2, [r7, #15]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	440b      	add	r3, r1
 8004448:	3311      	adds	r3, #17
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800444e:	7bfa      	ldrb	r2, [r7, #15]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	440b      	add	r3, r1
 800445c:	3310      	adds	r3, #16
 800445e:	7bfa      	ldrb	r2, [r7, #15]
 8004460:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004462:	7bfa      	ldrb	r2, [r7, #15]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	440b      	add	r3, r1
 8004470:	3313      	adds	r3, #19
 8004472:	2200      	movs	r2, #0
 8004474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004476:	7bfa      	ldrb	r2, [r7, #15]
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	440b      	add	r3, r1
 8004484:	3320      	adds	r3, #32
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	440b      	add	r3, r1
 8004498:	3324      	adds	r3, #36	@ 0x24
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	440b      	add	r3, r1
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	3301      	adds	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	791b      	ldrb	r3, [r3, #4]
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3bb      	bcc.n	800443a <HAL_PCD_Init+0xc2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e044      	b.n	8004552 <HAL_PCD_Init+0x1da>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044c8:	7bfa      	ldrb	r2, [r7, #15]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	440b      	add	r3, r1
 80044ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044f4:	7bfa      	ldrb	r2, [r7, #15]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	440b      	add	r3, r1
 8004502:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800450a:	7bfa      	ldrb	r2, [r7, #15]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	440b      	add	r3, r1
 800452e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004536:	7bfa      	ldrb	r2, [r7, #15]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	3301      	adds	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	791b      	ldrb	r3, [r3, #4]
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	429a      	cmp	r2, r3
 800455a:	d3b5      	bcc.n	80044c8 <HAL_PCD_Init+0x150>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004568:	f003 f961 	bl	800782e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7a9b      	ldrb	r3, [r3, #10]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d102      	bne.n	8004588 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f898 	bl	80046b8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	08004611 	.word	0x08004611
 8004598:	080045fd 	.word	0x080045fd
 800459c:	08004625 	.word	0x08004625
 80045a0:	08004639 	.word	0x08004639
 80045a4:	0800464d 	.word	0x0800464d
 80045a8:	08004691 	.word	0x08004691
 80045ac:	080046a5 	.word	0x080046a5
 80045b0:	080045cd 	.word	0x080045cd
 80045b4:	080045e5 	.word	0x080045e5
 80045b8:	08004661 	.word	0x08004661
 80045bc:	08004679 	.word	0x08004679
 80045c0:	0800470d 	.word	0x0800470d
 80045c4:	08004725 	.word	0x08004725
 80045c8:	08001725 	.word	0x08001725

080045cc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f043 0302 	orr.w	r3, r3, #2
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_PCDEx_BCD_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_BCD_Callback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d141      	bne.n	80047ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800474a:	4b4b      	ldr	r3, [pc, #300]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004756:	d131      	bne.n	80047bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004758:	4b47      	ldr	r3, [pc, #284]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800475e:	4a46      	ldr	r2, [pc, #280]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004768:	4b43      	ldr	r3, [pc, #268]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004770:	4a41      	ldr	r2, [pc, #260]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004778:	4b40      	ldr	r3, [pc, #256]	@ (800487c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2232      	movs	r2, #50	@ 0x32
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	4a3f      	ldr	r2, [pc, #252]	@ (8004880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	0c9b      	lsrs	r3, r3, #18
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478e:	e002      	b.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3b01      	subs	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004796:	4b38      	ldr	r3, [pc, #224]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a2:	d102      	bne.n	80047aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f2      	bne.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047aa:	4b33      	ldr	r3, [pc, #204]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b6:	d158      	bne.n	800486a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e057      	b.n	800486c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80047cc:	e04d      	b.n	800486a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d4:	d141      	bne.n	800485a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d6:	4b28      	ldr	r3, [pc, #160]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e2:	d131      	bne.n	8004848 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e4:	4b24      	ldr	r3, [pc, #144]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ea:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f4:	4b20      	ldr	r3, [pc, #128]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004804:	4b1d      	ldr	r3, [pc, #116]	@ (800487c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2232      	movs	r2, #50	@ 0x32
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	4a1c      	ldr	r2, [pc, #112]	@ (8004880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	0c9b      	lsrs	r3, r3, #18
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481a:	e002      	b.n	8004822 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004822:	4b15      	ldr	r3, [pc, #84]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800482e:	d102      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f2      	bne.n	800481c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004836:	4b10      	ldr	r3, [pc, #64]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004842:	d112      	bne.n	800486a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e011      	b.n	800486c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484e:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004854:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004858:	e007      	b.n	800486a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800485a:	4b07      	ldr	r3, [pc, #28]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004862:	4a05      	ldr	r2, [pc, #20]	@ (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004864:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004868:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40007000 	.word	0x40007000
 800487c:	20000004 	.word	0x20000004
 8004880:	431bde83 	.word	0x431bde83

08004884 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a04      	ldr	r2, [pc, #16]	@ (80048a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800488e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004892:	6093      	str	r3, [r2, #8]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40007000 	.word	0x40007000

080048a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e2fe      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d075      	beq.n	80049ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c2:	4b97      	ldr	r3, [pc, #604]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048cc:	4b94      	ldr	r3, [pc, #592]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	d102      	bne.n	80048e2 <HAL_RCC_OscConfig+0x3e>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d002      	beq.n	80048e8 <HAL_RCC_OscConfig+0x44>
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d10b      	bne.n	8004900 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	4b8d      	ldr	r3, [pc, #564]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05b      	beq.n	80049ac <HAL_RCC_OscConfig+0x108>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d157      	bne.n	80049ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e2d9      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004908:	d106      	bne.n	8004918 <HAL_RCC_OscConfig+0x74>
 800490a:	4b85      	ldr	r3, [pc, #532]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a84      	ldr	r2, [pc, #528]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e01d      	b.n	8004954 <HAL_RCC_OscConfig+0xb0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x98>
 8004922:	4b7f      	ldr	r3, [pc, #508]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7e      	ldr	r2, [pc, #504]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a7b      	ldr	r2, [pc, #492]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e00b      	b.n	8004954 <HAL_RCC_OscConfig+0xb0>
 800493c:	4b78      	ldr	r3, [pc, #480]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a77      	ldr	r2, [pc, #476]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b75      	ldr	r3, [pc, #468]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a74      	ldr	r2, [pc, #464]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 800494e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d013      	beq.n	8004984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd f9ac 	bl	8001cb8 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fd f9a8 	bl	8001cb8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	@ 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e29e      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004976:	4b6a      	ldr	r3, [pc, #424]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0xc0>
 8004982:	e014      	b.n	80049ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fd f998 	bl	8001cb8 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800498c:	f7fd f994 	bl	8001cb8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	@ 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e28a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800499e:	4b60      	ldr	r3, [pc, #384]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0xe8>
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d075      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ba:	4b59      	ldr	r3, [pc, #356]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049c4:	4b56      	ldr	r3, [pc, #344]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	d102      	bne.n	80049da <HAL_RCC_OscConfig+0x136>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d002      	beq.n	80049e0 <HAL_RCC_OscConfig+0x13c>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11f      	bne.n	8004a20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_OscConfig+0x154>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e25d      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f8:	4b49      	ldr	r3, [pc, #292]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	061b      	lsls	r3, r3, #24
 8004a06:	4946      	ldr	r1, [pc, #280]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a0c:	4b45      	ldr	r3, [pc, #276]	@ (8004b24 <HAL_RCC_OscConfig+0x280>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fd f905 	bl	8001c20 <HAL_InitTick>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d043      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e249      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d023      	beq.n	8004a70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a28:	4b3d      	ldr	r3, [pc, #244]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd f940 	bl	8001cb8 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd f93c 	bl	8001cb8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e232      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a4e:	4b34      	ldr	r3, [pc, #208]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5a:	4b31      	ldr	r3, [pc, #196]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	061b      	lsls	r3, r3, #24
 8004a68:	492d      	ldr	r1, [pc, #180]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	604b      	str	r3, [r1, #4]
 8004a6e:	e01a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a70:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2a      	ldr	r2, [pc, #168]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fd f91c 	bl	8001cb8 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a84:	f7fd f918 	bl	8001cb8 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e20e      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a96:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x1e0>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d041      	beq.n	8004b36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aba:	4b19      	ldr	r3, [pc, #100]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac0:	4a17      	ldr	r2, [pc, #92]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aca:	f7fd f8f5 	bl	8001cb8 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad2:	f7fd f8f1 	bl	8001cb8 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e1e7      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0ef      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x22e>
 8004af2:	e020      	b.n	8004b36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afa:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <HAL_RCC_OscConfig+0x27c>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fd f8d8 	bl	8001cb8 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b0a:	e00d      	b.n	8004b28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fd f8d4 	bl	8001cb8 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d906      	bls.n	8004b28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e1ca      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b28:	4b8c      	ldr	r3, [pc, #560]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ea      	bne.n	8004b0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80a6 	beq.w	8004c90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b44:	2300      	movs	r3, #0
 8004b46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b48:	4b84      	ldr	r3, [pc, #528]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_OscConfig+0x2b4>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x2b6>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	4a7e      	ldr	r2, [pc, #504]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b76:	2301      	movs	r3, #1
 8004b78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b7a:	4b79      	ldr	r3, [pc, #484]	@ (8004d60 <HAL_RCC_OscConfig+0x4bc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d118      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b86:	4b76      	ldr	r3, [pc, #472]	@ (8004d60 <HAL_RCC_OscConfig+0x4bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a75      	ldr	r2, [pc, #468]	@ (8004d60 <HAL_RCC_OscConfig+0x4bc>)
 8004b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b92:	f7fd f891 	bl	8001cb8 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9a:	f7fd f88d 	bl	8001cb8 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e183      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bac:	4b6c      	ldr	r3, [pc, #432]	@ (8004d60 <HAL_RCC_OscConfig+0x4bc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d108      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x32e>
 8004bc0:	4b66      	ldr	r3, [pc, #408]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc6:	4a65      	ldr	r2, [pc, #404]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bd0:	e024      	b.n	8004c1c <HAL_RCC_OscConfig+0x378>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d110      	bne.n	8004bfc <HAL_RCC_OscConfig+0x358>
 8004bda:	4b60      	ldr	r3, [pc, #384]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004be2:	f043 0304 	orr.w	r3, r3, #4
 8004be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bea:	4b5c      	ldr	r3, [pc, #368]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bfa:	e00f      	b.n	8004c1c <HAL_RCC_OscConfig+0x378>
 8004bfc:	4b57      	ldr	r3, [pc, #348]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c02:	4a56      	ldr	r2, [pc, #344]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c0c:	4b53      	ldr	r3, [pc, #332]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c12:	4a52      	ldr	r2, [pc, #328]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004c14:	f023 0304 	bic.w	r3, r3, #4
 8004c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d016      	beq.n	8004c52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c24:	f7fd f848 	bl	8001cb8 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fd f844 	bl	8001cb8 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e138      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c42:	4b46      	ldr	r3, [pc, #280]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0ed      	beq.n	8004c2c <HAL_RCC_OscConfig+0x388>
 8004c50:	e015      	b.n	8004c7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c52:	f7fd f831 	bl	8001cb8 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c58:	e00a      	b.n	8004c70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5a:	f7fd f82d 	bl	8001cb8 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e121      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c70:	4b3a      	ldr	r3, [pc, #232]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1ed      	bne.n	8004c5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c7e:	7ffb      	ldrb	r3, [r7, #31]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c84:	4b35      	ldr	r3, [pc, #212]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	4a34      	ldr	r2, [pc, #208]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d03c      	beq.n	8004d16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01c      	beq.n	8004cde <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004caa:	4a2c      	ldr	r2, [pc, #176]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd f800 	bl	8001cb8 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cbc:	f7fc fffc 	bl	8001cb8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0f2      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cce:	4b23      	ldr	r3, [pc, #140]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ef      	beq.n	8004cbc <HAL_RCC_OscConfig+0x418>
 8004cdc:	e01b      	b.n	8004d16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cde:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cee:	f7fc ffe3 	bl	8001cb8 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cf6:	f7fc ffdf 	bl	8001cb8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e0d5      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d08:	4b14      	ldr	r3, [pc, #80]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1ef      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80c9 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d20:	4b0e      	ldr	r3, [pc, #56]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b0c      	cmp	r3, #12
 8004d2a:	f000 8083 	beq.w	8004e34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d15e      	bne.n	8004df4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a08      	ldr	r2, [pc, #32]	@ (8004d5c <HAL_RCC_OscConfig+0x4b8>)
 8004d3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7fc ffb9 	bl	8001cb8 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d48:	e00c      	b.n	8004d64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4a:	f7fc ffb5 	bl	8001cb8 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d905      	bls.n	8004d64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e0ab      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d64:	4b55      	ldr	r3, [pc, #340]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ec      	bne.n	8004d4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d70:	4b52      	ldr	r3, [pc, #328]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	4b52      	ldr	r3, [pc, #328]	@ (8004ec0 <HAL_RCC_OscConfig+0x61c>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6a11      	ldr	r1, [r2, #32]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d80:	3a01      	subs	r2, #1
 8004d82:	0112      	lsls	r2, r2, #4
 8004d84:	4311      	orrs	r1, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d8a:	0212      	lsls	r2, r2, #8
 8004d8c:	4311      	orrs	r1, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d92:	0852      	lsrs	r2, r2, #1
 8004d94:	3a01      	subs	r2, #1
 8004d96:	0552      	lsls	r2, r2, #21
 8004d98:	4311      	orrs	r1, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d9e:	0852      	lsrs	r2, r2, #1
 8004da0:	3a01      	subs	r2, #1
 8004da2:	0652      	lsls	r2, r2, #25
 8004da4:	4311      	orrs	r1, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004daa:	06d2      	lsls	r2, r2, #27
 8004dac:	430a      	orrs	r2, r1
 8004dae:	4943      	ldr	r1, [pc, #268]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db4:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a40      	ldr	r2, [pc, #256]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004dba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fc ff74 	bl	8001cb8 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fc ff70 	bl	8001cb8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e066      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de6:	4b35      	ldr	r3, [pc, #212]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x530>
 8004df2:	e05e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df4:	4b31      	ldr	r3, [pc, #196]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a30      	ldr	r2, [pc, #192]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fc ff5a 	bl	8001cb8 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e08:	f7fc ff56 	bl	8001cb8 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e04c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e1a:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e26:	4b25      	ldr	r3, [pc, #148]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	4924      	ldr	r1, [pc, #144]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004e2c:	4b25      	ldr	r3, [pc, #148]	@ (8004ec4 <HAL_RCC_OscConfig+0x620>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	60cb      	str	r3, [r1, #12]
 8004e32:	e03e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e039      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e40:	4b1e      	ldr	r3, [pc, #120]	@ (8004ebc <HAL_RCC_OscConfig+0x618>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f003 0203 	and.w	r2, r3, #3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d12c      	bne.n	8004eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d123      	bne.n	8004eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d11b      	bne.n	8004eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d113      	bne.n	8004eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d109      	bne.n	8004eae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	019f800c 	.word	0x019f800c
 8004ec4:	feeefffc 	.word	0xfeeefffc

08004ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e11e      	b.n	800511e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b91      	ldr	r3, [pc, #580]	@ (8005128 <HAL_RCC_ClockConfig+0x260>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d910      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b8e      	ldr	r3, [pc, #568]	@ (8005128 <HAL_RCC_ClockConfig+0x260>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 020f 	bic.w	r2, r3, #15
 8004ef6:	498c      	ldr	r1, [pc, #560]	@ (8005128 <HAL_RCC_ClockConfig+0x260>)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b8a      	ldr	r3, [pc, #552]	@ (8005128 <HAL_RCC_ClockConfig+0x260>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e106      	b.n	800511e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d073      	beq.n	8005004 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d129      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f24:	4b81      	ldr	r3, [pc, #516]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0f4      	b.n	800511e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f34:	f000 f99c 	bl	8005270 <RCC_GetSysClockFreqFromPLLSource>
 8004f38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4a7c      	ldr	r2, [pc, #496]	@ (8005130 <HAL_RCC_ClockConfig+0x268>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d93f      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f42:	4b7a      	ldr	r3, [pc, #488]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d033      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d12f      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f62:	4b72      	ldr	r3, [pc, #456]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f6a:	4a70      	ldr	r2, [pc, #448]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f72:	2380      	movs	r3, #128	@ 0x80
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e024      	b.n	8004fc2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f80:	4b6a      	ldr	r3, [pc, #424]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0c6      	b.n	800511e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f90:	4b66      	ldr	r3, [pc, #408]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0be      	b.n	800511e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004fa0:	f000 f8ce 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8004fa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	4a61      	ldr	r2, [pc, #388]	@ (8005130 <HAL_RCC_ClockConfig+0x268>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d909      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fae:	4b5f      	ldr	r3, [pc, #380]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fb6:	4a5d      	ldr	r2, [pc, #372]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fbc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fbe:	2380      	movs	r3, #128	@ 0x80
 8004fc0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fc2:	4b5a      	ldr	r3, [pc, #360]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 0203 	bic.w	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4957      	ldr	r1, [pc, #348]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd4:	f7fc fe70 	bl	8001cb8 <HAL_GetTick>
 8004fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fdc:	f7fc fe6c 	bl	8001cb8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e095      	b.n	800511e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 020c 	and.w	r2, r3, #12
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	429a      	cmp	r2, r3
 8005002:	d1eb      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d023      	beq.n	8005058 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800501c:	4b43      	ldr	r3, [pc, #268]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	4a42      	ldr	r2, [pc, #264]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8005022:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005026:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005034:	4b3d      	ldr	r3, [pc, #244]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800503c:	4a3b      	ldr	r2, [pc, #236]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 800503e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005042:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005044:	4b39      	ldr	r3, [pc, #228]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4936      	ldr	r1, [pc, #216]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
 8005056:	e008      	b.n	800506a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b80      	cmp	r3, #128	@ 0x80
 800505c:	d105      	bne.n	800506a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800505e:	4b33      	ldr	r3, [pc, #204]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	4a32      	ldr	r2, [pc, #200]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 8005064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005068:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800506a:	4b2f      	ldr	r3, [pc, #188]	@ (8005128 <HAL_RCC_ClockConfig+0x260>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d21d      	bcs.n	80050b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005078:	4b2b      	ldr	r3, [pc, #172]	@ (8005128 <HAL_RCC_ClockConfig+0x260>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 020f 	bic.w	r2, r3, #15
 8005080:	4929      	ldr	r1, [pc, #164]	@ (8005128 <HAL_RCC_ClockConfig+0x260>)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005088:	f7fc fe16 	bl	8001cb8 <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005090:	f7fc fe12 	bl	8001cb8 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e03b      	b.n	800511e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a6:	4b20      	ldr	r3, [pc, #128]	@ (8005128 <HAL_RCC_ClockConfig+0x260>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d1ed      	bne.n	8005090 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050c0:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4917      	ldr	r1, [pc, #92]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050de:	4b13      	ldr	r3, [pc, #76]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	490f      	ldr	r1, [pc, #60]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050f2:	f000 f825 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050f6:	4602      	mov	r2, r0
 80050f8:	4b0c      	ldr	r3, [pc, #48]	@ (800512c <HAL_RCC_ClockConfig+0x264>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	490c      	ldr	r1, [pc, #48]	@ (8005134 <HAL_RCC_ClockConfig+0x26c>)
 8005104:	5ccb      	ldrb	r3, [r1, r3]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	fa22 f303 	lsr.w	r3, r2, r3
 800510e:	4a0a      	ldr	r2, [pc, #40]	@ (8005138 <HAL_RCC_ClockConfig+0x270>)
 8005110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005112:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <HAL_RCC_ClockConfig+0x274>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fc fd82 	bl	8001c20 <HAL_InitTick>
 800511c:	4603      	mov	r3, r0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40022000 	.word	0x40022000
 800512c:	40021000 	.word	0x40021000
 8005130:	04c4b400 	.word	0x04c4b400
 8005134:	0800836c 	.word	0x0800836c
 8005138:	20000004 	.word	0x20000004
 800513c:	2000000c 	.word	0x2000000c

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005146:	4b2c      	ldr	r3, [pc, #176]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	2b04      	cmp	r3, #4
 8005150:	d102      	bne.n	8005158 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005152:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e047      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005158:	4b27      	ldr	r3, [pc, #156]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 030c 	and.w	r3, r3, #12
 8005160:	2b08      	cmp	r3, #8
 8005162:	d102      	bne.n	800516a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005164:	4b25      	ldr	r3, [pc, #148]	@ (80051fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	e03e      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800516a:	4b23      	ldr	r3, [pc, #140]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b0c      	cmp	r3, #12
 8005174:	d136      	bne.n	80051e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005176:	4b20      	ldr	r3, [pc, #128]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005180:	4b1d      	ldr	r3, [pc, #116]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	3301      	adds	r3, #1
 800518c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d10c      	bne.n	80051ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005194:	4a19      	ldr	r2, [pc, #100]	@ (80051fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	4a16      	ldr	r2, [pc, #88]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800519e:	68d2      	ldr	r2, [r2, #12]
 80051a0:	0a12      	lsrs	r2, r2, #8
 80051a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	617b      	str	r3, [r7, #20]
      break;
 80051ac:	e00c      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ae:	4a13      	ldr	r2, [pc, #76]	@ (80051fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	4a10      	ldr	r2, [pc, #64]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b8:	68d2      	ldr	r2, [r2, #12]
 80051ba:	0a12      	lsrs	r2, r2, #8
 80051bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	617b      	str	r3, [r7, #20]
      break;
 80051c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051c8:	4b0b      	ldr	r3, [pc, #44]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	0e5b      	lsrs	r3, r3, #25
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	3301      	adds	r3, #1
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	e001      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051e8:	693b      	ldr	r3, [r7, #16]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000
 80051fc:	00f42400 	.word	0x00f42400

08005200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005204:	4b03      	ldr	r3, [pc, #12]	@ (8005214 <HAL_RCC_GetHCLKFreq+0x14>)
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000004 	.word	0x20000004

08005218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800521c:	f7ff fff0 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4904      	ldr	r1, [pc, #16]	@ (8005240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	0800837c 	.word	0x0800837c

08005244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005248:	f7ff ffda 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	0adb      	lsrs	r3, r3, #11
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <HAL_RCC_GetPCLK2Freq+0x28>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40021000 	.word	0x40021000
 800526c:	0800837c 	.word	0x0800837c

08005270 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005276:	4b1e      	ldr	r3, [pc, #120]	@ (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005280:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d10c      	bne.n	80052ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005294:	4a17      	ldr	r2, [pc, #92]	@ (80052f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	4a14      	ldr	r2, [pc, #80]	@ (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800529e:	68d2      	ldr	r2, [r2, #12]
 80052a0:	0a12      	lsrs	r2, r2, #8
 80052a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	617b      	str	r3, [r7, #20]
    break;
 80052ac:	e00c      	b.n	80052c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ae:	4a11      	ldr	r2, [pc, #68]	@ (80052f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	4a0e      	ldr	r2, [pc, #56]	@ (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052b8:	68d2      	ldr	r2, [r2, #12]
 80052ba:	0a12      	lsrs	r2, r2, #8
 80052bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
 80052c4:	617b      	str	r3, [r7, #20]
    break;
 80052c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052c8:	4b09      	ldr	r3, [pc, #36]	@ (80052f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	0e5b      	lsrs	r3, r3, #25
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	3301      	adds	r3, #1
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80052e2:	687b      	ldr	r3, [r7, #4]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40021000 	.word	0x40021000
 80052f4:	00f42400 	.word	0x00f42400

080052f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005300:	2300      	movs	r3, #0
 8005302:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005304:	2300      	movs	r3, #0
 8005306:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8098 	beq.w	8005446 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531a:	4b43      	ldr	r3, [pc, #268]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005326:	4b40      	ldr	r3, [pc, #256]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	4a3f      	ldr	r2, [pc, #252]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005330:	6593      	str	r3, [r2, #88]	@ 0x58
 8005332:	4b3d      	ldr	r3, [pc, #244]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533a:	60bb      	str	r3, [r7, #8]
 800533c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533e:	2301      	movs	r3, #1
 8005340:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005342:	4b3a      	ldr	r3, [pc, #232]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a39      	ldr	r2, [pc, #228]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800534c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800534e:	f7fc fcb3 	bl	8001cb8 <HAL_GetTick>
 8005352:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005354:	e009      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005356:	f7fc fcaf 	bl	8001cb8 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d902      	bls.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	74fb      	strb	r3, [r7, #19]
        break;
 8005368:	e005      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800536a:	4b30      	ldr	r3, [pc, #192]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0ef      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d159      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800537c:	4b2a      	ldr	r3, [pc, #168]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005386:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01e      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	429a      	cmp	r2, r3
 8005396:	d019      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005398:	4b23      	ldr	r3, [pc, #140]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800539a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053a4:	4b20      	ldr	r3, [pc, #128]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053c4:	4a18      	ldr	r2, [pc, #96]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d016      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fc fc6f 	bl	8001cb8 <HAL_GetTick>
 80053da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053dc:	e00b      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fc fc6b 	bl	8001cb8 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d902      	bls.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	74fb      	strb	r3, [r7, #19]
            break;
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ec      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005404:	7cfb      	ldrb	r3, [r7, #19]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800540a:	4b07      	ldr	r3, [pc, #28]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005418:	4903      	ldr	r1, [pc, #12]	@ (8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005420:	e008      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	74bb      	strb	r3, [r7, #18]
 8005426:	e005      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005428:	40021000 	.word	0x40021000
 800542c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005434:	7c7b      	ldrb	r3, [r7, #17]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543a:	4ba7      	ldr	r3, [pc, #668]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	4aa6      	ldr	r2, [pc, #664]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005444:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005452:	4ba1      	ldr	r3, [pc, #644]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005458:	f023 0203 	bic.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	499d      	ldr	r1, [pc, #628]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005474:	4b98      	ldr	r3, [pc, #608]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	f023 020c 	bic.w	r2, r3, #12
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	4995      	ldr	r1, [pc, #596]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005496:	4b90      	ldr	r3, [pc, #576]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	498c      	ldr	r1, [pc, #560]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054b8:	4b87      	ldr	r3, [pc, #540]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	4984      	ldr	r1, [pc, #528]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054da:	4b7f      	ldr	r3, [pc, #508]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	497b      	ldr	r1, [pc, #492]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054fc:	4b76      	ldr	r3, [pc, #472]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	4973      	ldr	r1, [pc, #460]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800551e:	4b6e      	ldr	r3, [pc, #440]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005524:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	496a      	ldr	r1, [pc, #424]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005540:	4b65      	ldr	r3, [pc, #404]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	4962      	ldr	r1, [pc, #392]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005562:	4b5d      	ldr	r3, [pc, #372]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005568:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	4959      	ldr	r1, [pc, #356]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005584:	4b54      	ldr	r3, [pc, #336]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800558a:	f023 0203 	bic.w	r2, r3, #3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005592:	4951      	ldr	r1, [pc, #324]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055a6:	4b4c      	ldr	r3, [pc, #304]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	4948      	ldr	r1, [pc, #288]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d015      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055c8:	4b43      	ldr	r3, [pc, #268]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	4940      	ldr	r1, [pc, #256]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055e6:	d105      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055e8:	4b3b      	ldr	r3, [pc, #236]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4a3a      	ldr	r2, [pc, #232]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d015      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005600:	4b35      	ldr	r3, [pc, #212]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005606:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800560e:	4932      	ldr	r1, [pc, #200]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800561e:	d105      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005620:	4b2d      	ldr	r3, [pc, #180]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4a2c      	ldr	r2, [pc, #176]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800562a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005638:	4b27      	ldr	r3, [pc, #156]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005646:	4924      	ldr	r1, [pc, #144]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005656:	d105      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005658:	4b1f      	ldr	r3, [pc, #124]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a1e      	ldr	r2, [pc, #120]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005662:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d015      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005670:	4b19      	ldr	r3, [pc, #100]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567e:	4916      	ldr	r1, [pc, #88]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005690:	4b11      	ldr	r3, [pc, #68]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a10      	ldr	r2, [pc, #64]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800569a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d019      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056a8:	4b0b      	ldr	r3, [pc, #44]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	4908      	ldr	r1, [pc, #32]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056c6:	d109      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c8:	4b03      	ldr	r3, [pc, #12]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4a02      	ldr	r2, [pc, #8]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056d2:	60d3      	str	r3, [r2, #12]
 80056d4:	e002      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80056d6:	bf00      	nop
 80056d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d015      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80056e8:	4b29      	ldr	r3, [pc, #164]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	4926      	ldr	r1, [pc, #152]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005706:	d105      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005708:	4b21      	ldr	r3, [pc, #132]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4a20      	ldr	r2, [pc, #128]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800570e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005712:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d015      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005720:	4b1b      	ldr	r3, [pc, #108]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005726:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800572e:	4918      	ldr	r1, [pc, #96]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573e:	d105      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005740:	4b13      	ldr	r3, [pc, #76]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a12      	ldr	r2, [pc, #72]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800574a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d015      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005758:	4b0d      	ldr	r3, [pc, #52]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800575a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800575e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005766:	490a      	ldr	r1, [pc, #40]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005772:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005776:	d105      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005778:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4a04      	ldr	r2, [pc, #16]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800577e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005782:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005784:	7cbb      	ldrb	r3, [r7, #18]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000

08005794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e054      	b.n	8005850 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d111      	bne.n	80057d6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fc92 	bl	80060e4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d102      	bne.n	80057ce <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a23      	ldr	r2, [pc, #140]	@ (8005858 <HAL_TIM_Base_Init+0xc4>)
 80057cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f000 fb2b 	bl	8005e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	080015dd 	.word	0x080015dd

0800585c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d026      	beq.n	80058cc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d021      	beq.n	80058cc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0202 	mvn.w	r2, #2
 8005890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
 80058b0:	e009      	b.n	80058c6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d026      	beq.n	8005924 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d021      	beq.n	8005924 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0204 	mvn.w	r2, #4
 80058e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d005      	beq.n	800590a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
 8005908:	e009      	b.n	800591e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d026      	beq.n	800597c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d021      	beq.n	800597c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0208 	mvn.w	r2, #8
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2204      	movs	r2, #4
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4798      	blx	r3
 8005960:	e009      	b.n	8005976 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	d026      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	d021      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0210 	mvn.w	r2, #16
 8005998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2208      	movs	r2, #8
 800599e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
 80059b8:	e009      	b.n	80059ce <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00e      	beq.n	80059fc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d009      	beq.n	80059fc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0201 	mvn.w	r2, #1
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00e      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00e      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00e      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f06f 0220 	mvn.w	r2, #32
 8005a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00e      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIM_ConfigClockSource+0x1c>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e0f6      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x20a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005b8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6f      	ldr	r2, [pc, #444]	@ (8005d64 <HAL_TIM_ConfigClockSource+0x214>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f000 80c1 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005bac:	4a6d      	ldr	r2, [pc, #436]	@ (8005d64 <HAL_TIM_ConfigClockSource+0x214>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f200 80c6 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bb4:	4a6c      	ldr	r2, [pc, #432]	@ (8005d68 <HAL_TIM_ConfigClockSource+0x218>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	f000 80b9 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8005d68 <HAL_TIM_ConfigClockSource+0x218>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f200 80be 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bc4:	4a69      	ldr	r2, [pc, #420]	@ (8005d6c <HAL_TIM_ConfigClockSource+0x21c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	f000 80b1 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005bcc:	4a67      	ldr	r2, [pc, #412]	@ (8005d6c <HAL_TIM_ConfigClockSource+0x21c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	f200 80b6 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bd4:	4a66      	ldr	r2, [pc, #408]	@ (8005d70 <HAL_TIM_ConfigClockSource+0x220>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	f000 80a9 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005bdc:	4a64      	ldr	r2, [pc, #400]	@ (8005d70 <HAL_TIM_ConfigClockSource+0x220>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	f200 80ae 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005be4:	4a63      	ldr	r2, [pc, #396]	@ (8005d74 <HAL_TIM_ConfigClockSource+0x224>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	f000 80a1 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005bec:	4a61      	ldr	r2, [pc, #388]	@ (8005d74 <HAL_TIM_ConfigClockSource+0x224>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f200 80a6 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf4:	4a60      	ldr	r2, [pc, #384]	@ (8005d78 <HAL_TIM_ConfigClockSource+0x228>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f000 8099 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8005d78 <HAL_TIM_ConfigClockSource+0x228>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f200 809e 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c08:	f000 8091 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005c0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c10:	f200 8096 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c18:	f000 8089 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c20:	f200 808e 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c28:	d03e      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0x158>
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c2e:	f200 8087 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c36:	f000 8086 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x1f6>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3e:	d87f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c40:	2b70      	cmp	r3, #112	@ 0x70
 8005c42:	d01a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x12a>
 8005c44:	2b70      	cmp	r3, #112	@ 0x70
 8005c46:	d87b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c48:	2b60      	cmp	r3, #96	@ 0x60
 8005c4a:	d050      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x19e>
 8005c4c:	2b60      	cmp	r3, #96	@ 0x60
 8005c4e:	d877      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c50:	2b50      	cmp	r3, #80	@ 0x50
 8005c52:	d03c      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0x17e>
 8005c54:	2b50      	cmp	r3, #80	@ 0x50
 8005c56:	d873      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c58:	2b40      	cmp	r3, #64	@ 0x40
 8005c5a:	d058      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x1be>
 8005c5c:	2b40      	cmp	r3, #64	@ 0x40
 8005c5e:	d86f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c60:	2b30      	cmp	r3, #48	@ 0x30
 8005c62:	d064      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005c64:	2b30      	cmp	r3, #48	@ 0x30
 8005c66:	d86b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d060      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d867      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05c      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d05a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x1de>
 8005c78:	e062      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c8a:	f000 fa0b 	bl	80060a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	609a      	str	r2, [r3, #8]
      break;
 8005ca6:	e04f      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb8:	f000 f9f4 	bl	80060a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cca:	609a      	str	r2, [r3, #8]
      break;
 8005ccc:	e03c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 f966 	bl	8005fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2150      	movs	r1, #80	@ 0x50
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f9bf 	bl	800606a <TIM_ITRx_SetConfig>
      break;
 8005cec:	e02c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 f985 	bl	800600a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2160      	movs	r1, #96	@ 0x60
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 f9af 	bl	800606a <TIM_ITRx_SetConfig>
      break;
 8005d0c:	e01c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 f946 	bl	8005fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2140      	movs	r1, #64	@ 0x40
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f99f 	bl	800606a <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e00c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f000 f996 	bl	800606a <TIM_ITRx_SetConfig>
      break;
 8005d3e:	e003      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      break;
 8005d44:	e000      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	00100070 	.word	0x00100070
 8005d68:	00100060 	.word	0x00100060
 8005d6c:	00100050 	.word	0x00100050
 8005d70:	00100040 	.word	0x00100040
 8005d74:	00100030 	.word	0x00100030
 8005d78:	00100020 	.word	0x00100020

08005d7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a4c      	ldr	r2, [pc, #304]	@ (8005f88 <TIM_Base_SetConfig+0x144>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d017      	beq.n	8005e8c <TIM_Base_SetConfig+0x48>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e62:	d013      	beq.n	8005e8c <TIM_Base_SetConfig+0x48>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a49      	ldr	r2, [pc, #292]	@ (8005f8c <TIM_Base_SetConfig+0x148>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00f      	beq.n	8005e8c <TIM_Base_SetConfig+0x48>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a48      	ldr	r2, [pc, #288]	@ (8005f90 <TIM_Base_SetConfig+0x14c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00b      	beq.n	8005e8c <TIM_Base_SetConfig+0x48>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a47      	ldr	r2, [pc, #284]	@ (8005f94 <TIM_Base_SetConfig+0x150>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_Base_SetConfig+0x48>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a46      	ldr	r2, [pc, #280]	@ (8005f98 <TIM_Base_SetConfig+0x154>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0x48>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a45      	ldr	r2, [pc, #276]	@ (8005f9c <TIM_Base_SetConfig+0x158>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a39      	ldr	r2, [pc, #228]	@ (8005f88 <TIM_Base_SetConfig+0x144>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d023      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eac:	d01f      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a36      	ldr	r2, [pc, #216]	@ (8005f8c <TIM_Base_SetConfig+0x148>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01b      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a35      	ldr	r2, [pc, #212]	@ (8005f90 <TIM_Base_SetConfig+0x14c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d017      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a34      	ldr	r2, [pc, #208]	@ (8005f94 <TIM_Base_SetConfig+0x150>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a33      	ldr	r2, [pc, #204]	@ (8005f98 <TIM_Base_SetConfig+0x154>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a33      	ldr	r2, [pc, #204]	@ (8005fa0 <TIM_Base_SetConfig+0x15c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a32      	ldr	r2, [pc, #200]	@ (8005fa4 <TIM_Base_SetConfig+0x160>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a31      	ldr	r2, [pc, #196]	@ (8005fa8 <TIM_Base_SetConfig+0x164>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_Base_SetConfig+0xaa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8005f9c <TIM_Base_SetConfig+0x158>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d108      	bne.n	8005f00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <TIM_Base_SetConfig+0x144>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <TIM_Base_SetConfig+0x110>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f98 <TIM_Base_SetConfig+0x154>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00f      	beq.n	8005f54 <TIM_Base_SetConfig+0x110>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa0 <TIM_Base_SetConfig+0x15c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00b      	beq.n	8005f54 <TIM_Base_SetConfig+0x110>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a19      	ldr	r2, [pc, #100]	@ (8005fa4 <TIM_Base_SetConfig+0x160>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d007      	beq.n	8005f54 <TIM_Base_SetConfig+0x110>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a18      	ldr	r2, [pc, #96]	@ (8005fa8 <TIM_Base_SetConfig+0x164>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_Base_SetConfig+0x110>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a13      	ldr	r2, [pc, #76]	@ (8005f9c <TIM_Base_SetConfig+0x158>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d103      	bne.n	8005f5c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d105      	bne.n	8005f7a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f023 0201 	bic.w	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	611a      	str	r2, [r3, #16]
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40012c00 	.word	0x40012c00
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800
 8005f94:	40000c00 	.word	0x40000c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40015000 	.word	0x40015000
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800

08005fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 030a 	bic.w	r3, r3, #10
 8005fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600a:	b480      	push	{r7}
 800600c:	b087      	sub	sp, #28
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f023 0210 	bic.w	r2, r3, #16
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	031b      	lsls	r3, r3, #12
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006046:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	f043 0307 	orr.w	r3, r3, #7
 8006090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	609a      	str	r2, [r3, #8]
}
 80060d8:	bf00      	nop
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a26      	ldr	r2, [pc, #152]	@ (8006188 <TIM_ResetCallback+0xa4>)
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a25      	ldr	r2, [pc, #148]	@ (800618c <TIM_ResetCallback+0xa8>)
 80060f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a24      	ldr	r2, [pc, #144]	@ (8006190 <TIM_ResetCallback+0xac>)
 8006100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a23      	ldr	r2, [pc, #140]	@ (8006194 <TIM_ResetCallback+0xb0>)
 8006108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a22      	ldr	r2, [pc, #136]	@ (8006198 <TIM_ResetCallback+0xb4>)
 8006110:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a21      	ldr	r2, [pc, #132]	@ (800619c <TIM_ResetCallback+0xb8>)
 8006118:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a20      	ldr	r2, [pc, #128]	@ (80061a0 <TIM_ResetCallback+0xbc>)
 8006120:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a1f      	ldr	r2, [pc, #124]	@ (80061a4 <TIM_ResetCallback+0xc0>)
 8006128:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1e      	ldr	r2, [pc, #120]	@ (80061a8 <TIM_ResetCallback+0xc4>)
 8006130:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a1d      	ldr	r2, [pc, #116]	@ (80061ac <TIM_ResetCallback+0xc8>)
 8006138:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1c      	ldr	r2, [pc, #112]	@ (80061b0 <TIM_ResetCallback+0xcc>)
 8006140:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a1b      	ldr	r2, [pc, #108]	@ (80061b4 <TIM_ResetCallback+0xd0>)
 8006148:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a1a      	ldr	r2, [pc, #104]	@ (80061b8 <TIM_ResetCallback+0xd4>)
 8006150:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a19      	ldr	r2, [pc, #100]	@ (80061bc <TIM_ResetCallback+0xd8>)
 8006158:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a18      	ldr	r2, [pc, #96]	@ (80061c0 <TIM_ResetCallback+0xdc>)
 8006160:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a17      	ldr	r2, [pc, #92]	@ (80061c4 <TIM_ResetCallback+0xe0>)
 8006168:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a16      	ldr	r2, [pc, #88]	@ (80061c8 <TIM_ResetCallback+0xe4>)
 8006170:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a15      	ldr	r2, [pc, #84]	@ (80061cc <TIM_ResetCallback+0xe8>)
 8006178:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	08005d7d 	.word	0x08005d7d
 800618c:	08005d91 	.word	0x08005d91
 8006190:	08005e09 	.word	0x08005e09
 8006194:	08005e1d 	.word	0x08005e1d
 8006198:	08005db9 	.word	0x08005db9
 800619c:	08005dcd 	.word	0x08005dcd
 80061a0:	08005da5 	.word	0x08005da5
 80061a4:	08005de1 	.word	0x08005de1
 80061a8:	08005df5 	.word	0x08005df5
 80061ac:	08005e31 	.word	0x08005e31
 80061b0:	080062fd 	.word	0x080062fd
 80061b4:	08006311 	.word	0x08006311
 80061b8:	08006325 	.word	0x08006325
 80061bc:	08006339 	.word	0x08006339
 80061c0:	0800634d 	.word	0x0800634d
 80061c4:	08006361 	.word	0x08006361
 80061c8:	08006375 	.word	0x08006375
 80061cc:	08006389 	.word	0x08006389

080061d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e074      	b.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a34      	ldr	r2, [pc, #208]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a33      	ldr	r2, [pc, #204]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a31      	ldr	r2, [pc, #196]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d108      	bne.n	8006238 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800622c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a21      	ldr	r2, [pc, #132]	@ (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d022      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006268:	d01d      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d018      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1d      	ldr	r2, [pc, #116]	@ (80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00e      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a15      	ldr	r2, [pc, #84]	@ (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d009      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a18      	ldr	r2, [pc, #96]	@ (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d004      	beq.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a11      	ldr	r2, [pc, #68]	@ (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d10c      	bne.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40012c00 	.word	0x40012c00
 80062e4:	40013400 	.word	0x40013400
 80062e8:	40015000 	.word	0x40015000
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40000c00 	.word	0x40000c00
 80062f8:	40014000 	.word	0x40014000

080062fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e042      	b.n	8006434 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fb f92f 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	@ 0x24
 80063ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fe86 	bl	80070f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb87 	bl	8006b00 <UART_SetConfig>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e01b      	b.n	8006434 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800640a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800641a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 ff05 	bl	800723c <UART_CheckIdleState>
 8006432:	4603      	mov	r3, r0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b0ba      	sub	sp, #232	@ 0xe8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006462:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006466:	f640 030f 	movw	r3, #2063	@ 0x80f
 800646a:	4013      	ands	r3, r2
 800646c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006470:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11b      	bne.n	80064b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d015      	beq.n	80064b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d105      	bne.n	800649c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d009      	beq.n	80064b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8300 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
      }
      return;
 80064ae:	e2fa      	b.n	8006aa6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8123 	beq.w	8006700 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80064be:	4b8d      	ldr	r3, [pc, #564]	@ (80066f4 <HAL_UART_IRQHandler+0x2b8>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80064ca:	4b8b      	ldr	r3, [pc, #556]	@ (80066f8 <HAL_UART_IRQHandler+0x2bc>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8116 	beq.w	8006700 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d011      	beq.n	8006504 <HAL_UART_IRQHandler+0xc8>
 80064e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2201      	movs	r2, #1
 80064f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fa:	f043 0201 	orr.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d011      	beq.n	8006534 <HAL_UART_IRQHandler+0xf8>
 8006510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2202      	movs	r2, #2
 8006522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800652a:	f043 0204 	orr.w	r2, r3, #4
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <HAL_UART_IRQHandler+0x128>
 8006540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2204      	movs	r2, #4
 8006552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655a:	f043 0202 	orr.w	r2, r3, #2
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d017      	beq.n	80065a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800657c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006580:	4b5c      	ldr	r3, [pc, #368]	@ (80066f4 <HAL_UART_IRQHandler+0x2b8>)
 8006582:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2208      	movs	r2, #8
 800658e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006596:	f043 0208 	orr.w	r2, r3, #8
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d012      	beq.n	80065d2 <HAL_UART_IRQHandler+0x196>
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00c      	beq.n	80065d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c8:	f043 0220 	orr.w	r2, r3, #32
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8266 	beq.w	8006aaa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d013      	beq.n	8006612 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d105      	bne.n	8006602 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006618:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b40      	cmp	r3, #64	@ 0x40
 8006628:	d005      	beq.n	8006636 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800662a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800662e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006632:	2b00      	cmp	r3, #0
 8006634:	d054      	beq.n	80066e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 ff17 	bl	800746a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	d146      	bne.n	80066d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006660:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006664:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006676:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800667a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800668e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1d9      	bne.n	800664a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800669c:	2b00      	cmp	r3, #0
 800669e:	d017      	beq.n	80066d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a6:	4a15      	ldr	r2, [pc, #84]	@ (80066fc <HAL_UART_IRQHandler+0x2c0>)
 80066a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd fc48 	bl	8003f46 <HAL_DMA_Abort_IT>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d019      	beq.n	80066f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80066ca:	4610      	mov	r0, r2
 80066cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ce:	e00f      	b.n	80066f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f9ff 	bl	8006ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d6:	e00b      	b.n	80066f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f9fb 	bl	8006ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066de:	e007      	b.n	80066f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f9f7 	bl	8006ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80066ee:	e1dc      	b.n	8006aaa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	bf00      	nop
    return;
 80066f2:	e1da      	b.n	8006aaa <HAL_UART_IRQHandler+0x66e>
 80066f4:	10000001 	.word	0x10000001
 80066f8:	04000120 	.word	0x04000120
 80066fc:	08007537 	.word	0x08007537

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006704:	2b01      	cmp	r3, #1
 8006706:	f040 8170 	bne.w	80069ea <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8169 	beq.w	80069ea <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8162 	beq.w	80069ea <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2210      	movs	r2, #16
 800672c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006738:	2b40      	cmp	r3, #64	@ 0x40
 800673a:	f040 80d8 	bne.w	80068ee <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800674c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 80af 	beq.w	80068b4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800675c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006760:	429a      	cmp	r2, r3
 8006762:	f080 80a7 	bcs.w	80068b4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800676c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 8087 	bne.w	8006892 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006798:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800679c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1da      	bne.n	8006784 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e1      	bne.n	80067ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800681a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800681c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800682e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006830:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006834:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800683c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e3      	bne.n	800680a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800685e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006860:	f023 0310 	bic.w	r3, r3, #16
 8006864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006872:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006874:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006878:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e4      	bne.n	8006850 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688c:	4618      	mov	r0, r3
 800688e:	f7fd fb01 	bl	8003e94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f91b 	bl	8006ae8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80068b2:	e0fc      	b.n	8006aae <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068be:	429a      	cmp	r2, r3
 80068c0:	f040 80f5 	bne.w	8006aae <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	f040 80eb 	bne.w	8006aae <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f8fe 	bl	8006ae8 <HAL_UARTEx_RxEventCallback>
      return;
 80068ec:	e0df      	b.n	8006aae <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80d1 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80cc 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800692e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800693c:	647b      	str	r3, [r7, #68]	@ 0x44
 800693e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800694a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e4      	bne.n	800691a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	623b      	str	r3, [r7, #32]
   return(result);
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006978:	633a      	str	r2, [r7, #48]	@ 0x30
 800697a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800697e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e1      	bne.n	8006950 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f023 0310 	bic.w	r3, r3, #16
 80069b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	69b9      	ldr	r1, [r7, #24]
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	617b      	str	r3, [r7, #20]
   return(result);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e4      	bne.n	80069a0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f880 	bl	8006ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069e8:	e063      	b.n	8006ab2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00e      	beq.n	8006a14 <HAL_UART_IRQHandler+0x5d8>
 80069f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fdcf 	bl	80075b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a12:	e051      	b.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d014      	beq.n	8006a4a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d105      	bne.n	8006a38 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d008      	beq.n	8006a4a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d03a      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	4798      	blx	r3
    }
    return;
 8006a48:	e035      	b.n	8006ab6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d009      	beq.n	8006a6a <HAL_UART_IRQHandler+0x62e>
 8006a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fd79 	bl	800755a <UART_EndTransmit_IT>
    return;
 8006a68:	e026      	b.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <HAL_UART_IRQHandler+0x64e>
 8006a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fda8 	bl	80075d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a88:	e016      	b.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d010      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
 8006a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da0c      	bge.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fd90 	bl	80075c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aa4:	e008      	b.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006aa6:	bf00      	nop
 8006aa8:	e006      	b.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
    return;
 8006aaa:	bf00      	nop
 8006aac:	e004      	b.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006aae:	bf00      	nop
 8006ab0:	e002      	b.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006ab2:	bf00      	nop
 8006ab4:	e000      	b.n	8006ab8 <HAL_UART_IRQHandler+0x67c>
    return;
 8006ab6:	bf00      	nop
  }
}
 8006ab8:	37e8      	adds	r7, #232	@ 0xe8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop

08006ac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b04:	b08c      	sub	sp, #48	@ 0x30
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4baa      	ldr	r3, [pc, #680]	@ (8006dd8 <UART_SetConfig+0x2d8>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a9f      	ldr	r2, [pc, #636]	@ (8006ddc <UART_SetConfig+0x2dc>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d004      	beq.n	8006b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006b76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	6812      	ldr	r2, [r2, #0]
 8006b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b80:	430b      	orrs	r3, r1
 8006b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8a:	f023 010f 	bic.w	r1, r3, #15
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a90      	ldr	r2, [pc, #576]	@ (8006de0 <UART_SetConfig+0x2e0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d125      	bne.n	8006bf0 <UART_SetConfig+0xf0>
 8006ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8006de4 <UART_SetConfig+0x2e4>)
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d81a      	bhi.n	8006be8 <UART_SetConfig+0xe8>
 8006bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb8 <UART_SetConfig+0xb8>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bc9 	.word	0x08006bc9
 8006bbc:	08006bd9 	.word	0x08006bd9
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bce:	e116      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	e112      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bde:	e10e      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be6:	e10a      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bee:	e106      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a7c      	ldr	r2, [pc, #496]	@ (8006de8 <UART_SetConfig+0x2e8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d138      	bne.n	8006c6c <UART_SetConfig+0x16c>
 8006bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8006de4 <UART_SetConfig+0x2e4>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f003 030c 	and.w	r3, r3, #12
 8006c04:	2b0c      	cmp	r3, #12
 8006c06:	d82d      	bhi.n	8006c64 <UART_SetConfig+0x164>
 8006c08:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <UART_SetConfig+0x110>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c45 	.word	0x08006c45
 8006c14:	08006c65 	.word	0x08006c65
 8006c18:	08006c65 	.word	0x08006c65
 8006c1c:	08006c65 	.word	0x08006c65
 8006c20:	08006c55 	.word	0x08006c55
 8006c24:	08006c65 	.word	0x08006c65
 8006c28:	08006c65 	.word	0x08006c65
 8006c2c:	08006c65 	.word	0x08006c65
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	08006c65 	.word	0x08006c65
 8006c40:	08006c5d 	.word	0x08006c5d
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	e0d8      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c52:	e0d4      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006c54:	2304      	movs	r3, #4
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5a:	e0d0      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	e0cc      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006c64:	2310      	movs	r3, #16
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6a:	e0c8      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a5e      	ldr	r2, [pc, #376]	@ (8006dec <UART_SetConfig+0x2ec>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d125      	bne.n	8006cc2 <UART_SetConfig+0x1c2>
 8006c76:	4b5b      	ldr	r3, [pc, #364]	@ (8006de4 <UART_SetConfig+0x2e4>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c80:	2b30      	cmp	r3, #48	@ 0x30
 8006c82:	d016      	beq.n	8006cb2 <UART_SetConfig+0x1b2>
 8006c84:	2b30      	cmp	r3, #48	@ 0x30
 8006c86:	d818      	bhi.n	8006cba <UART_SetConfig+0x1ba>
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d00a      	beq.n	8006ca2 <UART_SetConfig+0x1a2>
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d814      	bhi.n	8006cba <UART_SetConfig+0x1ba>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <UART_SetConfig+0x19a>
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d008      	beq.n	8006caa <UART_SetConfig+0x1aa>
 8006c98:	e00f      	b.n	8006cba <UART_SetConfig+0x1ba>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca0:	e0ad      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca8:	e0a9      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006caa:	2304      	movs	r3, #4
 8006cac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb0:	e0a5      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb8:	e0a1      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006cba:	2310      	movs	r3, #16
 8006cbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc0:	e09d      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a4a      	ldr	r2, [pc, #296]	@ (8006df0 <UART_SetConfig+0x2f0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d125      	bne.n	8006d18 <UART_SetConfig+0x218>
 8006ccc:	4b45      	ldr	r3, [pc, #276]	@ (8006de4 <UART_SetConfig+0x2e4>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cd8:	d016      	beq.n	8006d08 <UART_SetConfig+0x208>
 8006cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cdc:	d818      	bhi.n	8006d10 <UART_SetConfig+0x210>
 8006cde:	2b80      	cmp	r3, #128	@ 0x80
 8006ce0:	d00a      	beq.n	8006cf8 <UART_SetConfig+0x1f8>
 8006ce2:	2b80      	cmp	r3, #128	@ 0x80
 8006ce4:	d814      	bhi.n	8006d10 <UART_SetConfig+0x210>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <UART_SetConfig+0x1f0>
 8006cea:	2b40      	cmp	r3, #64	@ 0x40
 8006cec:	d008      	beq.n	8006d00 <UART_SetConfig+0x200>
 8006cee:	e00f      	b.n	8006d10 <UART_SetConfig+0x210>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cf6:	e082      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cfe:	e07e      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d00:	2304      	movs	r3, #4
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d06:	e07a      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d08:	2308      	movs	r3, #8
 8006d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0e:	e076      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d10:	2310      	movs	r3, #16
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d16:	e072      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a35      	ldr	r2, [pc, #212]	@ (8006df4 <UART_SetConfig+0x2f4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d12a      	bne.n	8006d78 <UART_SetConfig+0x278>
 8006d22:	4b30      	ldr	r3, [pc, #192]	@ (8006de4 <UART_SetConfig+0x2e4>)
 8006d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d30:	d01a      	beq.n	8006d68 <UART_SetConfig+0x268>
 8006d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d36:	d81b      	bhi.n	8006d70 <UART_SetConfig+0x270>
 8006d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d3c:	d00c      	beq.n	8006d58 <UART_SetConfig+0x258>
 8006d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d42:	d815      	bhi.n	8006d70 <UART_SetConfig+0x270>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <UART_SetConfig+0x250>
 8006d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d4c:	d008      	beq.n	8006d60 <UART_SetConfig+0x260>
 8006d4e:	e00f      	b.n	8006d70 <UART_SetConfig+0x270>
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d56:	e052      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d5e:	e04e      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d60:	2304      	movs	r3, #4
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d66:	e04a      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d68:	2308      	movs	r3, #8
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d6e:	e046      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d76:	e042      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a17      	ldr	r2, [pc, #92]	@ (8006ddc <UART_SetConfig+0x2dc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d13a      	bne.n	8006df8 <UART_SetConfig+0x2f8>
 8006d82:	4b18      	ldr	r3, [pc, #96]	@ (8006de4 <UART_SetConfig+0x2e4>)
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d90:	d01a      	beq.n	8006dc8 <UART_SetConfig+0x2c8>
 8006d92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d96:	d81b      	bhi.n	8006dd0 <UART_SetConfig+0x2d0>
 8006d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d9c:	d00c      	beq.n	8006db8 <UART_SetConfig+0x2b8>
 8006d9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006da2:	d815      	bhi.n	8006dd0 <UART_SetConfig+0x2d0>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <UART_SetConfig+0x2b0>
 8006da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dac:	d008      	beq.n	8006dc0 <UART_SetConfig+0x2c0>
 8006dae:	e00f      	b.n	8006dd0 <UART_SetConfig+0x2d0>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db6:	e022      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006db8:	2302      	movs	r3, #2
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	e01e      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006dc0:	2304      	movs	r3, #4
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc6:	e01a      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dce:	e016      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd6:	e012      	b.n	8006dfe <UART_SetConfig+0x2fe>
 8006dd8:	cfff69f3 	.word	0xcfff69f3
 8006ddc:	40008000 	.word	0x40008000
 8006de0:	40013800 	.word	0x40013800
 8006de4:	40021000 	.word	0x40021000
 8006de8:	40004400 	.word	0x40004400
 8006dec:	40004800 	.word	0x40004800
 8006df0:	40004c00 	.word	0x40004c00
 8006df4:	40005000 	.word	0x40005000
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4aae      	ldr	r2, [pc, #696]	@ (80070bc <UART_SetConfig+0x5bc>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	f040 8097 	bne.w	8006f38 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d823      	bhi.n	8006e5a <UART_SetConfig+0x35a>
 8006e12:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <UART_SetConfig+0x318>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e5b 	.word	0x08006e5b
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e5b 	.word	0x08006e5b
 8006e28:	08006e4b 	.word	0x08006e4b
 8006e2c:	08006e5b 	.word	0x08006e5b
 8006e30:	08006e5b 	.word	0x08006e5b
 8006e34:	08006e5b 	.word	0x08006e5b
 8006e38:	08006e53 	.word	0x08006e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e3c:	f7fe f9ec 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8006e40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e42:	e010      	b.n	8006e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e44:	4b9e      	ldr	r3, [pc, #632]	@ (80070c0 <UART_SetConfig+0x5c0>)
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e48:	e00d      	b.n	8006e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e4a:	f7fe f979 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8006e4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e50:	e009      	b.n	8006e66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e58:	e005      	b.n	8006e66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 8130 	beq.w	80070ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	4a94      	ldr	r2, [pc, #592]	@ (80070c4 <UART_SetConfig+0x5c4>)
 8006e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d305      	bcc.n	8006e9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d903      	bls.n	8006ea6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ea4:	e113      	b.n	80070ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	60bb      	str	r3, [r7, #8]
 8006eac:	60fa      	str	r2, [r7, #12]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb2:	4a84      	ldr	r2, [pc, #528]	@ (80070c4 <UART_SetConfig+0x5c4>)
 8006eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2200      	movs	r2, #0
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ec8:	f7f9 f9a6 	bl	8000218 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	020b      	lsls	r3, r1, #8
 8006ede:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ee2:	0202      	lsls	r2, r0, #8
 8006ee4:	6979      	ldr	r1, [r7, #20]
 8006ee6:	6849      	ldr	r1, [r1, #4]
 8006ee8:	0849      	lsrs	r1, r1, #1
 8006eea:	2000      	movs	r0, #0
 8006eec:	460c      	mov	r4, r1
 8006eee:	4605      	mov	r5, r0
 8006ef0:	eb12 0804 	adds.w	r8, r2, r4
 8006ef4:	eb43 0905 	adc.w	r9, r3, r5
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	469a      	mov	sl, r3
 8006f00:	4693      	mov	fp, r2
 8006f02:	4652      	mov	r2, sl
 8006f04:	465b      	mov	r3, fp
 8006f06:	4640      	mov	r0, r8
 8006f08:	4649      	mov	r1, r9
 8006f0a:	f7f9 f985 	bl	8000218 <__aeabi_uldivmod>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4613      	mov	r3, r2
 8006f14:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f1c:	d308      	bcc.n	8006f30 <UART_SetConfig+0x430>
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f24:	d204      	bcs.n	8006f30 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6a3a      	ldr	r2, [r7, #32]
 8006f2c:	60da      	str	r2, [r3, #12]
 8006f2e:	e0ce      	b.n	80070ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f36:	e0ca      	b.n	80070ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f40:	d166      	bne.n	8007010 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006f42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d827      	bhi.n	8006f9a <UART_SetConfig+0x49a>
 8006f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f50 <UART_SetConfig+0x450>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	08006f9b 	.word	0x08006f9b
 8006f60:	08006f8b 	.word	0x08006f8b
 8006f64:	08006f9b 	.word	0x08006f9b
 8006f68:	08006f9b 	.word	0x08006f9b
 8006f6c:	08006f9b 	.word	0x08006f9b
 8006f70:	08006f93 	.word	0x08006f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f74:	f7fe f950 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8006f78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f7a:	e014      	b.n	8006fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fe f962 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 8006f80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f82:	e010      	b.n	8006fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f84:	4b4e      	ldr	r3, [pc, #312]	@ (80070c0 <UART_SetConfig+0x5c0>)
 8006f86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f88:	e00d      	b.n	8006fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8a:	f7fe f8d9 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 8006f8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f90:	e009      	b.n	8006fa6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f98:	e005      	b.n	8006fa6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006fa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 8090 	beq.w	80070ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	4a44      	ldr	r2, [pc, #272]	@ (80070c4 <UART_SetConfig+0x5c4>)
 8006fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc0:	005a      	lsls	r2, r3, #1
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	441a      	add	r2, r3
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	2b0f      	cmp	r3, #15
 8006fd8:	d916      	bls.n	8007008 <UART_SetConfig+0x508>
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe0:	d212      	bcs.n	8007008 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f023 030f 	bic.w	r3, r3, #15
 8006fea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	085b      	lsrs	r3, r3, #1
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	8bfb      	ldrh	r3, [r7, #30]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	8bfa      	ldrh	r2, [r7, #30]
 8007004:	60da      	str	r2, [r3, #12]
 8007006:	e062      	b.n	80070ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800700e:	e05e      	b.n	80070ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007010:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007014:	2b08      	cmp	r3, #8
 8007016:	d828      	bhi.n	800706a <UART_SetConfig+0x56a>
 8007018:	a201      	add	r2, pc, #4	@ (adr r2, 8007020 <UART_SetConfig+0x520>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007045 	.word	0x08007045
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007055 	.word	0x08007055
 800702c:	0800706b 	.word	0x0800706b
 8007030:	0800705b 	.word	0x0800705b
 8007034:	0800706b 	.word	0x0800706b
 8007038:	0800706b 	.word	0x0800706b
 800703c:	0800706b 	.word	0x0800706b
 8007040:	08007063 	.word	0x08007063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007044:	f7fe f8e8 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8007048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800704a:	e014      	b.n	8007076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800704c:	f7fe f8fa 	bl	8005244 <HAL_RCC_GetPCLK2Freq>
 8007050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007052:	e010      	b.n	8007076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007054:	4b1a      	ldr	r3, [pc, #104]	@ (80070c0 <UART_SetConfig+0x5c0>)
 8007056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007058:	e00d      	b.n	8007076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705a:	f7fe f871 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 800705e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007060:	e009      	b.n	8007076 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007068:	e005      	b.n	8007076 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007074:	bf00      	nop
    }

    if (pclk != 0U)
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d028      	beq.n	80070ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007080:	4a10      	ldr	r2, [pc, #64]	@ (80070c4 <UART_SetConfig+0x5c4>)
 8007082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007086:	461a      	mov	r2, r3
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	fbb3 f2f2 	udiv	r2, r3, r2
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	085b      	lsrs	r3, r3, #1
 8007094:	441a      	add	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	2b0f      	cmp	r3, #15
 80070a4:	d910      	bls.n	80070c8 <UART_SetConfig+0x5c8>
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ac:	d20c      	bcs.n	80070c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60da      	str	r2, [r3, #12]
 80070b8:	e009      	b.n	80070ce <UART_SetConfig+0x5ce>
 80070ba:	bf00      	nop
 80070bc:	40008000 	.word	0x40008000
 80070c0:	00f42400 	.word	0x00f42400
 80070c4:	08008384 	.word	0x08008384
      }
      else
      {
        ret = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2201      	movs	r2, #1
 80070da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2200      	movs	r2, #0
 80070e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2200      	movs	r2, #0
 80070e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80070ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3730      	adds	r7, #48	@ 0x30
 80070f2:	46bd      	mov	sp, r7
 80070f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080070f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01a      	beq.n	800720e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f6:	d10a      	bne.n	800720e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]
  }
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b098      	sub	sp, #96	@ 0x60
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800724c:	f7fa fd34 	bl	8001cb8 <HAL_GetTick>
 8007250:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d12f      	bne.n	80072c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007268:	2200      	movs	r2, #0
 800726a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f88e 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d022      	beq.n	80072c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800728e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007298:	647b      	str	r3, [r7, #68]	@ 0x44
 800729a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800729e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e6      	bne.n	800727a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e063      	b.n	8007388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d149      	bne.n	8007362 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d6:	2200      	movs	r2, #0
 80072d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f857 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d03c      	beq.n	8007362 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	623b      	str	r3, [r7, #32]
   return(result);
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007306:	633b      	str	r3, [r7, #48]	@ 0x30
 8007308:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800730c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	60fb      	str	r3, [r7, #12]
   return(result);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800733a:	61fa      	str	r2, [r7, #28]
 800733c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	69b9      	ldr	r1, [r7, #24]
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	617b      	str	r3, [r7, #20]
   return(result);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e012      	b.n	8007388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3758      	adds	r7, #88	@ 0x58
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a0:	e04f      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d04b      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073aa:	f7fa fc85 	bl	8001cb8 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d302      	bcc.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e04e      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d037      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b80      	cmp	r3, #128	@ 0x80
 80073d6:	d034      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d031      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d110      	bne.n	800740e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2208      	movs	r2, #8
 80073f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f838 	bl	800746a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2208      	movs	r2, #8
 80073fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e029      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800741c:	d111      	bne.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f81e 	bl	800746a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e00f      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4013      	ands	r3, r2
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	bf0c      	ite	eq
 8007452:	2301      	moveq	r3, #1
 8007454:	2300      	movne	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	429a      	cmp	r2, r3
 800745e:	d0a0      	beq.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800746a:	b480      	push	{r7}
 800746c:	b095      	sub	sp, #84	@ 0x54
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007490:	643b      	str	r3, [r7, #64]	@ 0x40
 8007492:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007496:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800749e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e6      	bne.n	8007472 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3308      	adds	r3, #8
 80074aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ba:	f023 0301 	bic.w	r3, r3, #1
 80074be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3308      	adds	r3, #8
 80074c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074d0:	e841 2300 	strex	r3, r2, [r1]
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e3      	bne.n	80074a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d118      	bne.n	8007516 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f023 0310 	bic.w	r3, r3, #16
 80074f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	613b      	str	r3, [r7, #16]
   return(result);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800752a:	bf00      	nop
 800752c:	3754      	adds	r7, #84	@ 0x54
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fac1 	bl	8006ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b088      	sub	sp, #32
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6979      	ldr	r1, [r7, #20]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	613b      	str	r3, [r7, #16]
   return(result);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e6      	bne.n	8007562 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff fa8c 	bl	8006ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a8:	bf00      	nop
 80075aa:	3720      	adds	r7, #32
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_UARTEx_EnableFifoMode+0x16>
 80075fe:	2302      	movs	r3, #2
 8007600:	e02b      	b.n	800765a <HAL_UARTEx_EnableFifoMode+0x6e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2224      	movs	r2, #36	@ 0x24
 800760e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007630:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007638:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f88a 	bl	800775c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007672:	2b01      	cmp	r3, #1
 8007674:	d101      	bne.n	800767a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007676:	2302      	movs	r3, #2
 8007678:	e02d      	b.n	80076d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2224      	movs	r2, #36	@ 0x24
 8007686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f850 	bl	800775c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e02d      	b.n	8007752 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2224      	movs	r2, #36	@ 0x24
 8007702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 0201 	bic.w	r2, r2, #1
 800771c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f812 	bl	800775c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007768:	2b00      	cmp	r3, #0
 800776a:	d108      	bne.n	800777e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800777c:	e031      	b.n	80077e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800777e:	2308      	movs	r3, #8
 8007780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007782:	2308      	movs	r3, #8
 8007784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	0e5b      	lsrs	r3, r3, #25
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0307 	and.w	r3, r3, #7
 8007794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	0f5b      	lsrs	r3, r3, #29
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	7b3a      	ldrb	r2, [r7, #12]
 80077aa:	4911      	ldr	r1, [pc, #68]	@ (80077f0 <UARTEx_SetNbDataToProcess+0x94>)
 80077ac:	5c8a      	ldrb	r2, [r1, r2]
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077b2:	7b3a      	ldrb	r2, [r7, #12]
 80077b4:	490f      	ldr	r1, [pc, #60]	@ (80077f4 <UARTEx_SetNbDataToProcess+0x98>)
 80077b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80077bc:	b29a      	uxth	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	7b7a      	ldrb	r2, [r7, #13]
 80077c8:	4909      	ldr	r1, [pc, #36]	@ (80077f0 <UARTEx_SetNbDataToProcess+0x94>)
 80077ca:	5c8a      	ldrb	r2, [r1, r2]
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077d0:	7b7a      	ldrb	r2, [r7, #13]
 80077d2:	4908      	ldr	r1, [pc, #32]	@ (80077f4 <UARTEx_SetNbDataToProcess+0x98>)
 80077d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80077da:	b29a      	uxth	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80077e2:	bf00      	nop
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	0800839c 	.word	0x0800839c
 80077f4:	080083a4 	.word	0x080083a4

080077f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007800:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007804:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	b29b      	uxth	r3, r3
 8007812:	43db      	mvns	r3, r3
 8007814:	b29b      	uxth	r3, r3
 8007816:	4013      	ands	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800782e:	b480      	push	{r7}
 8007830:	b085      	sub	sp, #20
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	1d3b      	adds	r3, r7, #4
 8007838:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <std>:
 800786c:	2300      	movs	r3, #0
 800786e:	b510      	push	{r4, lr}
 8007870:	4604      	mov	r4, r0
 8007872:	e9c0 3300 	strd	r3, r3, [r0]
 8007876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800787a:	6083      	str	r3, [r0, #8]
 800787c:	8181      	strh	r1, [r0, #12]
 800787e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007880:	81c2      	strh	r2, [r0, #14]
 8007882:	6183      	str	r3, [r0, #24]
 8007884:	4619      	mov	r1, r3
 8007886:	2208      	movs	r2, #8
 8007888:	305c      	adds	r0, #92	@ 0x5c
 800788a:	f000 f9e3 	bl	8007c54 <memset>
 800788e:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <std+0x58>)
 8007890:	6263      	str	r3, [r4, #36]	@ 0x24
 8007892:	4b0d      	ldr	r3, [pc, #52]	@ (80078c8 <std+0x5c>)
 8007894:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007896:	4b0d      	ldr	r3, [pc, #52]	@ (80078cc <std+0x60>)
 8007898:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800789a:	4b0d      	ldr	r3, [pc, #52]	@ (80078d0 <std+0x64>)
 800789c:	6323      	str	r3, [r4, #48]	@ 0x30
 800789e:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <std+0x68>)
 80078a0:	6224      	str	r4, [r4, #32]
 80078a2:	429c      	cmp	r4, r3
 80078a4:	d006      	beq.n	80078b4 <std+0x48>
 80078a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078aa:	4294      	cmp	r4, r2
 80078ac:	d002      	beq.n	80078b4 <std+0x48>
 80078ae:	33d0      	adds	r3, #208	@ 0xd0
 80078b0:	429c      	cmp	r4, r3
 80078b2:	d105      	bne.n	80078c0 <std+0x54>
 80078b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078bc:	f000 ba42 	b.w	8007d44 <__retarget_lock_init_recursive>
 80078c0:	bd10      	pop	{r4, pc}
 80078c2:	bf00      	nop
 80078c4:	08007aa5 	.word	0x08007aa5
 80078c8:	08007ac7 	.word	0x08007ac7
 80078cc:	08007aff 	.word	0x08007aff
 80078d0:	08007b23 	.word	0x08007b23
 80078d4:	200008f8 	.word	0x200008f8

080078d8 <stdio_exit_handler>:
 80078d8:	4a02      	ldr	r2, [pc, #8]	@ (80078e4 <stdio_exit_handler+0xc>)
 80078da:	4903      	ldr	r1, [pc, #12]	@ (80078e8 <stdio_exit_handler+0x10>)
 80078dc:	4803      	ldr	r0, [pc, #12]	@ (80078ec <stdio_exit_handler+0x14>)
 80078de:	f000 b869 	b.w	80079b4 <_fwalk_sglue>
 80078e2:	bf00      	nop
 80078e4:	20000014 	.word	0x20000014
 80078e8:	08008045 	.word	0x08008045
 80078ec:	20000024 	.word	0x20000024

080078f0 <cleanup_stdio>:
 80078f0:	6841      	ldr	r1, [r0, #4]
 80078f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007924 <cleanup_stdio+0x34>)
 80078f4:	4299      	cmp	r1, r3
 80078f6:	b510      	push	{r4, lr}
 80078f8:	4604      	mov	r4, r0
 80078fa:	d001      	beq.n	8007900 <cleanup_stdio+0x10>
 80078fc:	f000 fba2 	bl	8008044 <_fflush_r>
 8007900:	68a1      	ldr	r1, [r4, #8]
 8007902:	4b09      	ldr	r3, [pc, #36]	@ (8007928 <cleanup_stdio+0x38>)
 8007904:	4299      	cmp	r1, r3
 8007906:	d002      	beq.n	800790e <cleanup_stdio+0x1e>
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fb9b 	bl	8008044 <_fflush_r>
 800790e:	68e1      	ldr	r1, [r4, #12]
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <cleanup_stdio+0x3c>)
 8007912:	4299      	cmp	r1, r3
 8007914:	d004      	beq.n	8007920 <cleanup_stdio+0x30>
 8007916:	4620      	mov	r0, r4
 8007918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800791c:	f000 bb92 	b.w	8008044 <_fflush_r>
 8007920:	bd10      	pop	{r4, pc}
 8007922:	bf00      	nop
 8007924:	200008f8 	.word	0x200008f8
 8007928:	20000960 	.word	0x20000960
 800792c:	200009c8 	.word	0x200009c8

08007930 <global_stdio_init.part.0>:
 8007930:	b510      	push	{r4, lr}
 8007932:	4b0b      	ldr	r3, [pc, #44]	@ (8007960 <global_stdio_init.part.0+0x30>)
 8007934:	4c0b      	ldr	r4, [pc, #44]	@ (8007964 <global_stdio_init.part.0+0x34>)
 8007936:	4a0c      	ldr	r2, [pc, #48]	@ (8007968 <global_stdio_init.part.0+0x38>)
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	4620      	mov	r0, r4
 800793c:	2200      	movs	r2, #0
 800793e:	2104      	movs	r1, #4
 8007940:	f7ff ff94 	bl	800786c <std>
 8007944:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007948:	2201      	movs	r2, #1
 800794a:	2109      	movs	r1, #9
 800794c:	f7ff ff8e 	bl	800786c <std>
 8007950:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007954:	2202      	movs	r2, #2
 8007956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800795a:	2112      	movs	r1, #18
 800795c:	f7ff bf86 	b.w	800786c <std>
 8007960:	20000a30 	.word	0x20000a30
 8007964:	200008f8 	.word	0x200008f8
 8007968:	080078d9 	.word	0x080078d9

0800796c <__sfp_lock_acquire>:
 800796c:	4801      	ldr	r0, [pc, #4]	@ (8007974 <__sfp_lock_acquire+0x8>)
 800796e:	f000 b9ea 	b.w	8007d46 <__retarget_lock_acquire_recursive>
 8007972:	bf00      	nop
 8007974:	20000a39 	.word	0x20000a39

08007978 <__sfp_lock_release>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__sfp_lock_release+0x8>)
 800797a:	f000 b9e5 	b.w	8007d48 <__retarget_lock_release_recursive>
 800797e:	bf00      	nop
 8007980:	20000a39 	.word	0x20000a39

08007984 <__sinit>:
 8007984:	b510      	push	{r4, lr}
 8007986:	4604      	mov	r4, r0
 8007988:	f7ff fff0 	bl	800796c <__sfp_lock_acquire>
 800798c:	6a23      	ldr	r3, [r4, #32]
 800798e:	b11b      	cbz	r3, 8007998 <__sinit+0x14>
 8007990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007994:	f7ff bff0 	b.w	8007978 <__sfp_lock_release>
 8007998:	4b04      	ldr	r3, [pc, #16]	@ (80079ac <__sinit+0x28>)
 800799a:	6223      	str	r3, [r4, #32]
 800799c:	4b04      	ldr	r3, [pc, #16]	@ (80079b0 <__sinit+0x2c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1f5      	bne.n	8007990 <__sinit+0xc>
 80079a4:	f7ff ffc4 	bl	8007930 <global_stdio_init.part.0>
 80079a8:	e7f2      	b.n	8007990 <__sinit+0xc>
 80079aa:	bf00      	nop
 80079ac:	080078f1 	.word	0x080078f1
 80079b0:	20000a30 	.word	0x20000a30

080079b4 <_fwalk_sglue>:
 80079b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b8:	4607      	mov	r7, r0
 80079ba:	4688      	mov	r8, r1
 80079bc:	4614      	mov	r4, r2
 80079be:	2600      	movs	r6, #0
 80079c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079c4:	f1b9 0901 	subs.w	r9, r9, #1
 80079c8:	d505      	bpl.n	80079d6 <_fwalk_sglue+0x22>
 80079ca:	6824      	ldr	r4, [r4, #0]
 80079cc:	2c00      	cmp	r4, #0
 80079ce:	d1f7      	bne.n	80079c0 <_fwalk_sglue+0xc>
 80079d0:	4630      	mov	r0, r6
 80079d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d6:	89ab      	ldrh	r3, [r5, #12]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d907      	bls.n	80079ec <_fwalk_sglue+0x38>
 80079dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079e0:	3301      	adds	r3, #1
 80079e2:	d003      	beq.n	80079ec <_fwalk_sglue+0x38>
 80079e4:	4629      	mov	r1, r5
 80079e6:	4638      	mov	r0, r7
 80079e8:	47c0      	blx	r8
 80079ea:	4306      	orrs	r6, r0
 80079ec:	3568      	adds	r5, #104	@ 0x68
 80079ee:	e7e9      	b.n	80079c4 <_fwalk_sglue+0x10>

080079f0 <_fwrite_r>:
 80079f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f4:	9c08      	ldr	r4, [sp, #32]
 80079f6:	468a      	mov	sl, r1
 80079f8:	4690      	mov	r8, r2
 80079fa:	fb02 f903 	mul.w	r9, r2, r3
 80079fe:	4606      	mov	r6, r0
 8007a00:	b118      	cbz	r0, 8007a0a <_fwrite_r+0x1a>
 8007a02:	6a03      	ldr	r3, [r0, #32]
 8007a04:	b90b      	cbnz	r3, 8007a0a <_fwrite_r+0x1a>
 8007a06:	f7ff ffbd 	bl	8007984 <__sinit>
 8007a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a0c:	07dd      	lsls	r5, r3, #31
 8007a0e:	d405      	bmi.n	8007a1c <_fwrite_r+0x2c>
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	0598      	lsls	r0, r3, #22
 8007a14:	d402      	bmi.n	8007a1c <_fwrite_r+0x2c>
 8007a16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a18:	f000 f995 	bl	8007d46 <__retarget_lock_acquire_recursive>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	0719      	lsls	r1, r3, #28
 8007a20:	d516      	bpl.n	8007a50 <_fwrite_r+0x60>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	b1a3      	cbz	r3, 8007a50 <_fwrite_r+0x60>
 8007a26:	2500      	movs	r5, #0
 8007a28:	454d      	cmp	r5, r9
 8007a2a:	d01f      	beq.n	8007a6c <_fwrite_r+0x7c>
 8007a2c:	68a7      	ldr	r7, [r4, #8]
 8007a2e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8007a32:	3f01      	subs	r7, #1
 8007a34:	2f00      	cmp	r7, #0
 8007a36:	60a7      	str	r7, [r4, #8]
 8007a38:	da04      	bge.n	8007a44 <_fwrite_r+0x54>
 8007a3a:	69a3      	ldr	r3, [r4, #24]
 8007a3c:	429f      	cmp	r7, r3
 8007a3e:	db0f      	blt.n	8007a60 <_fwrite_r+0x70>
 8007a40:	290a      	cmp	r1, #10
 8007a42:	d00d      	beq.n	8007a60 <_fwrite_r+0x70>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	6022      	str	r2, [r4, #0]
 8007a4a:	7019      	strb	r1, [r3, #0]
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	e7eb      	b.n	8007a28 <_fwrite_r+0x38>
 8007a50:	4621      	mov	r1, r4
 8007a52:	4630      	mov	r0, r6
 8007a54:	f000 f8a8 	bl	8007ba8 <__swsetup_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d0e4      	beq.n	8007a26 <_fwrite_r+0x36>
 8007a5c:	2500      	movs	r5, #0
 8007a5e:	e005      	b.n	8007a6c <_fwrite_r+0x7c>
 8007a60:	4622      	mov	r2, r4
 8007a62:	4630      	mov	r0, r6
 8007a64:	f000 f861 	bl	8007b2a <__swbuf_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d1ef      	bne.n	8007a4c <_fwrite_r+0x5c>
 8007a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a6e:	07da      	lsls	r2, r3, #31
 8007a70:	d405      	bmi.n	8007a7e <_fwrite_r+0x8e>
 8007a72:	89a3      	ldrh	r3, [r4, #12]
 8007a74:	059b      	lsls	r3, r3, #22
 8007a76:	d402      	bmi.n	8007a7e <_fwrite_r+0x8e>
 8007a78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a7a:	f000 f965 	bl	8007d48 <__retarget_lock_release_recursive>
 8007a7e:	fbb5 f0f8 	udiv	r0, r5, r8
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007a88 <fwrite>:
 8007a88:	b507      	push	{r0, r1, r2, lr}
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	460a      	mov	r2, r1
 8007a90:	4601      	mov	r1, r0
 8007a92:	4803      	ldr	r0, [pc, #12]	@ (8007aa0 <fwrite+0x18>)
 8007a94:	6800      	ldr	r0, [r0, #0]
 8007a96:	f7ff ffab 	bl	80079f0 <_fwrite_r>
 8007a9a:	b003      	add	sp, #12
 8007a9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007aa0:	20000020 	.word	0x20000020

08007aa4 <__sread>:
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aac:	f000 f8fc 	bl	8007ca8 <_read_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	bfab      	itete	ge
 8007ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab8:	181b      	addge	r3, r3, r0
 8007aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007abe:	bfac      	ite	ge
 8007ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ac2:	81a3      	strhlt	r3, [r4, #12]
 8007ac4:	bd10      	pop	{r4, pc}

08007ac6 <__swrite>:
 8007ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	461f      	mov	r7, r3
 8007acc:	898b      	ldrh	r3, [r1, #12]
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	d505      	bpl.n	8007ae4 <__swrite+0x1e>
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	2302      	movs	r3, #2
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f000 f8d0 	bl	8007c84 <_lseek_r>
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007aee:	81a3      	strh	r3, [r4, #12]
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007afa:	f000 b8e7 	b.w	8007ccc <_write_r>

08007afe <__sseek>:
 8007afe:	b510      	push	{r4, lr}
 8007b00:	460c      	mov	r4, r1
 8007b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b06:	f000 f8bd 	bl	8007c84 <_lseek_r>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	bf15      	itete	ne
 8007b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b1a:	81a3      	strheq	r3, [r4, #12]
 8007b1c:	bf18      	it	ne
 8007b1e:	81a3      	strhne	r3, [r4, #12]
 8007b20:	bd10      	pop	{r4, pc}

08007b22 <__sclose>:
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 b89d 	b.w	8007c64 <_close_r>

08007b2a <__swbuf_r>:
 8007b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2c:	460e      	mov	r6, r1
 8007b2e:	4614      	mov	r4, r2
 8007b30:	4605      	mov	r5, r0
 8007b32:	b118      	cbz	r0, 8007b3c <__swbuf_r+0x12>
 8007b34:	6a03      	ldr	r3, [r0, #32]
 8007b36:	b90b      	cbnz	r3, 8007b3c <__swbuf_r+0x12>
 8007b38:	f7ff ff24 	bl	8007984 <__sinit>
 8007b3c:	69a3      	ldr	r3, [r4, #24]
 8007b3e:	60a3      	str	r3, [r4, #8]
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	071a      	lsls	r2, r3, #28
 8007b44:	d501      	bpl.n	8007b4a <__swbuf_r+0x20>
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	b943      	cbnz	r3, 8007b5c <__swbuf_r+0x32>
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f000 f82b 	bl	8007ba8 <__swsetup_r>
 8007b52:	b118      	cbz	r0, 8007b5c <__swbuf_r+0x32>
 8007b54:	f04f 37ff 	mov.w	r7, #4294967295
 8007b58:	4638      	mov	r0, r7
 8007b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	6922      	ldr	r2, [r4, #16]
 8007b60:	1a98      	subs	r0, r3, r2
 8007b62:	6963      	ldr	r3, [r4, #20]
 8007b64:	b2f6      	uxtb	r6, r6
 8007b66:	4283      	cmp	r3, r0
 8007b68:	4637      	mov	r7, r6
 8007b6a:	dc05      	bgt.n	8007b78 <__swbuf_r+0x4e>
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	4628      	mov	r0, r5
 8007b70:	f000 fa68 	bl	8008044 <_fflush_r>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d1ed      	bne.n	8007b54 <__swbuf_r+0x2a>
 8007b78:	68a3      	ldr	r3, [r4, #8]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	60a3      	str	r3, [r4, #8]
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	6022      	str	r2, [r4, #0]
 8007b84:	701e      	strb	r6, [r3, #0]
 8007b86:	6962      	ldr	r2, [r4, #20]
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d004      	beq.n	8007b98 <__swbuf_r+0x6e>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	07db      	lsls	r3, r3, #31
 8007b92:	d5e1      	bpl.n	8007b58 <__swbuf_r+0x2e>
 8007b94:	2e0a      	cmp	r6, #10
 8007b96:	d1df      	bne.n	8007b58 <__swbuf_r+0x2e>
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 fa52 	bl	8008044 <_fflush_r>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d0d9      	beq.n	8007b58 <__swbuf_r+0x2e>
 8007ba4:	e7d6      	b.n	8007b54 <__swbuf_r+0x2a>
	...

08007ba8 <__swsetup_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4b29      	ldr	r3, [pc, #164]	@ (8007c50 <__swsetup_r+0xa8>)
 8007bac:	4605      	mov	r5, r0
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	b118      	cbz	r0, 8007bbc <__swsetup_r+0x14>
 8007bb4:	6a03      	ldr	r3, [r0, #32]
 8007bb6:	b90b      	cbnz	r3, 8007bbc <__swsetup_r+0x14>
 8007bb8:	f7ff fee4 	bl	8007984 <__sinit>
 8007bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc0:	0719      	lsls	r1, r3, #28
 8007bc2:	d422      	bmi.n	8007c0a <__swsetup_r+0x62>
 8007bc4:	06da      	lsls	r2, r3, #27
 8007bc6:	d407      	bmi.n	8007bd8 <__swsetup_r+0x30>
 8007bc8:	2209      	movs	r2, #9
 8007bca:	602a      	str	r2, [r5, #0]
 8007bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd6:	e033      	b.n	8007c40 <__swsetup_r+0x98>
 8007bd8:	0758      	lsls	r0, r3, #29
 8007bda:	d512      	bpl.n	8007c02 <__swsetup_r+0x5a>
 8007bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bde:	b141      	cbz	r1, 8007bf2 <__swsetup_r+0x4a>
 8007be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007be4:	4299      	cmp	r1, r3
 8007be6:	d002      	beq.n	8007bee <__swsetup_r+0x46>
 8007be8:	4628      	mov	r0, r5
 8007bea:	f000 f8af 	bl	8007d4c <_free_r>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6063      	str	r3, [r4, #4]
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	f043 0308 	orr.w	r3, r3, #8
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	b94b      	cbnz	r3, 8007c22 <__swsetup_r+0x7a>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c18:	d003      	beq.n	8007c22 <__swsetup_r+0x7a>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 fa5f 	bl	80080e0 <__smakebuf_r>
 8007c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c26:	f013 0201 	ands.w	r2, r3, #1
 8007c2a:	d00a      	beq.n	8007c42 <__swsetup_r+0x9a>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	60a2      	str	r2, [r4, #8]
 8007c30:	6962      	ldr	r2, [r4, #20]
 8007c32:	4252      	negs	r2, r2
 8007c34:	61a2      	str	r2, [r4, #24]
 8007c36:	6922      	ldr	r2, [r4, #16]
 8007c38:	b942      	cbnz	r2, 8007c4c <__swsetup_r+0xa4>
 8007c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c3e:	d1c5      	bne.n	8007bcc <__swsetup_r+0x24>
 8007c40:	bd38      	pop	{r3, r4, r5, pc}
 8007c42:	0799      	lsls	r1, r3, #30
 8007c44:	bf58      	it	pl
 8007c46:	6962      	ldrpl	r2, [r4, #20]
 8007c48:	60a2      	str	r2, [r4, #8]
 8007c4a:	e7f4      	b.n	8007c36 <__swsetup_r+0x8e>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e7f7      	b.n	8007c40 <__swsetup_r+0x98>
 8007c50:	20000020 	.word	0x20000020

08007c54 <memset>:
 8007c54:	4402      	add	r2, r0
 8007c56:	4603      	mov	r3, r0
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d100      	bne.n	8007c5e <memset+0xa>
 8007c5c:	4770      	bx	lr
 8007c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c62:	e7f9      	b.n	8007c58 <memset+0x4>

08007c64 <_close_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	@ (8007c80 <_close_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7f9 fe2b 	bl	80018ca <_close>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_close_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_close_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	20000a34 	.word	0x20000a34

08007c84 <_lseek_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d07      	ldr	r5, [pc, #28]	@ (8007ca4 <_lseek_r+0x20>)
 8007c88:	4604      	mov	r4, r0
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	2200      	movs	r2, #0
 8007c90:	602a      	str	r2, [r5, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f7f9 fe40 	bl	8001918 <_lseek>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d102      	bne.n	8007ca2 <_lseek_r+0x1e>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b103      	cbz	r3, 8007ca2 <_lseek_r+0x1e>
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	20000a34 	.word	0x20000a34

08007ca8 <_read_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	@ (8007cc8 <_read_r+0x20>)
 8007cac:	4604      	mov	r4, r0
 8007cae:	4608      	mov	r0, r1
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	602a      	str	r2, [r5, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f7f9 fdce 	bl	8001858 <_read>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_read_r+0x1e>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_read_r+0x1e>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	20000a34 	.word	0x20000a34

08007ccc <_write_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d07      	ldr	r5, [pc, #28]	@ (8007cec <_write_r+0x20>)
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	4608      	mov	r0, r1
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	602a      	str	r2, [r5, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f7f9 fdd9 	bl	8001892 <_write>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_write_r+0x1e>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_write_r+0x1e>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	20000a34 	.word	0x20000a34

08007cf0 <__errno>:
 8007cf0:	4b01      	ldr	r3, [pc, #4]	@ (8007cf8 <__errno+0x8>)
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20000020 	.word	0x20000020

08007cfc <__libc_init_array>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8007d34 <__libc_init_array+0x38>)
 8007d00:	4c0d      	ldr	r4, [pc, #52]	@ (8007d38 <__libc_init_array+0x3c>)
 8007d02:	1b64      	subs	r4, r4, r5
 8007d04:	10a4      	asrs	r4, r4, #2
 8007d06:	2600      	movs	r6, #0
 8007d08:	42a6      	cmp	r6, r4
 8007d0a:	d109      	bne.n	8007d20 <__libc_init_array+0x24>
 8007d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d3c <__libc_init_array+0x40>)
 8007d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8007d40 <__libc_init_array+0x44>)
 8007d10:	f000 fa54 	bl	80081bc <_init>
 8007d14:	1b64      	subs	r4, r4, r5
 8007d16:	10a4      	asrs	r4, r4, #2
 8007d18:	2600      	movs	r6, #0
 8007d1a:	42a6      	cmp	r6, r4
 8007d1c:	d105      	bne.n	8007d2a <__libc_init_array+0x2e>
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d24:	4798      	blx	r3
 8007d26:	3601      	adds	r6, #1
 8007d28:	e7ee      	b.n	8007d08 <__libc_init_array+0xc>
 8007d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2e:	4798      	blx	r3
 8007d30:	3601      	adds	r6, #1
 8007d32:	e7f2      	b.n	8007d1a <__libc_init_array+0x1e>
 8007d34:	080083b4 	.word	0x080083b4
 8007d38:	080083b4 	.word	0x080083b4
 8007d3c:	080083b4 	.word	0x080083b4
 8007d40:	080083bc 	.word	0x080083bc

08007d44 <__retarget_lock_init_recursive>:
 8007d44:	4770      	bx	lr

08007d46 <__retarget_lock_acquire_recursive>:
 8007d46:	4770      	bx	lr

08007d48 <__retarget_lock_release_recursive>:
 8007d48:	4770      	bx	lr
	...

08007d4c <_free_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4605      	mov	r5, r0
 8007d50:	2900      	cmp	r1, #0
 8007d52:	d041      	beq.n	8007dd8 <_free_r+0x8c>
 8007d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d58:	1f0c      	subs	r4, r1, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfb8      	it	lt
 8007d5e:	18e4      	addlt	r4, r4, r3
 8007d60:	f000 f8e0 	bl	8007f24 <__malloc_lock>
 8007d64:	4a1d      	ldr	r2, [pc, #116]	@ (8007ddc <_free_r+0x90>)
 8007d66:	6813      	ldr	r3, [r2, #0]
 8007d68:	b933      	cbnz	r3, 8007d78 <_free_r+0x2c>
 8007d6a:	6063      	str	r3, [r4, #4]
 8007d6c:	6014      	str	r4, [r2, #0]
 8007d6e:	4628      	mov	r0, r5
 8007d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d74:	f000 b8dc 	b.w	8007f30 <__malloc_unlock>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d908      	bls.n	8007d8e <_free_r+0x42>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	1821      	adds	r1, r4, r0
 8007d80:	428b      	cmp	r3, r1
 8007d82:	bf01      	itttt	eq
 8007d84:	6819      	ldreq	r1, [r3, #0]
 8007d86:	685b      	ldreq	r3, [r3, #4]
 8007d88:	1809      	addeq	r1, r1, r0
 8007d8a:	6021      	streq	r1, [r4, #0]
 8007d8c:	e7ed      	b.n	8007d6a <_free_r+0x1e>
 8007d8e:	461a      	mov	r2, r3
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	b10b      	cbz	r3, 8007d98 <_free_r+0x4c>
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d9fa      	bls.n	8007d8e <_free_r+0x42>
 8007d98:	6811      	ldr	r1, [r2, #0]
 8007d9a:	1850      	adds	r0, r2, r1
 8007d9c:	42a0      	cmp	r0, r4
 8007d9e:	d10b      	bne.n	8007db8 <_free_r+0x6c>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	4401      	add	r1, r0
 8007da4:	1850      	adds	r0, r2, r1
 8007da6:	4283      	cmp	r3, r0
 8007da8:	6011      	str	r1, [r2, #0]
 8007daa:	d1e0      	bne.n	8007d6e <_free_r+0x22>
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	6053      	str	r3, [r2, #4]
 8007db2:	4408      	add	r0, r1
 8007db4:	6010      	str	r0, [r2, #0]
 8007db6:	e7da      	b.n	8007d6e <_free_r+0x22>
 8007db8:	d902      	bls.n	8007dc0 <_free_r+0x74>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	e7d6      	b.n	8007d6e <_free_r+0x22>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	1821      	adds	r1, r4, r0
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf04      	itt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	6063      	str	r3, [r4, #4]
 8007dce:	bf04      	itt	eq
 8007dd0:	1809      	addeq	r1, r1, r0
 8007dd2:	6021      	streq	r1, [r4, #0]
 8007dd4:	6054      	str	r4, [r2, #4]
 8007dd6:	e7ca      	b.n	8007d6e <_free_r+0x22>
 8007dd8:	bd38      	pop	{r3, r4, r5, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000a40 	.word	0x20000a40

08007de0 <sbrk_aligned>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	4e0f      	ldr	r6, [pc, #60]	@ (8007e20 <sbrk_aligned+0x40>)
 8007de4:	460c      	mov	r4, r1
 8007de6:	6831      	ldr	r1, [r6, #0]
 8007de8:	4605      	mov	r5, r0
 8007dea:	b911      	cbnz	r1, 8007df2 <sbrk_aligned+0x12>
 8007dec:	f000 f9d6 	bl	800819c <_sbrk_r>
 8007df0:	6030      	str	r0, [r6, #0]
 8007df2:	4621      	mov	r1, r4
 8007df4:	4628      	mov	r0, r5
 8007df6:	f000 f9d1 	bl	800819c <_sbrk_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d103      	bne.n	8007e06 <sbrk_aligned+0x26>
 8007dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8007e02:	4620      	mov	r0, r4
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	1cc4      	adds	r4, r0, #3
 8007e08:	f024 0403 	bic.w	r4, r4, #3
 8007e0c:	42a0      	cmp	r0, r4
 8007e0e:	d0f8      	beq.n	8007e02 <sbrk_aligned+0x22>
 8007e10:	1a21      	subs	r1, r4, r0
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f9c2 	bl	800819c <_sbrk_r>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d1f2      	bne.n	8007e02 <sbrk_aligned+0x22>
 8007e1c:	e7ef      	b.n	8007dfe <sbrk_aligned+0x1e>
 8007e1e:	bf00      	nop
 8007e20:	20000a3c 	.word	0x20000a3c

08007e24 <_malloc_r>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	1ccd      	adds	r5, r1, #3
 8007e2a:	f025 0503 	bic.w	r5, r5, #3
 8007e2e:	3508      	adds	r5, #8
 8007e30:	2d0c      	cmp	r5, #12
 8007e32:	bf38      	it	cc
 8007e34:	250c      	movcc	r5, #12
 8007e36:	2d00      	cmp	r5, #0
 8007e38:	4606      	mov	r6, r0
 8007e3a:	db01      	blt.n	8007e40 <_malloc_r+0x1c>
 8007e3c:	42a9      	cmp	r1, r5
 8007e3e:	d904      	bls.n	8007e4a <_malloc_r+0x26>
 8007e40:	230c      	movs	r3, #12
 8007e42:	6033      	str	r3, [r6, #0]
 8007e44:	2000      	movs	r0, #0
 8007e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f20 <_malloc_r+0xfc>
 8007e4e:	f000 f869 	bl	8007f24 <__malloc_lock>
 8007e52:	f8d8 3000 	ldr.w	r3, [r8]
 8007e56:	461c      	mov	r4, r3
 8007e58:	bb44      	cbnz	r4, 8007eac <_malloc_r+0x88>
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f7ff ffbf 	bl	8007de0 <sbrk_aligned>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	4604      	mov	r4, r0
 8007e66:	d158      	bne.n	8007f1a <_malloc_r+0xf6>
 8007e68:	f8d8 4000 	ldr.w	r4, [r8]
 8007e6c:	4627      	mov	r7, r4
 8007e6e:	2f00      	cmp	r7, #0
 8007e70:	d143      	bne.n	8007efa <_malloc_r+0xd6>
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	d04b      	beq.n	8007f0e <_malloc_r+0xea>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	4639      	mov	r1, r7
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	eb04 0903 	add.w	r9, r4, r3
 8007e80:	f000 f98c 	bl	800819c <_sbrk_r>
 8007e84:	4581      	cmp	r9, r0
 8007e86:	d142      	bne.n	8007f0e <_malloc_r+0xea>
 8007e88:	6821      	ldr	r1, [r4, #0]
 8007e8a:	1a6d      	subs	r5, r5, r1
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f7ff ffa6 	bl	8007de0 <sbrk_aligned>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d03a      	beq.n	8007f0e <_malloc_r+0xea>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	442b      	add	r3, r5
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	bb62      	cbnz	r2, 8007f00 <_malloc_r+0xdc>
 8007ea6:	f8c8 7000 	str.w	r7, [r8]
 8007eaa:	e00f      	b.n	8007ecc <_malloc_r+0xa8>
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	1b52      	subs	r2, r2, r5
 8007eb0:	d420      	bmi.n	8007ef4 <_malloc_r+0xd0>
 8007eb2:	2a0b      	cmp	r2, #11
 8007eb4:	d917      	bls.n	8007ee6 <_malloc_r+0xc2>
 8007eb6:	1961      	adds	r1, r4, r5
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	6025      	str	r5, [r4, #0]
 8007ebc:	bf18      	it	ne
 8007ebe:	6059      	strne	r1, [r3, #4]
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	bf08      	it	eq
 8007ec4:	f8c8 1000 	streq.w	r1, [r8]
 8007ec8:	5162      	str	r2, [r4, r5]
 8007eca:	604b      	str	r3, [r1, #4]
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 f82f 	bl	8007f30 <__malloc_unlock>
 8007ed2:	f104 000b 	add.w	r0, r4, #11
 8007ed6:	1d23      	adds	r3, r4, #4
 8007ed8:	f020 0007 	bic.w	r0, r0, #7
 8007edc:	1ac2      	subs	r2, r0, r3
 8007ede:	bf1c      	itt	ne
 8007ee0:	1a1b      	subne	r3, r3, r0
 8007ee2:	50a3      	strne	r3, [r4, r2]
 8007ee4:	e7af      	b.n	8007e46 <_malloc_r+0x22>
 8007ee6:	6862      	ldr	r2, [r4, #4]
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	bf0c      	ite	eq
 8007eec:	f8c8 2000 	streq.w	r2, [r8]
 8007ef0:	605a      	strne	r2, [r3, #4]
 8007ef2:	e7eb      	b.n	8007ecc <_malloc_r+0xa8>
 8007ef4:	4623      	mov	r3, r4
 8007ef6:	6864      	ldr	r4, [r4, #4]
 8007ef8:	e7ae      	b.n	8007e58 <_malloc_r+0x34>
 8007efa:	463c      	mov	r4, r7
 8007efc:	687f      	ldr	r7, [r7, #4]
 8007efe:	e7b6      	b.n	8007e6e <_malloc_r+0x4a>
 8007f00:	461a      	mov	r2, r3
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d1fb      	bne.n	8007f00 <_malloc_r+0xdc>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6053      	str	r3, [r2, #4]
 8007f0c:	e7de      	b.n	8007ecc <_malloc_r+0xa8>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	6033      	str	r3, [r6, #0]
 8007f12:	4630      	mov	r0, r6
 8007f14:	f000 f80c 	bl	8007f30 <__malloc_unlock>
 8007f18:	e794      	b.n	8007e44 <_malloc_r+0x20>
 8007f1a:	6005      	str	r5, [r0, #0]
 8007f1c:	e7d6      	b.n	8007ecc <_malloc_r+0xa8>
 8007f1e:	bf00      	nop
 8007f20:	20000a40 	.word	0x20000a40

08007f24 <__malloc_lock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	@ (8007f2c <__malloc_lock+0x8>)
 8007f26:	f7ff bf0e 	b.w	8007d46 <__retarget_lock_acquire_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20000a38 	.word	0x20000a38

08007f30 <__malloc_unlock>:
 8007f30:	4801      	ldr	r0, [pc, #4]	@ (8007f38 <__malloc_unlock+0x8>)
 8007f32:	f7ff bf09 	b.w	8007d48 <__retarget_lock_release_recursive>
 8007f36:	bf00      	nop
 8007f38:	20000a38 	.word	0x20000a38

08007f3c <__sflush_r>:
 8007f3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f44:	0716      	lsls	r6, r2, #28
 8007f46:	4605      	mov	r5, r0
 8007f48:	460c      	mov	r4, r1
 8007f4a:	d454      	bmi.n	8007ff6 <__sflush_r+0xba>
 8007f4c:	684b      	ldr	r3, [r1, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dc02      	bgt.n	8007f58 <__sflush_r+0x1c>
 8007f52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dd48      	ble.n	8007fea <__sflush_r+0xae>
 8007f58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	d045      	beq.n	8007fea <__sflush_r+0xae>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f64:	682f      	ldr	r7, [r5, #0]
 8007f66:	6a21      	ldr	r1, [r4, #32]
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	d030      	beq.n	8007fce <__sflush_r+0x92>
 8007f6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	0759      	lsls	r1, r3, #29
 8007f72:	d505      	bpl.n	8007f80 <__sflush_r+0x44>
 8007f74:	6863      	ldr	r3, [r4, #4]
 8007f76:	1ad2      	subs	r2, r2, r3
 8007f78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f7a:	b10b      	cbz	r3, 8007f80 <__sflush_r+0x44>
 8007f7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	2300      	movs	r3, #0
 8007f82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f84:	6a21      	ldr	r1, [r4, #32]
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b0      	blx	r6
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	d106      	bne.n	8007f9e <__sflush_r+0x62>
 8007f90:	6829      	ldr	r1, [r5, #0]
 8007f92:	291d      	cmp	r1, #29
 8007f94:	d82b      	bhi.n	8007fee <__sflush_r+0xb2>
 8007f96:	4a2a      	ldr	r2, [pc, #168]	@ (8008040 <__sflush_r+0x104>)
 8007f98:	40ca      	lsrs	r2, r1
 8007f9a:	07d6      	lsls	r6, r2, #31
 8007f9c:	d527      	bpl.n	8007fee <__sflush_r+0xb2>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	6062      	str	r2, [r4, #4]
 8007fa2:	04d9      	lsls	r1, r3, #19
 8007fa4:	6922      	ldr	r2, [r4, #16]
 8007fa6:	6022      	str	r2, [r4, #0]
 8007fa8:	d504      	bpl.n	8007fb4 <__sflush_r+0x78>
 8007faa:	1c42      	adds	r2, r0, #1
 8007fac:	d101      	bne.n	8007fb2 <__sflush_r+0x76>
 8007fae:	682b      	ldr	r3, [r5, #0]
 8007fb0:	b903      	cbnz	r3, 8007fb4 <__sflush_r+0x78>
 8007fb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fb6:	602f      	str	r7, [r5, #0]
 8007fb8:	b1b9      	cbz	r1, 8007fea <__sflush_r+0xae>
 8007fba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fbe:	4299      	cmp	r1, r3
 8007fc0:	d002      	beq.n	8007fc8 <__sflush_r+0x8c>
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f7ff fec2 	bl	8007d4c <_free_r>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fcc:	e00d      	b.n	8007fea <__sflush_r+0xae>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b0      	blx	r6
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	1c50      	adds	r0, r2, #1
 8007fd8:	d1c9      	bne.n	8007f6e <__sflush_r+0x32>
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0c6      	beq.n	8007f6e <__sflush_r+0x32>
 8007fe0:	2b1d      	cmp	r3, #29
 8007fe2:	d001      	beq.n	8007fe8 <__sflush_r+0xac>
 8007fe4:	2b16      	cmp	r3, #22
 8007fe6:	d11e      	bne.n	8008026 <__sflush_r+0xea>
 8007fe8:	602f      	str	r7, [r5, #0]
 8007fea:	2000      	movs	r0, #0
 8007fec:	e022      	b.n	8008034 <__sflush_r+0xf8>
 8007fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	e01b      	b.n	800802e <__sflush_r+0xf2>
 8007ff6:	690f      	ldr	r7, [r1, #16]
 8007ff8:	2f00      	cmp	r7, #0
 8007ffa:	d0f6      	beq.n	8007fea <__sflush_r+0xae>
 8007ffc:	0793      	lsls	r3, r2, #30
 8007ffe:	680e      	ldr	r6, [r1, #0]
 8008000:	bf08      	it	eq
 8008002:	694b      	ldreq	r3, [r1, #20]
 8008004:	600f      	str	r7, [r1, #0]
 8008006:	bf18      	it	ne
 8008008:	2300      	movne	r3, #0
 800800a:	eba6 0807 	sub.w	r8, r6, r7
 800800e:	608b      	str	r3, [r1, #8]
 8008010:	f1b8 0f00 	cmp.w	r8, #0
 8008014:	dde9      	ble.n	8007fea <__sflush_r+0xae>
 8008016:	6a21      	ldr	r1, [r4, #32]
 8008018:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800801a:	4643      	mov	r3, r8
 800801c:	463a      	mov	r2, r7
 800801e:	4628      	mov	r0, r5
 8008020:	47b0      	blx	r6
 8008022:	2800      	cmp	r0, #0
 8008024:	dc08      	bgt.n	8008038 <__sflush_r+0xfc>
 8008026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800802a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	f04f 30ff 	mov.w	r0, #4294967295
 8008034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008038:	4407      	add	r7, r0
 800803a:	eba8 0800 	sub.w	r8, r8, r0
 800803e:	e7e7      	b.n	8008010 <__sflush_r+0xd4>
 8008040:	20400001 	.word	0x20400001

08008044 <_fflush_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	690b      	ldr	r3, [r1, #16]
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
 800804c:	b913      	cbnz	r3, 8008054 <_fflush_r+0x10>
 800804e:	2500      	movs	r5, #0
 8008050:	4628      	mov	r0, r5
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	b118      	cbz	r0, 800805e <_fflush_r+0x1a>
 8008056:	6a03      	ldr	r3, [r0, #32]
 8008058:	b90b      	cbnz	r3, 800805e <_fflush_r+0x1a>
 800805a:	f7ff fc93 	bl	8007984 <__sinit>
 800805e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0f3      	beq.n	800804e <_fflush_r+0xa>
 8008066:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008068:	07d0      	lsls	r0, r2, #31
 800806a:	d404      	bmi.n	8008076 <_fflush_r+0x32>
 800806c:	0599      	lsls	r1, r3, #22
 800806e:	d402      	bmi.n	8008076 <_fflush_r+0x32>
 8008070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008072:	f7ff fe68 	bl	8007d46 <__retarget_lock_acquire_recursive>
 8008076:	4628      	mov	r0, r5
 8008078:	4621      	mov	r1, r4
 800807a:	f7ff ff5f 	bl	8007f3c <__sflush_r>
 800807e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008080:	07da      	lsls	r2, r3, #31
 8008082:	4605      	mov	r5, r0
 8008084:	d4e4      	bmi.n	8008050 <_fflush_r+0xc>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	059b      	lsls	r3, r3, #22
 800808a:	d4e1      	bmi.n	8008050 <_fflush_r+0xc>
 800808c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800808e:	f7ff fe5b 	bl	8007d48 <__retarget_lock_release_recursive>
 8008092:	e7dd      	b.n	8008050 <_fflush_r+0xc>

08008094 <__swhatbuf_r>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	460c      	mov	r4, r1
 8008098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809c:	2900      	cmp	r1, #0
 800809e:	b096      	sub	sp, #88	@ 0x58
 80080a0:	4615      	mov	r5, r2
 80080a2:	461e      	mov	r6, r3
 80080a4:	da0d      	bge.n	80080c2 <__swhatbuf_r+0x2e>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080ac:	f04f 0100 	mov.w	r1, #0
 80080b0:	bf14      	ite	ne
 80080b2:	2340      	movne	r3, #64	@ 0x40
 80080b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080b8:	2000      	movs	r0, #0
 80080ba:	6031      	str	r1, [r6, #0]
 80080bc:	602b      	str	r3, [r5, #0]
 80080be:	b016      	add	sp, #88	@ 0x58
 80080c0:	bd70      	pop	{r4, r5, r6, pc}
 80080c2:	466a      	mov	r2, sp
 80080c4:	f000 f848 	bl	8008158 <_fstat_r>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	dbec      	blt.n	80080a6 <__swhatbuf_r+0x12>
 80080cc:	9901      	ldr	r1, [sp, #4]
 80080ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080d6:	4259      	negs	r1, r3
 80080d8:	4159      	adcs	r1, r3
 80080da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080de:	e7eb      	b.n	80080b8 <__swhatbuf_r+0x24>

080080e0 <__smakebuf_r>:
 80080e0:	898b      	ldrh	r3, [r1, #12]
 80080e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e4:	079d      	lsls	r5, r3, #30
 80080e6:	4606      	mov	r6, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	d507      	bpl.n	80080fc <__smakebuf_r+0x1c>
 80080ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	6123      	str	r3, [r4, #16]
 80080f4:	2301      	movs	r3, #1
 80080f6:	6163      	str	r3, [r4, #20]
 80080f8:	b003      	add	sp, #12
 80080fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080fc:	ab01      	add	r3, sp, #4
 80080fe:	466a      	mov	r2, sp
 8008100:	f7ff ffc8 	bl	8008094 <__swhatbuf_r>
 8008104:	9f00      	ldr	r7, [sp, #0]
 8008106:	4605      	mov	r5, r0
 8008108:	4639      	mov	r1, r7
 800810a:	4630      	mov	r0, r6
 800810c:	f7ff fe8a 	bl	8007e24 <_malloc_r>
 8008110:	b948      	cbnz	r0, 8008126 <__smakebuf_r+0x46>
 8008112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008116:	059a      	lsls	r2, r3, #22
 8008118:	d4ee      	bmi.n	80080f8 <__smakebuf_r+0x18>
 800811a:	f023 0303 	bic.w	r3, r3, #3
 800811e:	f043 0302 	orr.w	r3, r3, #2
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	e7e2      	b.n	80080ec <__smakebuf_r+0xc>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	6020      	str	r0, [r4, #0]
 800812a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	9b01      	ldr	r3, [sp, #4]
 8008132:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008136:	b15b      	cbz	r3, 8008150 <__smakebuf_r+0x70>
 8008138:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800813c:	4630      	mov	r0, r6
 800813e:	f000 f81d 	bl	800817c <_isatty_r>
 8008142:	b128      	cbz	r0, 8008150 <__smakebuf_r+0x70>
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	f023 0303 	bic.w	r3, r3, #3
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	81a3      	strh	r3, [r4, #12]
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	431d      	orrs	r5, r3
 8008154:	81a5      	strh	r5, [r4, #12]
 8008156:	e7cf      	b.n	80080f8 <__smakebuf_r+0x18>

08008158 <_fstat_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d07      	ldr	r5, [pc, #28]	@ (8008178 <_fstat_r+0x20>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	4611      	mov	r1, r2
 8008164:	602b      	str	r3, [r5, #0]
 8008166:	f7f9 fbbc 	bl	80018e2 <_fstat>
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	d102      	bne.n	8008174 <_fstat_r+0x1c>
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	b103      	cbz	r3, 8008174 <_fstat_r+0x1c>
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	bd38      	pop	{r3, r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	20000a34 	.word	0x20000a34

0800817c <_isatty_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4d06      	ldr	r5, [pc, #24]	@ (8008198 <_isatty_r+0x1c>)
 8008180:	2300      	movs	r3, #0
 8008182:	4604      	mov	r4, r0
 8008184:	4608      	mov	r0, r1
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	f7f9 fbbb 	bl	8001902 <_isatty>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_isatty_r+0x1a>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	b103      	cbz	r3, 8008196 <_isatty_r+0x1a>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	20000a34 	.word	0x20000a34

0800819c <_sbrk_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d06      	ldr	r5, [pc, #24]	@ (80081b8 <_sbrk_r+0x1c>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	f7f9 fbc4 	bl	8001934 <_sbrk>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_sbrk_r+0x1a>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_sbrk_r+0x1a>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	20000a34 	.word	0x20000a34

080081bc <_init>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <_fini>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr
