
LightProcessor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006990  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006b68  08006b68  00007b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba8  08006ba8  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006ba8  08006ba8  00007ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb0  08006bb0  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006bbc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  2000000c  08006bc8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08006bc8  000086dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4ba  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b4  00000000  00000000  000264f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00029cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001336  00000000  00000000  0002b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8b3  00000000  00000000  0002c88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3b9  00000000  00000000  00057141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119a97  00000000  00000000  000734fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cf91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b28  00000000  00000000  0018cfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00193afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006b50 	.word	0x08006b50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006b50 	.word	0x08006b50

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 ff9d 	bl	8001486 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f816 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 fb6a 	bl	8000c28 <MX_GPIO_Init>
  MX_UART5_Init();
 8000554:	f000 faf4 	bl	8000b40 <MX_UART5_Init>
  MX_ADC1_Init();
 8000558:	f000 f85c 	bl	8000614 <MX_ADC1_Init>
  MX_ADC2_Init();
 800055c:	f000 f8d2 	bl	8000704 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000560:	f000 f936 	bl	80007d0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000564:	f000 f9ac 	bl	80008c0 <MX_ADC4_Init>
  MX_TIM3_Init();
 8000568:	f000 fa9a 	bl	8000aa0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800056c:	f000 fa48 	bl	8000a00 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000570:	f000 fa0c 	bl	800098c <MX_DAC1_Init>
  MX_USB_PCD_Init();
 8000574:	f000 fb30 	bl	8000bd8 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x34>

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0318 	add.w	r3, r7, #24
 8000586:	2238      	movs	r2, #56	@ 0x38
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 fab3 	bl	8006af6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059e:	2000      	movs	r0, #0
 80005a0:	f003 fafc 	bl	8003b9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005a4:	2321      	movs	r3, #33	@ 0x21
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	2303      	movs	r3, #3
 80005b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005be:	2355      	movs	r3, #85	@ 0x55
 80005c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fb96 	bl	8003d04 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005de:	f000 fbb3 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fe94 	bl	8004328 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000606:	f000 fb9f 	bl	8000d48 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	@ 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	@ 0x30
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2220      	movs	r2, #32
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f006 fa62 	bl	8006af6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000634:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000638:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800063a:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800063c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000642:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065a:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800065c:	2204      	movs	r2, #4
 800065e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000666:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800066e:	2201      	movs	r2, #1
 8000670:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068e:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <MX_ADC1_Init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	4817      	ldr	r0, [pc, #92]	@ (80006fc <MX_ADC1_Init+0xe8>)
 800069e:	f001 f97b 	bl	8001998 <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006a8:	f000 fb4e 	bl	8000d48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	4811      	ldr	r0, [pc, #68]	@ (80006fc <MX_ADC1_Init+0xe8>)
 80006b8:	f002 fa40 	bl	8002b3c <HAL_ADCEx_MultiModeConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006c2:	f000 fb41 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_ADC1_Init+0xec>)
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2306      	movs	r3, #6
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d2:	237f      	movs	r3, #127	@ 0x7f
 80006d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d6:	2304      	movs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <MX_ADC1_Init+0xe8>)
 80006e4:	f001 fd92 	bl	800220c <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ee:	f000 fb2b 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	@ 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000028 	.word	0x20000028
 8000700:	0c900008 	.word	0x0c900008

08000704 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f006 f9f0 	bl	8006af6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000718:	4a2b      	ldr	r2, [pc, #172]	@ (80007c8 <MX_ADC2_Init+0xc4>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071c:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800071e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000722:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000724:	4b27      	ldr	r3, [pc, #156]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000730:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800073e:	2204      	movs	r2, #4
 8000740:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000750:	2201      	movs	r2, #1
 8000752:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077e:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 8000780:	f001 f90a 	bl	8001998 <HAL_ADC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800078a:	f000 fadd 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_ADC2_Init+0xc8>)
 8000790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000792:	2306      	movs	r3, #6
 8000794:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800079a:	237f      	movs	r3, #127	@ 0x7f
 800079c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079e:	2304      	movs	r3, #4
 80007a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_ADC2_Init+0xc0>)
 80007ac:	f001 fd2e 	bl	800220c <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007b6:	f000 fac7 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000094 	.word	0x20000094
 80007c8:	50000100 	.word	0x50000100
 80007cc:	0c900008 	.word	0x0c900008

080007d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2220      	movs	r2, #32
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 f984 	bl	8006af6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ee:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007f0:	4a31      	ldr	r2, [pc, #196]	@ (80008b8 <MX_ADC3_Init+0xe8>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000802:	4b2c      	ldr	r3, [pc, #176]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000808:	4b2a      	ldr	r3, [pc, #168]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	4b27      	ldr	r3, [pc, #156]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000816:	2204      	movs	r2, #4
 8000818:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000828:	2201      	movs	r2, #1
 800082a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000856:	4817      	ldr	r0, [pc, #92]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000858:	f001 f89e 	bl	8001998 <HAL_ADC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000862:	f000 fa71 	bl	8000d48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800086a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 8000872:	f002 f963 	bl	8002b3c <HAL_ADCEx_MultiModeConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800087c:	f000 fa64 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_ADC3_Init+0xec>)
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000884:	2306      	movs	r3, #6
 8000886:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800088c:	237f      	movs	r3, #127	@ 0x7f
 800088e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000890:	2304      	movs	r3, #4
 8000892:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_ADC3_Init+0xe4>)
 800089e:	f001 fcb5 	bl	800220c <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80008a8:	f000 fa4e 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3730      	adds	r7, #48	@ 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000100 	.word	0x20000100
 80008b8:	50000400 	.word	0x50000400
 80008bc:	04300002 	.word	0x04300002

080008c0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f006 f912 	bl	8006af6 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000984 <MX_ADC4_Init+0xc4>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008de:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008e0:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e6:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008ec:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f8:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_ADC4_Init+0xc0>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000904:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_ADC4_Init+0xc0>)
 800090c:	2201      	movs	r2, #1
 800090e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000910:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000918:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <MX_ADC4_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000924:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_ADC4_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_ADC4_Init+0xc0>)
 800093c:	f001 f82c 	bl	8001998 <HAL_ADC_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000946:	f000 f9ff 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_ADC4_Init+0xc8>)
 800094c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094e:	2306      	movs	r3, #6
 8000950:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000956:	237f      	movs	r3, #127	@ 0x7f
 8000958:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800095a:	2304      	movs	r3, #4
 800095c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_ADC4_Init+0xc0>)
 8000968:	f001 fc50 	bl	800220c <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000972:	f000 f9e9 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000016c 	.word	0x2000016c
 8000984:	50000500 	.word	0x50000500
 8000988:	14f00020 	.word	0x14f00020

0800098c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	@ 0x30
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000992:	463b      	mov	r3, r7
 8000994:	2230      	movs	r2, #48	@ 0x30
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f006 f8ac 	bl	8006af6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800099e:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_DAC1_Init+0x6c>)
 80009a0:	4a16      	ldr	r2, [pc, #88]	@ (80009fc <MX_DAC1_Init+0x70>)
 80009a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009a4:	4814      	ldr	r0, [pc, #80]	@ (80009f8 <MX_DAC1_Init+0x6c>)
 80009a6:	f002 fae0 	bl	8002f6a <HAL_DAC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009b0:	f000 f9ca 	bl	8000d48 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80009b4:	2302      	movs	r3, #2
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <MX_DAC1_Init+0x6c>)
 80009e0:	f002 fae6 	bl	8002fb0 <HAL_DAC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80009ea:	f000 f9ad 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	@ 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001d8 	.word	0x200001d8
 80009fc:	50000800 	.word	0x50000800

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4999;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a28:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499999;
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a36:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <MX_TIM2_Init+0x9c>)
 8000a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a46:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a48:	f004 f8d4 	bl	8004bf4 <HAL_TIM_Base_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a52:	f000 f979 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a64:	f004 fa6c 	bl	8004f40 <HAL_TIM_ConfigClockSource>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a6e:	f000 f96b 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <MX_TIM2_Init+0x98>)
 8000a80:	f004 fcf6 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a8a:	f000 f95d 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200001ec 	.word	0x200001ec
 8000a9c:	0007a11f 	.word	0x0007a11f

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <MX_TIM3_Init+0x9c>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4999;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ac6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ad4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae6:	4814      	ldr	r0, [pc, #80]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000ae8:	f004 f884 	bl	8004bf4 <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000af2:	f000 f929 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000b04:	f004 fa1c 	bl	8004f40 <HAL_TIM_ConfigClockSource>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b0e:	f000 f91b 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <MX_TIM3_Init+0x98>)
 8000b20:	f004 fca6 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b2a:	f000 f90d 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000238 	.word	0x20000238
 8000b3c:	40000400 	.word	0x40000400

08000b40 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b44:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b46:	4a23      	ldr	r2, [pc, #140]	@ (8000bd4 <MX_UART5_Init+0x94>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b88:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b8a:	f004 fd4d 	bl	8005628 <HAL_UART_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000b94:	f000 f8d8 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000b9c:	f005 fea7 	bl	80068ee <HAL_UARTEx_SetTxFifoThreshold>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000ba6:	f000 f8cf 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000bae:	f005 fedc 	bl	800696a <HAL_UARTEx_SetRxFifoThreshold>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000bb8:	f000 f8c6 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart5) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <MX_UART5_Init+0x90>)
 8000bbe:	f005 fe5b 	bl	8006878 <HAL_UARTEx_EnableFifoMode>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f000 f8be 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000284 	.word	0x20000284
 8000bd4:	40005000 	.word	0x40005000

08000bd8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000bde:	4a11      	ldr	r2, [pc, #68]	@ (8000c24 <MX_USB_PCD_Init+0x4c>)
 8000be0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000be4:	2208      	movs	r2, #8
 8000be6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_USB_PCD_Init+0x48>)
 8000c0e:	f002 fde3 	bl	80037d8 <HAL_PCD_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000c18:	f000 f896 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000318 	.word	0x20000318
 8000c24:	40005c00 	.word	0x40005c00

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a3e      	ldr	r2, [pc, #248]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0320 	and.w	r3, r3, #32
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	4a38      	ldr	r2, [pc, #224]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c62:	4b36      	ldr	r3, [pc, #216]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	4a32      	ldr	r2, [pc, #200]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7a:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a26      	ldr	r2, [pc, #152]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <MX_GPIO_Init+0x114>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RX_IND_Pin|TX_IND_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc0:	f002 fd72 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC4_IDLE_IND_Pin ADC1_IDLE_IND_Pin ADC1_MOD1_IND_Pin ADC1_MOD2_IND_Pin
                           ADC_MOD3_IND_Pin ADC3_MOD2_IND_Pin ADC2_MOD3_IND_Pin ADC2_MOD3_INDC7_Pin
                           ADC2_MOD2_IND_Pin ADC2_MOD1_IND_Pin */
  GPIO_InitStruct.Pin = ADC4_IDLE_IND_Pin|ADC1_IDLE_IND_Pin|ADC1_MOD1_IND_Pin|ADC1_MOD2_IND_Pin
 8000cc4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000cc8:	617b      	str	r3, [r7, #20]
                          |ADC_MOD3_IND_Pin|ADC3_MOD2_IND_Pin|ADC2_MOD3_IND_Pin|ADC2_MOD3_INDC7_Pin
                          |ADC2_MOD2_IND_Pin|ADC2_MOD1_IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4819      	ldr	r0, [pc, #100]	@ (8000d40 <MX_GPIO_Init+0x118>)
 8000cda:	f002 fbe3 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_MOD3_IND_Pin ADC1_MOD4_IND_Pin ADC_MOD4_IND_Pin ADC2_IDLE_IND_Pin */
  GPIO_InitStruct.Pin = ADC1_MOD3_IND_Pin|ADC1_MOD4_IND_Pin|ADC_MOD4_IND_Pin|ADC2_IDLE_IND_Pin;
 8000cde:	f240 1383 	movw	r3, #387	@ 0x183
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f002 fbd5 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC3_MOD1_IND_Pin ADC3_IDLE_IND_Pin ADC4_MOD4_IND_Pin ADC4_MOD3_IND_Pin
                           ADC4_MOD2_IND_Pin ADC4_MOD1_IND_Pin */
  GPIO_InitStruct.Pin = ADC3_MOD1_IND_Pin|ADC3_IDLE_IND_Pin|ADC4_MOD4_IND_Pin|ADC4_MOD3_IND_Pin
 8000cfa:	f647 0305 	movw	r3, #30725	@ 0x7805
 8000cfe:	617b      	str	r3, [r7, #20]
                          |ADC4_MOD2_IND_Pin|ADC4_MOD1_IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_GPIO_Init+0x11c>)
 8000d10:	f002 fbc8 	bl	80034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_IND_Pin TX_IND_Pin */
  GPIO_InitStruct.Pin = RX_IND_Pin|TX_IND_Pin;
 8000d14:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f002 fbb8 	bl	80034a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	@ 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000800 	.word	0x48000800
 8000d44:	48000400 	.word	0x48000400

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <_ZN9Usb_SetupC1EP19__PCD_HandleTypeDef>:
#define INC_USBSETUP_HPP_
#include "stm32g4xx_hal.h"

class Usb_Setup{
public:
	Usb_Setup(PCD_HandleTypeDef * hpcd_USB_FS) {usb_instance = hpcd_USB_FS;}
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_ZN7Usb_ComC1EP19__PCD_HandleTypeDef>:


class Usb_Com{
public:
//Declaration
	Usb_Com(PCD_HandleTypeDef * hpcd_USB_FS) {usb_instance = hpcd_USB_FS;};
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_ZN9Usb_Setup16DeviceDescriptorC1Ev>:
		uint16_t bcdDevice;
		uint8_t iManufacturer;
		uint8_t iProduct;
		uint8_t iSerialNumber;
		uint8_t bNumConfigurations;
	} DeviceDescriptor;
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2212      	movs	r2, #18
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	705a      	strb	r2, [r3, #1]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2240      	movs	r2, #64	@ 0x40
 8000dba:	71da      	strb	r2, [r3, #7]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <_Z41__static_initialization_and_destruction_0v>:
		fprintf(stderr, "Cannot Open Endpoint %d\n", tracked_ep);
		return;
	}


}
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
Usb_Com usb = Usb_Com(&hpcd_USB_FS);
 8000dd0:	4906      	ldr	r1, [pc, #24]	@ (8000dec <_Z41__static_initialization_and_destruction_0v+0x20>)
 8000dd2:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8000dd4:	f7ff ffcd 	bl	8000d72 <_ZN7Usb_ComC1EP19__PCD_HandleTypeDef>
Usb_Setup usb_setup = Usb_Setup(&hpcd_USB_FS);
 8000dd8:	4904      	ldr	r1, [pc, #16]	@ (8000dec <_Z41__static_initialization_and_destruction_0v+0x20>)
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8000ddc:	f7ff ffba 	bl	8000d54 <_ZN9Usb_SetupC1EP19__PCD_HandleTypeDef>
Usb_Setup::DeviceDescriptor usb_descriptor;
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8000de2:	f7ff ffde 	bl	8000da2 <_ZN9Usb_Setup16DeviceDescriptorC1Ev>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000318 	.word	0x20000318
 8000df0:	20000630 	.word	0x20000630
 8000df4:	200006b8 	.word	0x200006b8
 8000df8:	200006bc 	.word	0x200006bc

08000dfc <_GLOBAL__sub_I_usb>:
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	f7ff ffe4 	bl	8000dcc <_Z41__static_initialization_and_destruction_0v>
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2a:	4a08      	ldr	r2, [pc, #32]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e3e:	f002 ff51 	bl	8003ce4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a4      	sub	sp, #144	@ 0x90
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e6c:	2254      	movs	r2, #84	@ 0x54
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f005 fe40 	bl	8006af6 <memset>
  if(hadc->Instance==ADC1)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e7e:	d140      	bne.n	8000f02 <HAL_ADC_MspInit+0xb2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e86:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fc61 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e9c:	f7ff ff54 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ea0:	4b8a      	ldr	r3, [pc, #552]	@ (80010cc <HAL_ADC_MspInit+0x27c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a89      	ldr	r2, [pc, #548]	@ (80010cc <HAL_ADC_MspInit+0x27c>)
 8000ea8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eaa:	4b88      	ldr	r3, [pc, #544]	@ (80010cc <HAL_ADC_MspInit+0x27c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10b      	bne.n	8000eca <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000eb2:	4b87      	ldr	r3, [pc, #540]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a86      	ldr	r2, [pc, #536]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000eb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b84      	ldr	r3, [pc, #528]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b81      	ldr	r3, [pc, #516]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a80      	ldr	r2, [pc, #512]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b7e      	ldr	r3, [pc, #504]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efc:	f002 fad2 	bl	80034a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000f00:	e0df      	b.n	80010c2 <HAL_ADC_MspInit+0x272>
  else if(hadc->Instance==ADC2)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a73      	ldr	r2, [pc, #460]	@ (80010d4 <HAL_ADC_MspInit+0x284>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d140      	bne.n	8000f8e <HAL_ADC_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f003 fc1b 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_ADC_MspInit+0xdc>
      Error_Handler();
 8000f28:	f7ff ff0e 	bl	8000d48 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f2c:	4b67      	ldr	r3, [pc, #412]	@ (80010cc <HAL_ADC_MspInit+0x27c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	4a66      	ldr	r2, [pc, #408]	@ (80010cc <HAL_ADC_MspInit+0x27c>)
 8000f34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f36:	4b65      	ldr	r3, [pc, #404]	@ (80010cc <HAL_ADC_MspInit+0x27c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10b      	bne.n	8000f56 <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f3e:	4b64      	ldr	r3, [pc, #400]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	4a63      	ldr	r2, [pc, #396]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000f44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4a:	4b61      	ldr	r3, [pc, #388]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b5e      	ldr	r3, [pc, #376]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a5d      	ldr	r2, [pc, #372]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b5b      	ldr	r3, [pc, #364]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f6e:	2340      	movs	r3, #64	@ 0x40
 8000f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f88:	f002 fa8c 	bl	80034a4 <HAL_GPIO_Init>
}
 8000f8c:	e099      	b.n	80010c2 <HAL_ADC_MspInit+0x272>
  else if(hadc->Instance==ADC3)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a51      	ldr	r2, [pc, #324]	@ (80010d8 <HAL_ADC_MspInit+0x288>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d147      	bne.n	8001028 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000f9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000fa2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fbd5 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_ADC_MspInit+0x168>
      Error_Handler();
 8000fb4:	f7ff fec8 	bl	8000d48 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000fb8:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <HAL_ADC_MspInit+0x28c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a47      	ldr	r2, [pc, #284]	@ (80010dc <HAL_ADC_MspInit+0x28c>)
 8000fc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000fc2:	4b46      	ldr	r3, [pc, #280]	@ (80010dc <HAL_ADC_MspInit+0x28c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000fca:	4b41      	ldr	r3, [pc, #260]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	4a40      	ldr	r2, [pc, #256]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a3a      	ldr	r2, [pc, #232]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffe:	2303      	movs	r3, #3
 8001000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800100e:	4619      	mov	r1, r3
 8001010:	4833      	ldr	r0, [pc, #204]	@ (80010e0 <HAL_ADC_MspInit+0x290>)
 8001012:	f002 fa47 	bl	80034a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	202f      	movs	r0, #47	@ 0x2f
 800101c:	f001 ff71 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001020:	202f      	movs	r0, #47	@ 0x2f
 8001022:	f001 ff88 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 8001026:	e04c      	b.n	80010c2 <HAL_ADC_MspInit+0x272>
  else if(hadc->Instance==ADC4)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2d      	ldr	r2, [pc, #180]	@ (80010e4 <HAL_ADC_MspInit+0x294>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d147      	bne.n	80010c2 <HAL_ADC_MspInit+0x272>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001032:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001038:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800103c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fb88 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_ADC_MspInit+0x202>
      Error_Handler();
 800104e:	f7ff fe7b 	bl	8000d48 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001052:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <HAL_ADC_MspInit+0x28c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a20      	ldr	r2, [pc, #128]	@ (80010dc <HAL_ADC_MspInit+0x28c>)
 800105a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <HAL_ADC_MspInit+0x28c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10b      	bne.n	800107c <HAL_ADC_MspInit+0x22c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a19      	ldr	r2, [pc, #100]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001080:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_ADC_MspInit+0x280>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001094:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001098:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	2303      	movs	r3, #3
 800109c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <HAL_ADC_MspInit+0x290>)
 80010ae:	f002 f9f9 	bl	80034a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	203d      	movs	r0, #61	@ 0x3d
 80010b8:	f001 ff23 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 80010bc:	203d      	movs	r0, #61	@ 0x3d
 80010be:	f001 ff3a 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3790      	adds	r7, #144	@ 0x90
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200006d0 	.word	0x200006d0
 80010d0:	40021000 	.word	0x40021000
 80010d4:	50000100 	.word	0x50000100
 80010d8:	50000400 	.word	0x50000400
 80010dc:	200006d4 	.word	0x200006d4
 80010e0:	48000400 	.word	0x48000400
 80010e4:	50000500 	.word	0x50000500

080010e8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a15      	ldr	r2, [pc, #84]	@ (800115c <HAL_DAC_MspInit+0x74>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d124      	bne.n	8001154 <HAL_DAC_MspInit+0x6c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113a:	2310      	movs	r3, #16
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f002 f9a8 	bl	80034a4 <HAL_GPIO_Init>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	@ 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	50000800 	.word	0x50000800
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001174:	d114      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_TIM_Base_MspInit+0x78>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117a:	4a18      	ldr	r2, [pc, #96]	@ (80011dc <HAL_TIM_Base_MspInit+0x78>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6593      	str	r3, [r2, #88]	@ 0x58
 8001182:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <HAL_TIM_Base_MspInit+0x78>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	201c      	movs	r0, #28
 8001194:	f001 feb5 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001198:	201c      	movs	r0, #28
 800119a:	f001 fecc 	bl	8002f36 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800119e:	e018      	b.n	80011d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	@ (80011e0 <HAL_TIM_Base_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d113      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <HAL_TIM_Base_MspInit+0x78>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <HAL_TIM_Base_MspInit+0x78>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_TIM_Base_MspInit+0x78>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	201d      	movs	r0, #29
 80011c8:	f001 fe9b 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011cc:	201d      	movs	r0, #29
 80011ce:	f001 feb2 	bl	8002f36 <HAL_NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40000400 	.word	0x40000400

080011e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0a0      	sub	sp, #128	@ 0x80
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	2254      	movs	r2, #84	@ 0x54
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 fc76 	bl	8006af6 <memset>
  if(huart->Instance==UART5)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a31      	ldr	r2, [pc, #196]	@ (80012d4 <HAL_UART_MspInit+0xf0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d15a      	bne.n	80012ca <HAL_UART_MspInit+0xe6>

    /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001214:	2310      	movs	r3, #16
 8001216:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fa99 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800122c:	f7ff fd8c 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001230:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a28      	ldr	r2, [pc, #160]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 8001236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b26      	ldr	r3, [pc, #152]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001248:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124c:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001254:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001264:	4a1c      	ldr	r2, [pc, #112]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <HAL_UART_MspInit+0xf4>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800128a:	2305      	movs	r3, #5
 800128c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001292:	4619      	mov	r1, r3
 8001294:	4811      	ldr	r0, [pc, #68]	@ (80012dc <HAL_UART_MspInit+0xf8>)
 8001296:	f002 f905 	bl	80034a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800129a:	2304      	movs	r3, #4
 800129c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80012aa:	2305      	movs	r3, #5
 80012ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012b2:	4619      	mov	r1, r3
 80012b4:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <HAL_UART_MspInit+0xfc>)
 80012b6:	f002 f8f5 	bl	80034a4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2035      	movs	r0, #53	@ 0x35
 80012c0:	f001 fe1f 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80012c4:	2035      	movs	r0, #53	@ 0x35
 80012c6:	f001 fe36 	bl	8002f36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80012ca:	bf00      	nop
 80012cc:	3780      	adds	r7, #128	@ 0x80
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40005000 	.word	0x40005000
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00

080012e4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b098      	sub	sp, #96	@ 0x60
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2254      	movs	r2, #84	@ 0x54
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f005 fbfe 	bl	8006af6 <memset>
  if(hpcd->Instance==USB)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a11      	ldr	r2, [pc, #68]	@ (8001344 <HAL_PCD_MspInit+0x60>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d11a      	bne.n	800133a <HAL_PCD_MspInit+0x56>

    /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001308:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fa20 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800131e:	f7ff fd13 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_PCD_MspInit+0x64>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <HAL_PCD_MspInit+0x64>)
 8001328:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800132c:	6593      	str	r3, [r2, #88]	@ 0x58
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_PCD_MspInit+0x64>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	3760      	adds	r7, #96	@ 0x60
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40005c00 	.word	0x40005c00
 8001348:	40021000 	.word	0x40021000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 f8c3 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <TIM2_IRQHandler+0x10>)
 80013b2:	f003 fc76 	bl	8004ca2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001ec 	.word	0x200001ec

080013c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <TIM3_IRQHandler+0x10>)
 80013c6:	f003 fc6c 	bl	8004ca2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000238 	.word	0x20000238

080013d4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <ADC3_IRQHandler+0x10>)
 80013da:	f000 fc99 	bl	8001d10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000100 	.word	0x20000100

080013e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <UART5_IRQHandler+0x10>)
 80013ee:	f004 f96b 	bl	80056c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000284 	.word	0x20000284

080013fc <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <ADC4_IRQHandler+0x10>)
 8001402:	f000 fc85 	bl	8001d10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000016c 	.word	0x2000016c

08001410 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001436:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001438:	f7ff ffea 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <LoopForever+0x6>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	@ (8001474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <LoopForever+0xe>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	@ (8001480 <LoopForever+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f005 fb51 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001466:	f7ff f86d 	bl	8000544 <main>

0800146a <LoopForever>:

LoopForever:
    b LoopForever
 800146a:	e7fe      	b.n	800146a <LoopForever>
  ldr   r0, =_estack
 800146c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001478:	08006bbc 	.word	0x08006bbc
  ldr r2, =_sbss
 800147c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001480:	200006dc 	.word	0x200006dc

08001484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_2_IRQHandler>

08001486 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f001 fd2b 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001496:	200f      	movs	r0, #15
 8001498:	f000 f80e 	bl	80014b8 <HAL_InitTick>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	e001      	b.n	80014ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a8:	f7ff fcae 	bl	8000e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ac:	79fb      	ldrb	r3, [r7, #7]

}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <HAL_InitTick+0x68>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d022      	beq.n	8001512 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <HAL_InitTick+0x6c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <HAL_InitTick+0x68>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fd36 	bl	8002f52 <HAL_SYSTICK_Config>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10f      	bne.n	800150c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	d809      	bhi.n	8001506 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f2:	2200      	movs	r2, #0
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	f04f 30ff 	mov.w	r0, #4294967295
 80014fa:	f001 fd02 	bl	8002f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_InitTick+0x70>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e007      	b.n	8001516 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e004      	b.n	8001516 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e001      	b.n	8001516 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000008 	.word	0x20000008
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_IncTick+0x1c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_IncTick+0x20>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4413      	add	r3, r2
 800153a:	4a03      	ldr	r2, [pc, #12]	@ (8001548 <HAL_IncTick+0x1c>)
 800153c:	6013      	str	r3, [r2, #0]
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	200006d8 	.word	0x200006d8
 800154c:	20000008 	.word	0x20000008

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200006d8 	.word	0x200006d8

08001568 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	609a      	str	r2, [r3, #8]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	609a      	str	r2, [r3, #8]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3360      	adds	r3, #96	@ 0x60
 80015e2:	461a      	mov	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <LL_ADC_SetOffset+0x44>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	4313      	orrs	r3, r2
 8001600:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001608:	bf00      	nop
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	03fff000 	.word	0x03fff000

08001618 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3360      	adds	r3, #96	@ 0x60
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3360      	adds	r3, #96	@ 0x60
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800167a:	b480      	push	{r7}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3360      	adds	r3, #96	@ 0x60
 800168a:	461a      	mov	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	431a      	orrs	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3360      	adds	r3, #96	@ 0x60
 80016c0:	461a      	mov	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	615a      	str	r2, [r3, #20]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001732:	b480      	push	{r7}
 8001734:	b087      	sub	sp, #28
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3330      	adds	r3, #48	@ 0x30
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	4413      	add	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	211f      	movs	r1, #31
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0e9b      	lsrs	r3, r3, #26
 800176a:	f003 011f 	and.w	r1, r3, #31
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800177e:	bf00      	nop
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3314      	adds	r3, #20
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	0e5b      	lsrs	r3, r3, #25
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	0d1b      	lsrs	r3, r3, #20
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2107      	movs	r1, #7
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	401a      	ands	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	0d1b      	lsrs	r3, r3, #20
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	431a      	orrs	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0318 	and.w	r3, r3, #24
 800182a:	4908      	ldr	r1, [pc, #32]	@ (800184c <LL_ADC_SetChannelSingleDiff+0x44>)
 800182c:	40d9      	lsrs	r1, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	400b      	ands	r3, r1
 8001832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001836:	431a      	orrs	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	0007ffff 	.word	0x0007ffff

08001850 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 031f 	and.w	r3, r3, #31
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001898:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6093      	str	r3, [r2, #8]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018c0:	d101      	bne.n	80018c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80018e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001910:	d101      	bne.n	8001916 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <LL_ADC_IsEnabled+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_ADC_IsEnabled+0x1a>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b04      	cmp	r3, #4
 800195c:	d101      	bne.n	8001962 <LL_ADC_REG_IsConversionOngoing+0x18>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b08      	cmp	r3, #8
 8001982:	d101      	bne.n	8001988 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1a9      	b.n	8001d06 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fa45 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff67 	bl	80018ac <LL_ADC_IsDeepPowerDownEnabled>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff4d 	bl	8001888 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff82 	bl	80018fc <LL_ADC_IsInternalRegulatorEnabled>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d115      	bne.n	8001a2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff66 	bl	80018d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a08:	4b9c      	ldr	r3, [pc, #624]	@ (8001c7c <HAL_ADC_Init+0x2e4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	4a9c      	ldr	r2, [pc, #624]	@ (8001c80 <HAL_ADC_Init+0x2e8>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff ff64 	bl	80018fc <LL_ADC_IsInternalRegulatorEnabled>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10d      	bne.n	8001a56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff75 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 8001a60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f040 8142 	bne.w	8001cf4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 813e 	bne.w	8001cf4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a80:	f043 0202 	orr.w	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff49 	bl	8001924 <LL_ADC_IsEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d141      	bne.n	8001b1c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aa0:	d004      	beq.n	8001aac <HAL_ADC_Init+0x114>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a77      	ldr	r2, [pc, #476]	@ (8001c84 <HAL_ADC_Init+0x2ec>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d10f      	bne.n	8001acc <HAL_ADC_Init+0x134>
 8001aac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ab0:	f7ff ff38 	bl	8001924 <LL_ADC_IsEnabled>
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	4873      	ldr	r0, [pc, #460]	@ (8001c84 <HAL_ADC_Init+0x2ec>)
 8001ab8:	f7ff ff34 	bl	8001924 <LL_ADC_IsEnabled>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4323      	orrs	r3, r4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	e012      	b.n	8001af2 <HAL_ADC_Init+0x15a>
 8001acc:	486e      	ldr	r0, [pc, #440]	@ (8001c88 <HAL_ADC_Init+0x2f0>)
 8001ace:	f7ff ff29 	bl	8001924 <LL_ADC_IsEnabled>
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	486d      	ldr	r0, [pc, #436]	@ (8001c8c <HAL_ADC_Init+0x2f4>)
 8001ad6:	f7ff ff25 	bl	8001924 <LL_ADC_IsEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	431c      	orrs	r4, r3
 8001ade:	486c      	ldr	r0, [pc, #432]	@ (8001c90 <HAL_ADC_Init+0x2f8>)
 8001ae0:	f7ff ff20 	bl	8001924 <LL_ADC_IsEnabled>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001afe:	d004      	beq.n	8001b0a <HAL_ADC_Init+0x172>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a5f      	ldr	r2, [pc, #380]	@ (8001c84 <HAL_ADC_Init+0x2ec>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Init+0x176>
 8001b0a:	4a62      	ldr	r2, [pc, #392]	@ (8001c94 <HAL_ADC_Init+0x2fc>)
 8001b0c:	e000      	b.n	8001b10 <HAL_ADC_Init+0x178>
 8001b0e:	4a62      	ldr	r2, [pc, #392]	@ (8001c98 <HAL_ADC_Init+0x300>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7ff fd26 	bl	8001568 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7f5b      	ldrb	r3, [r3, #29]
 8001b20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	045b      	lsls	r3, r3, #17
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b48      	ldr	r3, [pc, #288]	@ (8001c9c <HAL_ADC_Init+0x304>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fee4 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 8001ba8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d17f      	bne.n	8001cb0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d17c      	bne.n	8001cb0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bba:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bc2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bd2:	f023 0302 	bic.w	r3, r3, #2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d017      	beq.n	8001c18 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001bf6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6911      	ldr	r1, [r2, #16]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c16:	e013      	b.n	8001c40 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c3c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d12a      	bne.n	8001ca0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c60:	4311      	orrs	r1, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	e019      	b.n	8001cb0 <HAL_ADC_Init+0x318>
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	053e2d63 	.word	0x053e2d63
 8001c84:	50000100 	.word	0x50000100
 8001c88:	50000400 	.word	0x50000400
 8001c8c:	50000500 	.word	0x50000500
 8001c90:	50000600 	.word	0x50000600
 8001c94:	50000300 	.word	0x50000300
 8001c98:	50000700 	.word	0x50000700
 8001c9c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f023 010f 	bic.w	r1, r3, #15
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	1e5a      	subs	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cd0:	e007      	b.n	8001ce2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 020f 	bic.w	r2, r2, #15
 8001ce0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cf2:	e007      	b.n	8001d04 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf8:	f043 0210 	orr.w	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	@ 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	bf00      	nop

08001d10 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d34:	d004      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x30>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8e      	ldr	r2, [pc, #568]	@ (8001f74 <HAL_ADC_IRQHandler+0x264>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_IRQHandler+0x34>
 8001d40:	4b8d      	ldr	r3, [pc, #564]	@ (8001f78 <HAL_ADC_IRQHandler+0x268>)
 8001d42:	e000      	b.n	8001d46 <HAL_ADC_IRQHandler+0x36>
 8001d44:	4b8d      	ldr	r3, [pc, #564]	@ (8001f7c <HAL_ADC_IRQHandler+0x26c>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fd82 	bl	8001850 <LL_ADC_GetMultimode>
 8001d4c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d017      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x78>
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d012      	beq.n	8001d88 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fed4 	bl	8002b28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2202      	movs	r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_ADC_IRQHandler+0x8c>
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10b      	bne.n	8001db4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8094 	beq.w	8001ed0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 808e 	beq.w	8001ed0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fc9b 	bl	800170c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d072      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a64      	ldr	r2, [pc, #400]	@ (8001f74 <HAL_ADC_IRQHandler+0x264>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_ADC_IRQHandler+0xea>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a65      	ldr	r2, [pc, #404]	@ (8001f80 <HAL_ADC_IRQHandler+0x270>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d002      	beq.n	8001df6 <HAL_ADC_IRQHandler+0xe6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e003      	b.n	8001dfe <HAL_ADC_IRQHandler+0xee>
 8001df6:	4b63      	ldr	r3, [pc, #396]	@ (8001f84 <HAL_ADC_IRQHandler+0x274>)
 8001df8:	e001      	b.n	8001dfe <HAL_ADC_IRQHandler+0xee>
 8001dfa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d008      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d002      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b09      	cmp	r3, #9
 8001e16:	d104      	bne.n	8001e22 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	e014      	b.n	8001e4c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a53      	ldr	r2, [pc, #332]	@ (8001f74 <HAL_ADC_IRQHandler+0x264>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d009      	beq.n	8001e40 <HAL_ADC_IRQHandler+0x130>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a53      	ldr	r2, [pc, #332]	@ (8001f80 <HAL_ADC_IRQHandler+0x270>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d002      	beq.n	8001e3c <HAL_ADC_IRQHandler+0x12c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e003      	b.n	8001e44 <HAL_ADC_IRQHandler+0x134>
 8001e3c:	4b51      	ldr	r3, [pc, #324]	@ (8001f84 <HAL_ADC_IRQHandler+0x274>)
 8001e3e:	e001      	b.n	8001e44 <HAL_ADC_IRQHandler+0x134>
 8001e40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e44:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d135      	bne.n	8001ec2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d12e      	bne.n	8001ec2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fd6e 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d11a      	bne.n	8001eaa <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020c 	bic.w	r2, r2, #12
 8001e82:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d112      	bne.n	8001ec2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ea8:	e00b      	b.n	8001ec2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eba:	f043 0201 	orr.w	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f984 	bl	80021d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	220c      	movs	r2, #12
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADC_IRQHandler+0x1d4>
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10b      	bne.n	8001efc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80b3 	beq.w	8002056 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80ad 	beq.w	8002056 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fc36 	bl	800178a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f1e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fbf1 	bl	800170c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f2a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_ADC_IRQHandler+0x264>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_ADC_IRQHandler+0x23a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <HAL_ADC_IRQHandler+0x270>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d002      	beq.n	8001f46 <HAL_ADC_IRQHandler+0x236>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e003      	b.n	8001f4e <HAL_ADC_IRQHandler+0x23e>
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <HAL_ADC_IRQHandler+0x274>)
 8001f48:	e001      	b.n	8001f4e <HAL_ADC_IRQHandler+0x23e>
 8001f4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d008      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d002      	beq.n	8001f68 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b07      	cmp	r3, #7
 8001f66:	d10f      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	e01f      	b.n	8001fb2 <HAL_ADC_IRQHandler+0x2a2>
 8001f72:	bf00      	nop
 8001f74:	50000100 	.word	0x50000100
 8001f78:	50000300 	.word	0x50000300
 8001f7c:	50000700 	.word	0x50000700
 8001f80:	50000500 	.word	0x50000500
 8001f84:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a8b      	ldr	r2, [pc, #556]	@ (80021bc <HAL_ADC_IRQHandler+0x4ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d009      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x296>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a8a      	ldr	r2, [pc, #552]	@ (80021c0 <HAL_ADC_IRQHandler+0x4b0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d002      	beq.n	8001fa2 <HAL_ADC_IRQHandler+0x292>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	e003      	b.n	8001faa <HAL_ADC_IRQHandler+0x29a>
 8001fa2:	4b88      	ldr	r3, [pc, #544]	@ (80021c4 <HAL_ADC_IRQHandler+0x4b4>)
 8001fa4:	e001      	b.n	8001faa <HAL_ADC_IRQHandler+0x29a>
 8001fa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001faa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d047      	beq.n	8002048 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0x2c2>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03f      	beq.n	8002048 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d13a      	bne.n	8002048 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fdc:	2b40      	cmp	r3, #64	@ 0x40
 8001fde:	d133      	bne.n	8002048 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d12e      	bne.n	8002048 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fcbe 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11a      	bne.n	8002030 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002008:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d112      	bne.n	8002048 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800202e:	e00b      	b.n	8002048 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fd45 	bl	8002ad8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2260      	movs	r2, #96	@ 0x60
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	d011      	beq.n	8002084 <HAL_ADC_IRQHandler+0x374>
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8b4 	bl	80021e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x3a4>
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fd2b 	bl	8002b00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x3d4>
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fd1d 	bl	8002b14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d043      	beq.n	8002176 <HAL_ADC_IRQHandler+0x466>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d03e      	beq.n	8002176 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002100:	2301      	movs	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
 8002104:	e021      	b.n	800214a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002114:	d004      	beq.n	8002120 <HAL_ADC_IRQHandler+0x410>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <HAL_ADC_IRQHandler+0x4ac>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_ADC_IRQHandler+0x414>
 8002120:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <HAL_ADC_IRQHandler+0x4b8>)
 8002122:	e000      	b.n	8002126 <HAL_ADC_IRQHandler+0x416>
 8002124:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <HAL_ADC_IRQHandler+0x4bc>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fba0 	bl	800186c <LL_ADC_GetMultiDMATransfer>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002132:	2301      	movs	r3, #1
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
 8002136:	e008      	b.n	800214a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002146:	2301      	movs	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10e      	bne.n	800216e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002154:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f845 	bl	80021f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2210      	movs	r2, #16
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d018      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x4a2>
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002186:	2b00      	cmp	r3, #0
 8002188:	d013      	beq.n	80021b2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	f043 0208 	orr.w	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021aa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fc9d 	bl	8002aec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	@ 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	50000100 	.word	0x50000100
 80021c0:	50000500 	.word	0x50000500
 80021c4:	50000400 	.word	0x50000400
 80021c8:	50000300 	.word	0x50000300
 80021cc:	50000700 	.word	0x50000700

080021d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0b6      	sub	sp, #216	@ 0xd8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002226:	2b01      	cmp	r3, #1
 8002228:	d102      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x24>
 800222a:	2302      	movs	r3, #2
 800222c:	f000 bc13 	b.w	8002a56 <HAL_ADC_ConfigChannel+0x84a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fb84 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	f040 83f3 	bne.w	8002a30 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f7ff fa6b 	bl	8001732 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fb72 	bl	800194a <LL_ADC_REG_IsConversionOngoing>
 8002266:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fb7e 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 8002274:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002278:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 81d9 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 81d4 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002294:	d10f      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7ff fa85 	bl	80017b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fa19 	bl	80016e6 <LL_ADC_SetSamplingTimeCommonConfig>
 80022b4:	e00e      	b.n	80022d4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f7ff fa74 	bl	80017b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fa09 	bl	80016e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	08db      	lsrs	r3, r3, #3
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d022      	beq.n	800233c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002306:	f7ff f963 	bl	80015d0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6919      	ldr	r1, [r3, #16]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	461a      	mov	r2, r3
 8002318:	f7ff f9af 	bl	800167a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x126>
 800232c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002330:	e000      	b.n	8002334 <HAL_ADC_ConfigChannel+0x128>
 8002332:	2300      	movs	r3, #0
 8002334:	461a      	mov	r2, r3
 8002336:	f7ff f9bb 	bl	80016b0 <LL_ADC_SetOffsetSaturation>
 800233a:	e17b      	b.n	8002634 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f968 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10a      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x15c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2100      	movs	r1, #0
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f95d 	bl	8001618 <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	e01e      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x19a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f952 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800238a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800238e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e004      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800239a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_ConfigChannel+0x1b2>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0e9b      	lsrs	r3, r3, #26
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	e018      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1e4>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80023d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80023da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e004      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80023e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d106      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f921 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f905 	bl	8001618 <LL_ADC_GetOffsetChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_ADC_ConfigChannel+0x222>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f8fa 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	e01e      	b.n	800246c <HAL_ADC_ConfigChannel+0x260>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f8ef 	bl	8001618 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800244c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e004      	b.n	800246a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x278>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	e018      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x2aa>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002498:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800249c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80024a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e004      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80024ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d106      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2200      	movs	r2, #0
 80024c0:	2101      	movs	r1, #1
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f8be 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f8a2 	bl	8001618 <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x2e8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f897 	bl	8001618 <LL_ADC_GetOffsetChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	f003 021f 	and.w	r2, r3, #31
 80024f2:	e01e      	b.n	8002532 <HAL_ADC_ConfigChannel+0x326>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f88c 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002512:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800251a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002522:	2320      	movs	r3, #32
 8002524:	e004      	b.n	8002530 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <HAL_ADC_ConfigChannel+0x33e>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0e9b      	lsrs	r3, r3, #26
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	e016      	b.n	8002578 <HAL_ADC_ConfigChannel+0x36c>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800255c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800255e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002562:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e004      	b.n	8002578 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800256e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	2102      	movs	r1, #2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f85d 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2103      	movs	r1, #3
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f841 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x3aa>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2103      	movs	r1, #3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f836 	bl	8001618 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	e017      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x3da>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2103      	movs	r1, #3
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f82b 	bl	8001618 <LL_ADC_GetOffsetChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80025d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e003      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025de:	fab3 f383 	clz	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x3f2>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	e011      	b.n	8002622 <HAL_ADC_ConfigChannel+0x416>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800260c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800260e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002616:	2320      	movs	r3, #32
 8002618:	e003      	b.n	8002622 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800261a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002622:	429a      	cmp	r2, r3
 8002624:	d106      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	2103      	movs	r1, #3
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f808 	bl	8001644 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f973 	bl	8001924 <LL_ADC_IsEnabled>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 813d 	bne.w	80028c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff f8d8 	bl	8001808 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4aa2      	ldr	r2, [pc, #648]	@ (80028e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	f040 812e 	bne.w	80028c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_ADC_ConfigChannel+0x480>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2b09      	cmp	r3, #9
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e019      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x4b4>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800269a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800269c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800269e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80026a4:	2320      	movs	r3, #32
 80026a6:	e003      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80026a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2b09      	cmp	r3, #9
 80026b8:	bf94      	ite	ls
 80026ba:	2301      	movls	r3, #1
 80026bc:	2300      	movhi	r3, #0
 80026be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d079      	beq.n	80027b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x4d4>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	3301      	adds	r3, #1
 80026d8:	069b      	lsls	r3, r3, #26
 80026da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026de:	e015      	b.n	800270c <HAL_ADC_ConfigChannel+0x500>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80026ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80026f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e003      	b.n	8002704 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80026fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	069b      	lsls	r3, r3, #26
 8002708:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_ADC_ConfigChannel+0x520>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	3301      	adds	r3, #1
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	e017      	b.n	800275c <HAL_ADC_ConfigChannel+0x550>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800273a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800273e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002744:	2320      	movs	r3, #32
 8002746:	e003      	b.n	8002750 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3301      	adds	r3, #1
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	ea42 0103 	orr.w	r1, r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x576>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	051b      	lsls	r3, r3, #20
 8002780:	e018      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x5a8>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800279e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b4:	430b      	orrs	r3, r1
 80027b6:	e07e      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x5c8>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	3301      	adds	r3, #1
 80027cc:	069b      	lsls	r3, r3, #26
 80027ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027d2:	e015      	b.n	8002800 <HAL_ADC_ConfigChannel+0x5f4>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80027e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80027e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e003      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80027f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	3301      	adds	r3, #1
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x614>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	3301      	adds	r3, #1
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	e017      	b.n	8002850 <HAL_ADC_ConfigChannel+0x644>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	61fb      	str	r3, [r7, #28]
  return result;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e003      	b.n	8002844 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	ea42 0103 	orr.w	r1, r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_ADC_ConfigChannel+0x670>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	3301      	adds	r3, #1
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	3b1e      	subs	r3, #30
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800287a:	e01b      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x6a8>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	613b      	str	r3, [r7, #16]
  return result;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e003      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f003 021f 	and.w	r2, r3, #31
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	3b1e      	subs	r3, #30
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe ff78 	bl	80017b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HAL_ADC_ConfigChannel+0x6e0>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80be 	beq.w	8002a4a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0x6d6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10a      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x6ec>
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80028e4:	e009      	b.n	80028fa <HAL_ADC_ConfigChannel+0x6ee>
 80028e6:	bf00      	nop
 80028e8:	407f0000 	.word	0x407f0000
 80028ec:	80080000 	.word	0x80080000
 80028f0:	50000100 	.word	0x50000100
 80028f4:	50000300 	.word	0x50000300
 80028f8:	4b59      	ldr	r3, [pc, #356]	@ (8002a60 <HAL_ADC_ConfigChannel+0x854>)
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fe5a 	bl	80015b4 <LL_ADC_GetCommonPathInternalCh>
 8002900:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a56      	ldr	r2, [pc, #344]	@ (8002a64 <HAL_ADC_ConfigChannel+0x858>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x70c>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a55      	ldr	r2, [pc, #340]	@ (8002a68 <HAL_ADC_ConfigChannel+0x85c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d13a      	bne.n	800298e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800291c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d134      	bne.n	800298e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800292c:	d005      	beq.n	800293a <HAL_ADC_ConfigChannel+0x72e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a4e      	ldr	r2, [pc, #312]	@ (8002a6c <HAL_ADC_ConfigChannel+0x860>)
 8002934:	4293      	cmp	r3, r2
 8002936:	f040 8085 	bne.w	8002a44 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002942:	d004      	beq.n	800294e <HAL_ADC_ConfigChannel+0x742>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a49      	ldr	r2, [pc, #292]	@ (8002a70 <HAL_ADC_ConfigChannel+0x864>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x746>
 800294e:	4a49      	ldr	r2, [pc, #292]	@ (8002a74 <HAL_ADC_ConfigChannel+0x868>)
 8002950:	e000      	b.n	8002954 <HAL_ADC_ConfigChannel+0x748>
 8002952:	4a43      	ldr	r2, [pc, #268]	@ (8002a60 <HAL_ADC_ConfigChannel+0x854>)
 8002954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002958:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f7fe fe15 	bl	800158e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002964:	4b44      	ldr	r3, [pc, #272]	@ (8002a78 <HAL_ADC_ConfigChannel+0x86c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	4a44      	ldr	r2, [pc, #272]	@ (8002a7c <HAL_ADC_ConfigChannel+0x870>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800297e:	e002      	b.n	8002986 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3b01      	subs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f9      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800298c:	e05a      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a3b      	ldr	r2, [pc, #236]	@ (8002a80 <HAL_ADC_ConfigChannel+0x874>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d125      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800299c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11f      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a31      	ldr	r2, [pc, #196]	@ (8002a70 <HAL_ADC_ConfigChannel+0x864>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d104      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x7ac>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a34      	ldr	r2, [pc, #208]	@ (8002a84 <HAL_ADC_ConfigChannel+0x878>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d047      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c0:	d004      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x7c0>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a70 <HAL_ADC_ConfigChannel+0x864>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x7c4>
 80029cc:	4a29      	ldr	r2, [pc, #164]	@ (8002a74 <HAL_ADC_ConfigChannel+0x868>)
 80029ce:	e000      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7c6>
 80029d0:	4a23      	ldr	r2, [pc, #140]	@ (8002a60 <HAL_ADC_ConfigChannel+0x854>)
 80029d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7fe fdd6 	bl	800158e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e2:	e031      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a27      	ldr	r2, [pc, #156]	@ (8002a88 <HAL_ADC_ConfigChannel+0x87c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12d      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d127      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <HAL_ADC_ConfigChannel+0x864>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a0c:	d004      	beq.n	8002a18 <HAL_ADC_ConfigChannel+0x80c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <HAL_ADC_ConfigChannel+0x864>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x810>
 8002a18:	4a16      	ldr	r2, [pc, #88]	@ (8002a74 <HAL_ADC_ConfigChannel+0x868>)
 8002a1a:	e000      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x812>
 8002a1c:	4a10      	ldr	r2, [pc, #64]	@ (8002a60 <HAL_ADC_ConfigChannel+0x854>)
 8002a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f7fe fdb0 	bl	800158e <LL_ADC_SetCommonPathInternalCh>
 8002a2e:	e00c      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a42:	e002      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a44:	bf00      	nop
 8002a46:	e000      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a52:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	37d8      	adds	r7, #216	@ 0xd8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	50000700 	.word	0x50000700
 8002a64:	c3210000 	.word	0xc3210000
 8002a68:	90c00010 	.word	0x90c00010
 8002a6c:	50000600 	.word	0x50000600
 8002a70:	50000100 	.word	0x50000100
 8002a74:	50000300 	.word	0x50000300
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	053e2d63 	.word	0x053e2d63
 8002a80:	c7520000 	.word	0xc7520000
 8002a84:	50000500 	.word	0x50000500
 8002a88:	cb840000 	.word	0xcb840000

08002a8c <LL_ADC_IsEnabled>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <LL_ADC_IsEnabled+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <LL_ADC_IsEnabled+0x1a>
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b0a1      	sub	sp, #132	@ 0x84
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0e7      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b62:	2300      	movs	r3, #0
 8002b64:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b66:	2300      	movs	r3, #0
 8002b68:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b72:	d102      	bne.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b74:	4b6f      	ldr	r3, [pc, #444]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	e009      	b.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d102      	bne.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002b84:	4b6d      	ldr	r3, [pc, #436]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	e001      	b.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0be      	b.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff7f 	bl	8002ab2 <LL_ADC_REG_IsConversionOngoing>
 8002bb4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff79 	bl	8002ab2 <LL_ADC_REG_IsConversionOngoing>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 80a0 	bne.w	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 809c 	bne.w	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd8:	d004      	beq.n	8002be4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a55      	ldr	r2, [pc, #340]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002be4:	4b56      	ldr	r3, [pc, #344]	@ (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002be6:	e000      	b.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002be8:	4b56      	ldr	r3, [pc, #344]	@ (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002bea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d04b      	beq.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c06:	035b      	lsls	r3, r3, #13
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c18:	d004      	beq.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a45      	ldr	r2, [pc, #276]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d10f      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c28:	f7ff ff30 	bl	8002a8c <LL_ADC_IsEnabled>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	4841      	ldr	r0, [pc, #260]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c30:	f7ff ff2c 	bl	8002a8c <LL_ADC_IsEnabled>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4323      	orrs	r3, r4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e012      	b.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c44:	483c      	ldr	r0, [pc, #240]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c46:	f7ff ff21 	bl	8002a8c <LL_ADC_IsEnabled>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	483b      	ldr	r0, [pc, #236]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c4e:	f7ff ff1d 	bl	8002a8c <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	431c      	orrs	r4, r3
 8002c56:	483c      	ldr	r0, [pc, #240]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c58:	f7ff ff18 	bl	8002a8c <LL_ADC_IsEnabled>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4323      	orrs	r3, r4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d056      	beq.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c76:	f023 030f 	bic.w	r3, r3, #15
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	6811      	ldr	r1, [r2, #0]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	6892      	ldr	r2, [r2, #8]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	431a      	orrs	r2, r3
 8002c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c88:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c8a:	e047      	b.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca0:	d004      	beq.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a23      	ldr	r2, [pc, #140]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d10f      	bne.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002cac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002cb0:	f7ff feec 	bl	8002a8c <LL_ADC_IsEnabled>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	481f      	ldr	r0, [pc, #124]	@ (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cb8:	f7ff fee8 	bl	8002a8c <LL_ADC_IsEnabled>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4323      	orrs	r3, r4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e012      	b.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ccc:	481a      	ldr	r0, [pc, #104]	@ (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cce:	f7ff fedd 	bl	8002a8c <LL_ADC_IsEnabled>
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	4819      	ldr	r0, [pc, #100]	@ (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002cd6:	f7ff fed9 	bl	8002a8c <LL_ADC_IsEnabled>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	431c      	orrs	r4, r3
 8002cde:	481a      	ldr	r0, [pc, #104]	@ (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ce0:	f7ff fed4 	bl	8002a8c <LL_ADC_IsEnabled>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4323      	orrs	r3, r4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cfe:	f023 030f 	bic.w	r3, r3, #15
 8002d02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d06:	e009      	b.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d1a:	e000      	b.n	8002d1e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3784      	adds	r7, #132	@ 0x84
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	50000100 	.word	0x50000100
 8002d38:	50000400 	.word	0x50000400
 8002d3c:	50000500 	.word	0x50000500
 8002d40:	50000300 	.word	0x50000300
 8002d44:	50000700 	.word	0x50000700
 8002d48:	50000600 	.word	0x50000600

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4907      	ldr	r1, [pc, #28]	@ (8002de8 <__NVIC_EnableIRQ+0x38>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	@ (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	@ (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	@ 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	@ 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff8e 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff29 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f10:	f7ff ff40 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff90 	bl	8002e40 <NVIC_EncodePriority>
 8002f20:	4602      	mov	r2, r0
 8002f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff5f 	bl	8002dec <__NVIC_SetPriority>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff33 	bl	8002db0 <__NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ffa4 	bl	8002ea8 <SysTick_Config>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e014      	b.n	8002fa6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	791b      	ldrb	r3, [r3, #4]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7fe f8ab 	bl	80010e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	@ 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_DAC_ConfigChannel+0x1c>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e1a1      	b.n	8003314 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	795b      	ldrb	r3, [r3, #5]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DAC_ConfigChannel+0x32>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e198      	b.n	8003314 <HAL_DAC_ConfigChannel+0x364>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2202      	movs	r2, #2
 8002fec:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d17a      	bne.n	80030ec <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ff6:	f7fe faab 	bl	8001550 <HAL_GetTick>
 8002ffa:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d13d      	bne.n	800307e <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003002:	e018      	b.n	8003036 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003004:	f7fe faa4 	bl	8001550 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d911      	bls.n	8003036 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003018:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f043 0208 	orr.w	r2, r3, #8
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2203      	movs	r2, #3
 8003030:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e16e      	b.n	8003314 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1df      	bne.n	8003004 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
 800304e:	e020      	b.n	8003092 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003050:	f7fe fa7e 	bl	8001550 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d90f      	bls.n	800307e <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003064:	2b00      	cmp	r3, #0
 8003066:	da0a      	bge.n	800307e <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f043 0208 	orr.w	r2, r3, #8
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e14a      	b.n	8003314 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003084:	2b00      	cmp	r3, #0
 8003086:	dbe3      	blt.n	8003050 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003090:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	ea02 0103 	and.w	r1, r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	21ff      	movs	r1, #255	@ 0xff
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	ea02 0103 	and.w	r1, r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d11d      	bne.n	8003130 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	221f      	movs	r2, #31
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310c:	4013      	ands	r3, r2
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003124:	4313      	orrs	r3, r2
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2207      	movs	r2, #7
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003148:	4013      	ands	r3, r2
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d102      	bne.n	800315a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
 8003158:	e00f      	b.n	800317a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d102      	bne.n	8003168 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003162:	2301      	movs	r3, #1
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	e008      	b.n	800317a <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003170:	2301      	movs	r3, #1
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	e001      	b.n	800317a <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319c:	4013      	ands	r3, r2
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	791b      	ldrb	r3, [r3, #4]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d102      	bne.n	80031ae <HAL_DAC_ConfigChannel+0x1fe>
 80031a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031ac:	e000      	b.n	80031b0 <HAL_DAC_ConfigChannel+0x200>
 80031ae:	2300      	movs	r3, #0
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c8:	4013      	ands	r3, r2
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	795b      	ldrb	r3, [r3, #5]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d102      	bne.n	80031da <HAL_DAC_ConfigChannel+0x22a>
 80031d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031d8:	e000      	b.n	80031dc <HAL_DAC_ConfigChannel+0x22c>
 80031da:	2300      	movs	r3, #0
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d114      	bne.n	800321c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80031f2:	f001 fa35 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80031f6:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4a48      	ldr	r2, [pc, #288]	@ (800331c <HAL_DAC_ConfigChannel+0x36c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d904      	bls.n	800320a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
 8003208:	e00f      	b.n	800322a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4a44      	ldr	r2, [pc, #272]	@ (8003320 <HAL_DAC_ConfigChannel+0x370>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d90a      	bls.n	8003228 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
 800321a:	e006      	b.n	800322a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003222:	4313      	orrs	r3, r2
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
 8003226:	e000      	b.n	800322a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003228:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003238:	4313      	orrs	r3, r2
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003242:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43da      	mvns	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	400a      	ands	r2, r1
 8003260:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327c:	4013      	ands	r3, r2
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003294:	4313      	orrs	r3, r2
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	22c0      	movs	r2, #192	@ 0xc0
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	400a      	ands	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	ea02 0103 	and.w	r1, r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	409a      	lsls	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003312:	7ffb      	ldrb	r3, [r7, #31]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3728      	adds	r7, #40	@ 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	09896800 	.word	0x09896800
 8003320:	04c4b400 	.word	0x04c4b400

08003324 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d005      	beq.n	8003348 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2204      	movs	r2, #4
 8003340:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	e037      	b.n	80033b8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 020e 	bic.w	r2, r2, #14
 8003356:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003362:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003366:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f202 	lsl.w	r2, r1, r2
 800338a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003394:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ac:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033b6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d00d      	beq.n	800340a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2204      	movs	r2, #4
 80033f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e047      	b.n	800349a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 020e 	bic.w	r2, r2, #14
 8003418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	f003 021f 	and.w	r2, r3, #31
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003456:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00c      	beq.n	800347a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800346e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003478:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
    }
  }
  return status;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034b2:	e15a      	b.n	800376a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 814c 	beq.w	8003764 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d005      	beq.n	80034e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d130      	bne.n	8003546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800351a:	2201      	movs	r2, #1
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	f003 0201 	and.w	r2, r3, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b03      	cmp	r3, #3
 8003550:	d017      	beq.n	8003582 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2203      	movs	r2, #3
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d123      	bne.n	80035d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	08da      	lsrs	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3208      	adds	r2, #8
 8003596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	08da      	lsrs	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3208      	adds	r2, #8
 80035d0:	6939      	ldr	r1, [r7, #16]
 80035d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80a6 	beq.w	8003764 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003618:	4b5b      	ldr	r3, [pc, #364]	@ (8003788 <HAL_GPIO_Init+0x2e4>)
 800361a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361c:	4a5a      	ldr	r2, [pc, #360]	@ (8003788 <HAL_GPIO_Init+0x2e4>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6613      	str	r3, [r2, #96]	@ 0x60
 8003624:	4b58      	ldr	r3, [pc, #352]	@ (8003788 <HAL_GPIO_Init+0x2e4>)
 8003626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003630:	4a56      	ldr	r2, [pc, #344]	@ (800378c <HAL_GPIO_Init+0x2e8>)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3302      	adds	r3, #2
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	220f      	movs	r2, #15
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800365a:	d01f      	beq.n	800369c <HAL_GPIO_Init+0x1f8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a4c      	ldr	r2, [pc, #304]	@ (8003790 <HAL_GPIO_Init+0x2ec>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d019      	beq.n	8003698 <HAL_GPIO_Init+0x1f4>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a4b      	ldr	r2, [pc, #300]	@ (8003794 <HAL_GPIO_Init+0x2f0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_GPIO_Init+0x1f0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a4a      	ldr	r2, [pc, #296]	@ (8003798 <HAL_GPIO_Init+0x2f4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00d      	beq.n	8003690 <HAL_GPIO_Init+0x1ec>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a49      	ldr	r2, [pc, #292]	@ (800379c <HAL_GPIO_Init+0x2f8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <HAL_GPIO_Init+0x1e8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a48      	ldr	r2, [pc, #288]	@ (80037a0 <HAL_GPIO_Init+0x2fc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_GPIO_Init+0x1e4>
 8003684:	2305      	movs	r3, #5
 8003686:	e00a      	b.n	800369e <HAL_GPIO_Init+0x1fa>
 8003688:	2306      	movs	r3, #6
 800368a:	e008      	b.n	800369e <HAL_GPIO_Init+0x1fa>
 800368c:	2304      	movs	r3, #4
 800368e:	e006      	b.n	800369e <HAL_GPIO_Init+0x1fa>
 8003690:	2303      	movs	r3, #3
 8003692:	e004      	b.n	800369e <HAL_GPIO_Init+0x1fa>
 8003694:	2302      	movs	r3, #2
 8003696:	e002      	b.n	800369e <HAL_GPIO_Init+0x1fa>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_GPIO_Init+0x1fa>
 800369c:	2300      	movs	r3, #0
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	f002 0203 	and.w	r2, r2, #3
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	4093      	lsls	r3, r2
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036ae:	4937      	ldr	r1, [pc, #220]	@ (800378c <HAL_GPIO_Init+0x2e8>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	3302      	adds	r3, #2
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036bc:	4b39      	ldr	r3, [pc, #228]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036e0:	4a30      	ldr	r2, [pc, #192]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036e6:	4b2f      	ldr	r3, [pc, #188]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800370a:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003710:	4b24      	ldr	r3, [pc, #144]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003734:	4a1b      	ldr	r2, [pc, #108]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800373a:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800375e:	4a11      	ldr	r2, [pc, #68]	@ (80037a4 <HAL_GPIO_Init+0x300>)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3301      	adds	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	f47f ae9d 	bne.w	80034b4 <HAL_GPIO_Init+0x10>
  }
}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40021000 	.word	0x40021000
 800378c:	40010000 	.word	0x40010000
 8003790:	48000400 	.word	0x48000400
 8003794:	48000800 	.word	0x48000800
 8003798:	48000c00 	.word	0x48000c00
 800379c:	48001000 	.word	0x48001000
 80037a0:	48001400 	.word	0x48001400
 80037a4:	40010400 	.word	0x40010400

080037a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
 80037b4:	4613      	mov	r3, r2
 80037b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037b8:	787b      	ldrb	r3, [r7, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037c4:	e002      	b.n	80037cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0ff      	b.n	80039ea <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d145      	bne.n	8003882 <HAL_PCD_Init+0xaa>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback = HAL_PCD_SOFCallback;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a7c      	ldr	r2, [pc, #496]	@ (80039f4 <HAL_PCD_Init+0x21c>)
 8003802:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
    hpcd->SetupStageCallback = HAL_PCD_SetupStageCallback;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a7b      	ldr	r2, [pc, #492]	@ (80039f8 <HAL_PCD_Init+0x220>)
 800380a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
    hpcd->ResetCallback = HAL_PCD_ResetCallback;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a7a      	ldr	r2, [pc, #488]	@ (80039fc <HAL_PCD_Init+0x224>)
 8003812:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    hpcd->SuspendCallback = HAL_PCD_SuspendCallback;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a79      	ldr	r2, [pc, #484]	@ (8003a00 <HAL_PCD_Init+0x228>)
 800381a:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
    hpcd->ResumeCallback = HAL_PCD_ResumeCallback;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a78      	ldr	r2, [pc, #480]	@ (8003a04 <HAL_PCD_Init+0x22c>)
 8003822:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
    hpcd->ConnectCallback = HAL_PCD_ConnectCallback;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a77      	ldr	r2, [pc, #476]	@ (8003a08 <HAL_PCD_Init+0x230>)
 800382a:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
    hpcd->DisconnectCallback = HAL_PCD_DisconnectCallback;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a76      	ldr	r2, [pc, #472]	@ (8003a0c <HAL_PCD_Init+0x234>)
 8003832:	f8c3 22f4 	str.w	r2, [r3, #756]	@ 0x2f4
    hpcd->DataOutStageCallback = HAL_PCD_DataOutStageCallback;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a75      	ldr	r2, [pc, #468]	@ (8003a10 <HAL_PCD_Init+0x238>)
 800383a:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
    hpcd->DataInStageCallback = HAL_PCD_DataInStageCallback;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a74      	ldr	r2, [pc, #464]	@ (8003a14 <HAL_PCD_Init+0x23c>)
 8003842:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
    hpcd->ISOOUTIncompleteCallback = HAL_PCD_ISOOUTIncompleteCallback;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a73      	ldr	r2, [pc, #460]	@ (8003a18 <HAL_PCD_Init+0x240>)
 800384a:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
    hpcd->ISOINIncompleteCallback = HAL_PCD_ISOINIncompleteCallback;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a72      	ldr	r2, [pc, #456]	@ (8003a1c <HAL_PCD_Init+0x244>)
 8003852:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
    hpcd->LPMCallback = HAL_PCDEx_LPM_Callback;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a71      	ldr	r2, [pc, #452]	@ (8003a20 <HAL_PCD_Init+0x248>)
 800385a:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
    hpcd->BCDCallback = HAL_PCDEx_BCD_Callback;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a70      	ldr	r2, [pc, #448]	@ (8003a24 <HAL_PCD_Init+0x24c>)
 8003862:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    if (hpcd->MspInitCallback == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <HAL_PCD_Init+0xa0>
    {
      hpcd->MspInitCallback = HAL_PCD_MspInit;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a6d      	ldr	r2, [pc, #436]	@ (8003a28 <HAL_PCD_Init+0x250>)
 8003874:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
    }

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2203      	movs	r2, #3
 8003886:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f003 f8f8 	bl	8006a84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
 8003898:	e03e      	b.n	8003918 <HAL_PCD_Init+0x140>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	3311      	adds	r3, #17
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	3310      	adds	r3, #16
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	3313      	adds	r3, #19
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	440b      	add	r3, r1
 80038e4:	3320      	adds	r3, #32
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	440b      	add	r3, r1
 80038f8:	3324      	adds	r3, #36	@ 0x24
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	3301      	adds	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	791b      	ldrb	r3, [r3, #4]
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	429a      	cmp	r2, r3
 8003920:	d3bb      	bcc.n	800389a <HAL_PCD_Init+0xc2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	e044      	b.n	80039b2 <HAL_PCD_Init+0x1da>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800393e:	7bfa      	ldrb	r2, [r7, #15]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003954:	7bfa      	ldrb	r2, [r7, #15]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	440b      	add	r3, r1
 8003962:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	440b      	add	r3, r1
 8003978:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	3301      	adds	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	791b      	ldrb	r3, [r3, #4]
 80039b6:	7bfa      	ldrb	r2, [r7, #15]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3b5      	bcc.n	8003928 <HAL_PCD_Init+0x150>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80039c8:	f003 f877 	bl	8006aba <USB_DevInit>

  hpcd->USB_Address = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	7a9b      	ldrb	r3, [r3, #10]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f898 	bl	8003b18 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	08003a71 	.word	0x08003a71
 80039f8:	08003a5d 	.word	0x08003a5d
 80039fc:	08003a85 	.word	0x08003a85
 8003a00:	08003a99 	.word	0x08003a99
 8003a04:	08003aad 	.word	0x08003aad
 8003a08:	08003af1 	.word	0x08003af1
 8003a0c:	08003b05 	.word	0x08003b05
 8003a10:	08003a2d 	.word	0x08003a2d
 8003a14:	08003a45 	.word	0x08003a45
 8003a18:	08003ac1 	.word	0x08003ac1
 8003a1c:	08003ad9 	.word	0x08003ad9
 8003a20:	08003b6d 	.word	0x08003b6d
 8003a24:	08003b85 	.word	0x08003b85
 8003a28:	080012e5 	.word	0x080012e5

08003a2c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_PCDEx_BCD_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_BCD_Callback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d141      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003baa:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb6:	d131      	bne.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bb8:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bbe:	4a46      	ldr	r2, [pc, #280]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bc8:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bd0:	4a41      	ldr	r2, [pc, #260]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bd8:	4b40      	ldr	r3, [pc, #256]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2232      	movs	r2, #50	@ 0x32
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	0c9b      	lsrs	r3, r3, #18
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bee:	e002      	b.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf6:	4b38      	ldr	r3, [pc, #224]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c02:	d102      	bne.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f2      	bne.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c0a:	4b33      	ldr	r3, [pc, #204]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c16:	d158      	bne.n	8003cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e057      	b.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c22:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c2c:	e04d      	b.n	8003cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c34:	d141      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c36:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c42:	d131      	bne.n	8003ca8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c44:	4b24      	ldr	r3, [pc, #144]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c4a:	4a23      	ldr	r2, [pc, #140]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c54:	4b20      	ldr	r3, [pc, #128]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c64:	4b1d      	ldr	r3, [pc, #116]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2232      	movs	r2, #50	@ 0x32
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	0c9b      	lsrs	r3, r3, #18
 8003c76:	3301      	adds	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c7a:	e002      	b.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c8e:	d102      	bne.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f2      	bne.n	8003c7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c96:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca2:	d112      	bne.n	8003cca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e011      	b.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cae:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cb8:	e007      	b.n	8003cca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cba:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cc2:	4a05      	ldr	r2, [pc, #20]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	431bde83 	.word	0x431bde83

08003ce4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ce8:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a04      	ldr	r2, [pc, #16]	@ (8003d00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cf2:	6093      	str	r3, [r2, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40007000 	.word	0x40007000

08003d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e2fe      	b.n	8004314 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d075      	beq.n	8003e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4b97      	ldr	r3, [pc, #604]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2c:	4b94      	ldr	r3, [pc, #592]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3e>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d002      	beq.n	8003d48 <HAL_RCC_OscConfig+0x44>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	4b8d      	ldr	r3, [pc, #564]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d05b      	beq.n	8003e0c <HAL_RCC_OscConfig+0x108>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d157      	bne.n	8003e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e2d9      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d68:	d106      	bne.n	8003d78 <HAL_RCC_OscConfig+0x74>
 8003d6a:	4b85      	ldr	r3, [pc, #532]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a84      	ldr	r2, [pc, #528]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e01d      	b.n	8003db4 <HAL_RCC_OscConfig+0xb0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x98>
 8003d82:	4b7f      	ldr	r3, [pc, #508]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7e      	ldr	r2, [pc, #504]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7b      	ldr	r2, [pc, #492]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0xb0>
 8003d9c:	4b78      	ldr	r3, [pc, #480]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a77      	ldr	r2, [pc, #476]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b75      	ldr	r3, [pc, #468]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a74      	ldr	r2, [pc, #464]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fbc8 	bl	8001550 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fd fbc4 	bl	8001550 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	@ 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e29e      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xc0>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd fbb4 	bl	8001550 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fd fbb0 	bl	8001550 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	@ 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e28a      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dfe:	4b60      	ldr	r3, [pc, #384]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0xe8>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d075      	beq.n	8003f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1a:	4b59      	ldr	r3, [pc, #356]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e24:	4b56      	ldr	r3, [pc, #344]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	d102      	bne.n	8003e3a <HAL_RCC_OscConfig+0x136>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d002      	beq.n	8003e40 <HAL_RCC_OscConfig+0x13c>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d11f      	bne.n	8003e80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e40:	4b4f      	ldr	r3, [pc, #316]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_OscConfig+0x154>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e25d      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e58:	4b49      	ldr	r3, [pc, #292]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	4946      	ldr	r1, [pc, #280]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e6c:	4b45      	ldr	r3, [pc, #276]	@ (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fd fb21 	bl	80014b8 <HAL_InitTick>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d043      	beq.n	8003f04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e249      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d023      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b3d      	ldr	r3, [pc, #244]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd fb5c 	bl	8001550 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fd fb58 	bl	8001550 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e232      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eae:	4b34      	ldr	r3, [pc, #208]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b31      	ldr	r3, [pc, #196]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	061b      	lsls	r3, r3, #24
 8003ec8:	492d      	ldr	r1, [pc, #180]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
 8003ece:	e01a      	b.n	8003f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd fb38 	bl	8001550 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7fd fb34 	bl	8001550 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e20e      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef6:	4b22      	ldr	r3, [pc, #136]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1e0>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d041      	beq.n	8003f96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01c      	beq.n	8003f54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1a:	4b19      	ldr	r3, [pc, #100]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f20:	4a17      	ldr	r2, [pc, #92]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fb11 	bl	8001550 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f32:	f7fd fb0d 	bl	8001550 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e1e7      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f44:	4b0e      	ldr	r3, [pc, #56]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0ef      	beq.n	8003f32 <HAL_RCC_OscConfig+0x22e>
 8003f52:	e020      	b.n	8003f96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f54:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5a:	4a09      	ldr	r2, [pc, #36]	@ (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7fd faf4 	bl	8001550 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f6a:	e00d      	b.n	8003f88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7fd faf0 	bl	8001550 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d906      	bls.n	8003f88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1ca      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f88:	4b8c      	ldr	r3, [pc, #560]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1ea      	bne.n	8003f6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80a6 	beq.w	80040f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fa8:	4b84      	ldr	r3, [pc, #528]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8003faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x2b4>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x2b6>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00d      	beq.n	8003fda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fca:	4b7c      	ldr	r3, [pc, #496]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fda:	4b79      	ldr	r3, [pc, #484]	@ (80041c0 <HAL_RCC_OscConfig+0x4bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe6:	4b76      	ldr	r3, [pc, #472]	@ (80041c0 <HAL_RCC_OscConfig+0x4bc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a75      	ldr	r2, [pc, #468]	@ (80041c0 <HAL_RCC_OscConfig+0x4bc>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fd faad 	bl	8001550 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fd faa9 	bl	8001550 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e183      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400c:	4b6c      	ldr	r3, [pc, #432]	@ (80041c0 <HAL_RCC_OscConfig+0x4bc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d108      	bne.n	8004032 <HAL_RCC_OscConfig+0x32e>
 8004020:	4b66      	ldr	r3, [pc, #408]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	4a65      	ldr	r2, [pc, #404]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004030:	e024      	b.n	800407c <HAL_RCC_OscConfig+0x378>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b05      	cmp	r3, #5
 8004038:	d110      	bne.n	800405c <HAL_RCC_OscConfig+0x358>
 800403a:	4b60      	ldr	r3, [pc, #384]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004040:	4a5e      	ldr	r2, [pc, #376]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800404a:	4b5c      	ldr	r3, [pc, #368]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	4a5a      	ldr	r2, [pc, #360]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800405a:	e00f      	b.n	800407c <HAL_RCC_OscConfig+0x378>
 800405c:	4b57      	ldr	r3, [pc, #348]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	4a56      	ldr	r2, [pc, #344]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800406c:	4b53      	ldr	r3, [pc, #332]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004072:	4a52      	ldr	r2, [pc, #328]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d016      	beq.n	80040b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004084:	f7fd fa64 	bl	8001550 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fd fa60 	bl	8001550 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e138      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a2:	4b46      	ldr	r3, [pc, #280]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ed      	beq.n	800408c <HAL_RCC_OscConfig+0x388>
 80040b0:	e015      	b.n	80040de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fd fa4d 	bl	8001550 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b8:	e00a      	b.n	80040d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f7fd fa49 	bl	8001550 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e121      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d0:	4b3a      	ldr	r3, [pc, #232]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1ed      	bne.n	80040ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040de:	7ffb      	ldrb	r3, [r7, #31]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d105      	bne.n	80040f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e4:	4b35      	ldr	r3, [pc, #212]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e8:	4a34      	ldr	r2, [pc, #208]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 80040ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d03c      	beq.n	8004176 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01c      	beq.n	800413e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004104:	4b2d      	ldr	r3, [pc, #180]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004106:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800410a:	4a2c      	ldr	r2, [pc, #176]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fd fa1c 	bl	8001550 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800411c:	f7fd fa18 	bl	8001550 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0f2      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800412e:	4b23      	ldr	r3, [pc, #140]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0ef      	beq.n	800411c <HAL_RCC_OscConfig+0x418>
 800413c:	e01b      	b.n	8004176 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800413e:	4b1f      	ldr	r3, [pc, #124]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004140:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004144:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414e:	f7fd f9ff 	bl	8001550 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004156:	f7fd f9fb 	bl	8001550 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e0d5      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004168:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1ef      	bne.n	8004156 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80c9 	beq.w	8004312 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004180:	4b0e      	ldr	r3, [pc, #56]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 030c 	and.w	r3, r3, #12
 8004188:	2b0c      	cmp	r3, #12
 800418a:	f000 8083 	beq.w	8004294 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d15e      	bne.n	8004254 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <HAL_RCC_OscConfig+0x4b8>)
 800419c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd f9d5 	bl	8001550 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a8:	e00c      	b.n	80041c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041aa:	f7fd f9d1 	bl	8001550 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d905      	bls.n	80041c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e0ab      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c4:	4b55      	ldr	r3, [pc, #340]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ec      	bne.n	80041aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d0:	4b52      	ldr	r3, [pc, #328]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	4b52      	ldr	r3, [pc, #328]	@ (8004320 <HAL_RCC_OscConfig+0x61c>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6a11      	ldr	r1, [r2, #32]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0112      	lsls	r2, r2, #4
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80041ea:	0212      	lsls	r2, r2, #8
 80041ec:	4311      	orrs	r1, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80041f2:	0852      	lsrs	r2, r2, #1
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0552      	lsls	r2, r2, #21
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041fe:	0852      	lsrs	r2, r2, #1
 8004200:	3a01      	subs	r2, #1
 8004202:	0652      	lsls	r2, r2, #25
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800420a:	06d2      	lsls	r2, r2, #27
 800420c:	430a      	orrs	r2, r1
 800420e:	4943      	ldr	r1, [pc, #268]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004210:	4313      	orrs	r3, r2
 8004212:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004214:	4b41      	ldr	r3, [pc, #260]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a40      	ldr	r2, [pc, #256]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800421e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004220:	4b3e      	ldr	r3, [pc, #248]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a3d      	ldr	r2, [pc, #244]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800422a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd f990 	bl	8001550 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd f98c 	bl	8001550 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e066      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004246:	4b35      	ldr	r3, [pc, #212]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x530>
 8004252:	e05e      	b.n	8004312 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004254:	4b31      	ldr	r3, [pc, #196]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a30      	ldr	r2, [pc, #192]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800425a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800425e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd f976 	bl	8001550 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004268:	f7fd f972 	bl	8001550 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e04c      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427a:	4b28      	ldr	r3, [pc, #160]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004286:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	4924      	ldr	r1, [pc, #144]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 800428c:	4b25      	ldr	r3, [pc, #148]	@ (8004324 <HAL_RCC_OscConfig+0x620>)
 800428e:	4013      	ands	r3, r2
 8004290:	60cb      	str	r3, [r1, #12]
 8004292:	e03e      	b.n	8004312 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e039      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042a0:	4b1e      	ldr	r3, [pc, #120]	@ (800431c <HAL_RCC_OscConfig+0x618>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f003 0203 	and.w	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d12c      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	3b01      	subs	r3, #1
 80042c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d123      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d11b      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d113      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	3b01      	subs	r3, #1
 80042f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d109      	bne.n	800430e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004304:	085b      	lsrs	r3, r3, #1
 8004306:	3b01      	subs	r3, #1
 8004308:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800430a:	429a      	cmp	r2, r3
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000
 8004320:	019f800c 	.word	0x019f800c
 8004324:	feeefffc 	.word	0xfeeefffc

08004328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e11e      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b91      	ldr	r3, [pc, #580]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d910      	bls.n	8004370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b8e      	ldr	r3, [pc, #568]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	498c      	ldr	r1, [pc, #560]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b8a      	ldr	r3, [pc, #552]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e106      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d073      	beq.n	8004464 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d129      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004384:	4b81      	ldr	r3, [pc, #516]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0f4      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004394:	f000 f99c 	bl	80046d0 <RCC_GetSysClockFreqFromPLLSource>
 8004398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4a7c      	ldr	r2, [pc, #496]	@ (8004590 <HAL_RCC_ClockConfig+0x268>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d93f      	bls.n	8004422 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043a2:	4b7a      	ldr	r3, [pc, #488]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d033      	beq.n	8004422 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d12f      	bne.n	8004422 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043c2:	4b72      	ldr	r3, [pc, #456]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043ca:	4a70      	ldr	r2, [pc, #448]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80043cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043d2:	2380      	movs	r3, #128	@ 0x80
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e024      	b.n	8004422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e0:	4b6a      	ldr	r3, [pc, #424]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0c6      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f0:	4b66      	ldr	r3, [pc, #408]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0be      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004400:	f000 f8ce 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8004404:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4a61      	ldr	r2, [pc, #388]	@ (8004590 <HAL_RCC_ClockConfig+0x268>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d909      	bls.n	8004422 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800440e:	4b5f      	ldr	r3, [pc, #380]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004416:	4a5d      	ldr	r2, [pc, #372]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800441c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b5a      	ldr	r3, [pc, #360]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4957      	ldr	r1, [pc, #348]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004434:	f7fd f88c 	bl	8001550 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fd f888 	bl	8001550 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e095      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b4e      	ldr	r3, [pc, #312]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d023      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800447c:	4b43      	ldr	r3, [pc, #268]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a42      	ldr	r2, [pc, #264]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004482:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004486:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004494:	4b3d      	ldr	r3, [pc, #244]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800449c:	4a3b      	ldr	r2, [pc, #236]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 800449e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b39      	ldr	r3, [pc, #228]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4936      	ldr	r1, [pc, #216]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	e008      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b80      	cmp	r3, #128	@ 0x80
 80044bc:	d105      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044be:	4b33      	ldr	r3, [pc, #204]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	4a32      	ldr	r2, [pc, #200]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80044c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d21d      	bcs.n	8004514 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 020f 	bic.w	r2, r3, #15
 80044e0:	4929      	ldr	r1, [pc, #164]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044e8:	f7fd f832 	bl	8001550 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fd f82e 	bl	8001550 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e03b      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b20      	ldr	r3, [pc, #128]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d1ed      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4b1a      	ldr	r3, [pc, #104]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4917      	ldr	r1, [pc, #92]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453e:	4b13      	ldr	r3, [pc, #76]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	490f      	ldr	r1, [pc, #60]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004552:	f000 f825 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8004556:	4602      	mov	r2, r0
 8004558:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	490c      	ldr	r1, [pc, #48]	@ (8004594 <HAL_RCC_ClockConfig+0x26c>)
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <HAL_RCC_ClockConfig+0x270>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004572:	4b0a      	ldr	r3, [pc, #40]	@ (800459c <HAL_RCC_ClockConfig+0x274>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fc ff9e 	bl	80014b8 <HAL_InitTick>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40022000 	.word	0x40022000
 800458c:	40021000 	.word	0x40021000
 8004590:	04c4b400 	.word	0x04c4b400
 8004594:	08006b68 	.word	0x08006b68
 8004598:	20000000 	.word	0x20000000
 800459c:	20000004 	.word	0x20000004

080045a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d102      	bne.n	80045b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045b2:	4b2a      	ldr	r3, [pc, #168]	@ (800465c <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	e047      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045b8:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 030c 	and.w	r3, r3, #12
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d102      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045c4:	4b25      	ldr	r3, [pc, #148]	@ (800465c <HAL_RCC_GetSysClockFreq+0xbc>)
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e03e      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ca:	4b23      	ldr	r3, [pc, #140]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d136      	bne.n	8004644 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045d6:	4b20      	ldr	r3, [pc, #128]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	3301      	adds	r3, #1
 80045ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d10c      	bne.n	800460e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045f4:	4a19      	ldr	r2, [pc, #100]	@ (800465c <HAL_RCC_GetSysClockFreq+0xbc>)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	4a16      	ldr	r2, [pc, #88]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045fe:	68d2      	ldr	r2, [r2, #12]
 8004600:	0a12      	lsrs	r2, r2, #8
 8004602:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	617b      	str	r3, [r7, #20]
      break;
 800460c:	e00c      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800460e:	4a13      	ldr	r2, [pc, #76]	@ (800465c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	4a10      	ldr	r2, [pc, #64]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004618:	68d2      	ldr	r2, [r2, #12]
 800461a:	0a12      	lsrs	r2, r2, #8
 800461c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004620:	fb02 f303 	mul.w	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]
      break;
 8004626:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	0e5b      	lsrs	r3, r3, #25
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	3301      	adds	r3, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	e001      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004648:	693b      	ldr	r3, [r7, #16]
}
 800464a:	4618      	mov	r0, r3
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000
 800465c:	00f42400 	.word	0x00f42400

08004660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b03      	ldr	r3, [pc, #12]	@ (8004674 <HAL_RCC_GetHCLKFreq+0x14>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000000 	.word	0x20000000

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800467c:	f7ff fff0 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4904      	ldr	r1, [pc, #16]	@ (80046a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000
 80046a0:	08006b78 	.word	0x08006b78

080046a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046a8:	f7ff ffda 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	0adb      	lsrs	r3, r3, #11
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4904      	ldr	r1, [pc, #16]	@ (80046cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	08006b78 	.word	0x08006b78

080046d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d10c      	bne.n	800470e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046f4:	4a17      	ldr	r2, [pc, #92]	@ (8004754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	4a14      	ldr	r2, [pc, #80]	@ (8004750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046fe:	68d2      	ldr	r2, [r2, #12]
 8004700:	0a12      	lsrs	r2, r2, #8
 8004702:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	617b      	str	r3, [r7, #20]
    break;
 800470c:	e00c      	b.n	8004728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470e:	4a11      	ldr	r2, [pc, #68]	@ (8004754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	fbb2 f3f3 	udiv	r3, r2, r3
 8004716:	4a0e      	ldr	r2, [pc, #56]	@ (8004750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004718:	68d2      	ldr	r2, [r2, #12]
 800471a:	0a12      	lsrs	r2, r2, #8
 800471c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004720:	fb02 f303 	mul.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
    break;
 8004726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004728:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	0e5b      	lsrs	r3, r3, #25
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	3301      	adds	r3, #1
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004742:	687b      	ldr	r3, [r7, #4]
}
 8004744:	4618      	mov	r0, r3
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	40021000 	.word	0x40021000
 8004754:	00f42400 	.word	0x00f42400

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004760:	2300      	movs	r3, #0
 8004762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004764:	2300      	movs	r3, #0
 8004766:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8098 	beq.w	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477a:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10d      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004786:	4b40      	ldr	r3, [pc, #256]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478a:	4a3f      	ldr	r2, [pc, #252]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004790:	6593      	str	r3, [r2, #88]	@ 0x58
 8004792:	4b3d      	ldr	r3, [pc, #244]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800479e:	2301      	movs	r3, #1
 80047a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047a2:	4b3a      	ldr	r3, [pc, #232]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a39      	ldr	r2, [pc, #228]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ae:	f7fc fecf 	bl	8001550 <HAL_GetTick>
 80047b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b4:	e009      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b6:	f7fc fecb 	bl	8001550 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d902      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	74fb      	strb	r3, [r7, #19]
        break;
 80047c8:	e005      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047ca:	4b30      	ldr	r3, [pc, #192]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ef      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d159      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01e      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d019      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047f8:	4b23      	ldr	r3, [pc, #140]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004804:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480a:	4a1f      	ldr	r2, [pc, #124]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004814:	4b1c      	ldr	r3, [pc, #112]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481a:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fc fe8b 	bl	8001550 <HAL_GetTick>
 800483a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483c:	e00b      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fc fe87 	bl	8001550 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d902      	bls.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	74fb      	strb	r3, [r7, #19]
            break;
 8004854:	e006      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004856:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0ec      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486a:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	4903      	ldr	r1, [pc, #12]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004880:	e008      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	74bb      	strb	r3, [r7, #18]
 8004886:	e005      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004888:	40021000 	.word	0x40021000
 800488c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004894:	7c7b      	ldrb	r3, [r7, #17]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d105      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489a:	4ba7      	ldr	r3, [pc, #668]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489e:	4aa6      	ldr	r2, [pc, #664]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048b2:	4ba1      	ldr	r3, [pc, #644]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f023 0203 	bic.w	r2, r3, #3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	499d      	ldr	r1, [pc, #628]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048d4:	4b98      	ldr	r3, [pc, #608]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	f023 020c 	bic.w	r2, r3, #12
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	4995      	ldr	r1, [pc, #596]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048f6:	4b90      	ldr	r3, [pc, #576]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	498c      	ldr	r1, [pc, #560]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004918:	4b87      	ldr	r3, [pc, #540]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	4984      	ldr	r1, [pc, #528]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800493a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	497b      	ldr	r1, [pc, #492]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800495c:	4b76      	ldr	r3, [pc, #472]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	4973      	ldr	r1, [pc, #460]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800497e:	4b6e      	ldr	r3, [pc, #440]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004984:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	496a      	ldr	r1, [pc, #424]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049a0:	4b65      	ldr	r3, [pc, #404]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4962      	ldr	r1, [pc, #392]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	4959      	ldr	r1, [pc, #356]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049e4:	4b54      	ldr	r3, [pc, #336]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	4951      	ldr	r1, [pc, #324]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a06:	4b4c      	ldr	r3, [pc, #304]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a14:	4948      	ldr	r1, [pc, #288]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a28:	4b43      	ldr	r3, [pc, #268]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	4940      	ldr	r1, [pc, #256]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a48:	4b3b      	ldr	r3, [pc, #236]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a52:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a60:	4b35      	ldr	r3, [pc, #212]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6e:	4932      	ldr	r1, [pc, #200]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a80:	4b2d      	ldr	r3, [pc, #180]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d015      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a98:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	4924      	ldr	r1, [pc, #144]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ac2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d015      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ade:	4916      	ldr	r1, [pc, #88]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aee:	d105      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af0:	4b11      	ldr	r3, [pc, #68]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4a10      	ldr	r2, [pc, #64]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004afa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d019      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	4908      	ldr	r1, [pc, #32]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b26:	d109      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b28:	4b03      	ldr	r3, [pc, #12]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4a02      	ldr	r2, [pc, #8]	@ (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b32:	60d3      	str	r3, [r2, #12]
 8004b34:	e002      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d015      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b48:	4b29      	ldr	r3, [pc, #164]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	4926      	ldr	r1, [pc, #152]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b68:	4b21      	ldr	r3, [pc, #132]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b86:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8e:	4918      	ldr	r1, [pc, #96]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ba0:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4a12      	ldr	r2, [pc, #72]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004baa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc6:	490a      	ldr	r1, [pc, #40]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a04      	ldr	r2, [pc, #16]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004be4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e049      	b.n	8004c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc faa2 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 facc 	bl	80051d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d020      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01b      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f06f 0202 	mvn.w	r2, #2
 8004cd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fa51 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004cf2:	e005      	b.n	8004d00 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fa43 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa54 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01b      	beq.n	8004d52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0204 	mvn.w	r2, #4
 8004d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fa2b 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004d3e:	e005      	b.n	8004d4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fa1d 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fa2e 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01b      	beq.n	8004d9e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0208 	mvn.w	r2, #8
 8004d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2204      	movs	r2, #4
 8004d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fa05 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004d8a:	e005      	b.n	8004d98 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f9f7 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fa08 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d020      	beq.n	8004dea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01b      	beq.n	8004dea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f06f 0210 	mvn.w	r2, #16
 8004dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f9df 	bl	8005194 <HAL_TIM_IC_CaptureCallback>
 8004dd6:	e005      	b.n	8004de4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f9d1 	bl	8005180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f9e2 	bl	80051a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00c      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f06f 0201 	mvn.w	r2, #1
 8004e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f9af 	bl	800516c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00c      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fbba 	bl	80055b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fbb2 	bl	80055c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f99c 	bl	80051bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0220 	mvn.w	r2, #32
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb7a 	bl	800559c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fb86 	bl	80055d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fb7e 	bl	80055ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fb76 	bl	8005600 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fb6e 	bl	8005614 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIM_ConfigClockSource+0x1c>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e0f6      	b.n	800514a <HAL_TIM_ConfigClockSource+0x20a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a6f      	ldr	r2, [pc, #444]	@ (8005154 <HAL_TIM_ConfigClockSource+0x214>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f000 80c1 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004f9c:	4a6d      	ldr	r2, [pc, #436]	@ (8005154 <HAL_TIM_ConfigClockSource+0x214>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f200 80c6 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8005158 <HAL_TIM_ConfigClockSource+0x218>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f000 80b9 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fac:	4a6a      	ldr	r2, [pc, #424]	@ (8005158 <HAL_TIM_ConfigClockSource+0x218>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f200 80be 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fb4:	4a69      	ldr	r2, [pc, #420]	@ (800515c <HAL_TIM_ConfigClockSource+0x21c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f000 80b1 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fbc:	4a67      	ldr	r2, [pc, #412]	@ (800515c <HAL_TIM_ConfigClockSource+0x21c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f200 80b6 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fc4:	4a66      	ldr	r2, [pc, #408]	@ (8005160 <HAL_TIM_ConfigClockSource+0x220>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f000 80a9 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fcc:	4a64      	ldr	r2, [pc, #400]	@ (8005160 <HAL_TIM_ConfigClockSource+0x220>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f200 80ae 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd4:	4a63      	ldr	r2, [pc, #396]	@ (8005164 <HAL_TIM_ConfigClockSource+0x224>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f000 80a1 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fdc:	4a61      	ldr	r2, [pc, #388]	@ (8005164 <HAL_TIM_ConfigClockSource+0x224>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	f200 80a6 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe4:	4a60      	ldr	r2, [pc, #384]	@ (8005168 <HAL_TIM_ConfigClockSource+0x228>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	f000 8099 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004fec:	4a5e      	ldr	r2, [pc, #376]	@ (8005168 <HAL_TIM_ConfigClockSource+0x228>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f200 809e 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ff8:	f000 8091 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8004ffc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005000:	f200 8096 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005004:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005008:	f000 8089 	beq.w	800511e <HAL_TIM_ConfigClockSource+0x1de>
 800500c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005010:	f200 808e 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005018:	d03e      	beq.n	8005098 <HAL_TIM_ConfigClockSource+0x158>
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800501e:	f200 8087 	bhi.w	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005026:	f000 8086 	beq.w	8005136 <HAL_TIM_ConfigClockSource+0x1f6>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502e:	d87f      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005030:	2b70      	cmp	r3, #112	@ 0x70
 8005032:	d01a      	beq.n	800506a <HAL_TIM_ConfigClockSource+0x12a>
 8005034:	2b70      	cmp	r3, #112	@ 0x70
 8005036:	d87b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005038:	2b60      	cmp	r3, #96	@ 0x60
 800503a:	d050      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x19e>
 800503c:	2b60      	cmp	r3, #96	@ 0x60
 800503e:	d877      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005040:	2b50      	cmp	r3, #80	@ 0x50
 8005042:	d03c      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x17e>
 8005044:	2b50      	cmp	r3, #80	@ 0x50
 8005046:	d873      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d058      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x1be>
 800504c:	2b40      	cmp	r3, #64	@ 0x40
 800504e:	d86f      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005050:	2b30      	cmp	r3, #48	@ 0x30
 8005052:	d064      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8005054:	2b30      	cmp	r3, #48	@ 0x30
 8005056:	d86b      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d060      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1de>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d867      	bhi.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d05c      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8005064:	2b10      	cmp	r3, #16
 8005066:	d05a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x1de>
 8005068:	e062      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800507a:	f000 f9d9 	bl	8005430 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800508c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	609a      	str	r2, [r3, #8]
      break;
 8005096:	e04f      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	f000 f9c2 	bl	8005430 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ba:	609a      	str	r2, [r3, #8]
      break;
 80050bc:	e03c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 f934 	bl	8005338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2150      	movs	r1, #80	@ 0x50
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 f98d 	bl	80053f6 <TIM_ITRx_SetConfig>
      break;
 80050dc:	e02c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 f953 	bl	8005396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2160      	movs	r1, #96	@ 0x60
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f97d 	bl	80053f6 <TIM_ITRx_SetConfig>
      break;
 80050fc:	e01c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510a:	461a      	mov	r2, r3
 800510c:	f000 f914 	bl	8005338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2140      	movs	r1, #64	@ 0x40
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f96d 	bl	80053f6 <TIM_ITRx_SetConfig>
      break;
 800511c:	e00c      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	4610      	mov	r0, r2
 800512a:	f000 f964 	bl	80053f6 <TIM_ITRx_SetConfig>
      break;
 800512e:	e003      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      break;
 8005134:	e000      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	00100070 	.word	0x00100070
 8005158:	00100060 	.word	0x00100060
 800515c:	00100050 	.word	0x00100050
 8005160:	00100040 	.word	0x00100040
 8005164:	00100030 	.word	0x00100030
 8005168:	00100020 	.word	0x00100020

0800516c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005314 <TIM_Base_SetConfig+0x144>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d017      	beq.n	8005218 <TIM_Base_SetConfig+0x48>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ee:	d013      	beq.n	8005218 <TIM_Base_SetConfig+0x48>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a49      	ldr	r2, [pc, #292]	@ (8005318 <TIM_Base_SetConfig+0x148>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00f      	beq.n	8005218 <TIM_Base_SetConfig+0x48>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a48      	ldr	r2, [pc, #288]	@ (800531c <TIM_Base_SetConfig+0x14c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_Base_SetConfig+0x48>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a47      	ldr	r2, [pc, #284]	@ (8005320 <TIM_Base_SetConfig+0x150>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_Base_SetConfig+0x48>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a46      	ldr	r2, [pc, #280]	@ (8005324 <TIM_Base_SetConfig+0x154>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_Base_SetConfig+0x48>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a45      	ldr	r2, [pc, #276]	@ (8005328 <TIM_Base_SetConfig+0x158>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a39      	ldr	r2, [pc, #228]	@ (8005314 <TIM_Base_SetConfig+0x144>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d023      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005238:	d01f      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a36      	ldr	r2, [pc, #216]	@ (8005318 <TIM_Base_SetConfig+0x148>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01b      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a35      	ldr	r2, [pc, #212]	@ (800531c <TIM_Base_SetConfig+0x14c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d017      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a34      	ldr	r2, [pc, #208]	@ (8005320 <TIM_Base_SetConfig+0x150>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a33      	ldr	r2, [pc, #204]	@ (8005324 <TIM_Base_SetConfig+0x154>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00f      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a33      	ldr	r2, [pc, #204]	@ (800532c <TIM_Base_SetConfig+0x15c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00b      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a32      	ldr	r2, [pc, #200]	@ (8005330 <TIM_Base_SetConfig+0x160>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a31      	ldr	r2, [pc, #196]	@ (8005334 <TIM_Base_SetConfig+0x164>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_Base_SetConfig+0xaa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2c      	ldr	r2, [pc, #176]	@ (8005328 <TIM_Base_SetConfig+0x158>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <TIM_Base_SetConfig+0x144>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <TIM_Base_SetConfig+0x110>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005324 <TIM_Base_SetConfig+0x154>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00f      	beq.n	80052e0 <TIM_Base_SetConfig+0x110>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1a      	ldr	r2, [pc, #104]	@ (800532c <TIM_Base_SetConfig+0x15c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00b      	beq.n	80052e0 <TIM_Base_SetConfig+0x110>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a19      	ldr	r2, [pc, #100]	@ (8005330 <TIM_Base_SetConfig+0x160>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_Base_SetConfig+0x110>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <TIM_Base_SetConfig+0x164>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_Base_SetConfig+0x110>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a13      	ldr	r2, [pc, #76]	@ (8005328 <TIM_Base_SetConfig+0x158>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d103      	bne.n	80052e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]
  }
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40015000 	.word	0x40015000
 800532c:	40014000 	.word	0x40014000
 8005330:	40014400 	.word	0x40014400
 8005334:	40014800 	.word	0x40014800

08005338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f023 0201 	bic.w	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 030a 	bic.w	r3, r3, #10
 8005374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005396:	b480      	push	{r7}
 8005398:	b087      	sub	sp, #28
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f023 0210 	bic.w	r2, r3, #16
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800540c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	f043 0307 	orr.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800544a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e074      	b.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a34      	ldr	r2, [pc, #208]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a33      	ldr	r2, [pc, #204]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a31      	ldr	r2, [pc, #196]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80054de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a21      	ldr	r2, [pc, #132]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d022      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005508:	d01d      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d018      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00e      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a15      	ldr	r2, [pc, #84]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a18      	ldr	r2, [pc, #96]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10c      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800554c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4313      	orrs	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40013400 	.word	0x40013400
 8005588:	40015000 	.word	0x40015000
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40014000 	.word	0x40014000

0800559c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e042      	b.n	80056c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fb fdc9 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2224      	movs	r2, #36	@ 0x24
 8005656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fe86 	bl	8006384 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb87 	bl	8005d8c <UART_SetConfig>
 800567e:	4603      	mov	r3, r0
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e01b      	b.n	80056c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 ff05 	bl	80064c8 <UART_CheckIdleState>
 80056be:	4603      	mov	r3, r0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b0ba      	sub	sp, #232	@ 0xe8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056f6:	4013      	ands	r3, r2
 80056f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11b      	bne.n	800573c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d015      	beq.n	800573c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800571c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8300 	beq.w	8005d32 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4798      	blx	r3
      }
      return;
 800573a:	e2fa      	b.n	8005d32 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800573c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8123 	beq.w	800598c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005746:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800574a:	4b8d      	ldr	r3, [pc, #564]	@ (8005980 <HAL_UART_IRQHandler+0x2b8>)
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005752:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005756:	4b8b      	ldr	r3, [pc, #556]	@ (8005984 <HAL_UART_IRQHandler+0x2bc>)
 8005758:	4013      	ands	r3, r2
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8116 	beq.w	800598c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d011      	beq.n	8005790 <HAL_UART_IRQHandler+0xc8>
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2201      	movs	r2, #1
 800577e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005786:	f043 0201 	orr.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d011      	beq.n	80057c0 <HAL_UART_IRQHandler+0xf8>
 800579c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2202      	movs	r2, #2
 80057ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f043 0204 	orr.w	r2, r3, #4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d011      	beq.n	80057f0 <HAL_UART_IRQHandler+0x128>
 80057cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00b      	beq.n	80057f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2204      	movs	r2, #4
 80057de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e6:	f043 0202 	orr.w	r2, r3, #2
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d017      	beq.n	800582c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005800:	f003 0320 	and.w	r3, r3, #32
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005808:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800580c:	4b5c      	ldr	r3, [pc, #368]	@ (8005980 <HAL_UART_IRQHandler+0x2b8>)
 800580e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2208      	movs	r2, #8
 800581a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005822:	f043 0208 	orr.w	r2, r3, #8
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005834:	2b00      	cmp	r3, #0
 8005836:	d012      	beq.n	800585e <HAL_UART_IRQHandler+0x196>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800584c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8266 	beq.w	8005d36 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d013      	beq.n	800589e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d105      	bne.n	800588e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b2:	2b40      	cmp	r3, #64	@ 0x40
 80058b4:	d005      	beq.n	80058c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d054      	beq.n	800596c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 ff17 	bl	80066f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d2:	2b40      	cmp	r3, #64	@ 0x40
 80058d4:	d146      	bne.n	8005964 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005902:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800590e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800591a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1d9      	bne.n	80058d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <HAL_UART_IRQHandler+0x2c0>)
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800593c:	4618      	mov	r0, r3
 800593e:	f7fd fd4a 	bl	80033d6 <HAL_DMA_Abort_IT>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005956:	4610      	mov	r0, r2
 8005958:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595a:	e00f      	b.n	800597c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f9ff 	bl	8005d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005962:	e00b      	b.n	800597c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f9fb 	bl	8005d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596a:	e007      	b.n	800597c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f9f7 	bl	8005d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800597a:	e1dc      	b.n	8005d36 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	bf00      	nop
    return;
 800597e:	e1da      	b.n	8005d36 <HAL_UART_IRQHandler+0x66e>
 8005980:	10000001 	.word	0x10000001
 8005984:	04000120 	.word	0x04000120
 8005988:	080067c3 	.word	0x080067c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005990:	2b01      	cmp	r3, #1
 8005992:	f040 8170 	bne.w	8005c76 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 8169 	beq.w	8005c76 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 8162 	beq.w	8005c76 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2210      	movs	r2, #16
 80059b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c4:	2b40      	cmp	r3, #64	@ 0x40
 80059c6:	f040 80d8 	bne.w	8005b7a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80af 	beq.w	8005b40 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059ec:	429a      	cmp	r2, r3
 80059ee:	f080 80a7 	bcs.w	8005b40 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f040 8087 	bne.w	8005b1e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1da      	bne.n	8005a10 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e1      	bne.n	8005a5a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005aba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005abc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ac0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e3      	bne.n	8005a96 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aec:	f023 0310 	bic.w	r3, r3, #16
 8005af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005afe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e4      	bne.n	8005adc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fd fc03 	bl	8003324 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f91b 	bl	8005d74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005b3e:	e0fc      	b.n	8005d3a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	f040 80f5 	bne.w	8005d3a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	f040 80eb 	bne.w	8005d3a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8fe 	bl	8005d74 <HAL_UARTEx_RxEventCallback>
      return;
 8005b78:	e0df      	b.n	8005d3a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80d1 	beq.w	8005d3e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80cc 	beq.w	8005d3e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e4      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	623b      	str	r3, [r7, #32]
   return(result);
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bf2:	f023 0301 	bic.w	r3, r3, #1
 8005bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c04:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e1      	bne.n	8005bdc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 0310 	bic.w	r3, r3, #16
 8005c40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	69b9      	ldr	r1, [r7, #24]
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e4      	bne.n	8005c2c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f880 	bl	8005d74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c74:	e063      	b.n	8005d3e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00e      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x5d8>
 8005c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fdcf 	bl	800683c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c9e:	e051      	b.n	8005d44 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d014      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d03a      	beq.n	8005d42 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4798      	blx	r3
    }
    return;
 8005cd4:	e035      	b.n	8005d42 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x62e>
 8005ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fd79 	bl	80067e6 <UART_EndTransmit_IT>
    return;
 8005cf4:	e026      	b.n	8005d44 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <HAL_UART_IRQHandler+0x64e>
 8005d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d06:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fda8 	bl	8006864 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d14:	e016      	b.n	8005d44 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d010      	beq.n	8005d44 <HAL_UART_IRQHandler+0x67c>
 8005d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	da0c      	bge.n	8005d44 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fd90 	bl	8006850 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d30:	e008      	b.n	8005d44 <HAL_UART_IRQHandler+0x67c>
      return;
 8005d32:	bf00      	nop
 8005d34:	e006      	b.n	8005d44 <HAL_UART_IRQHandler+0x67c>
    return;
 8005d36:	bf00      	nop
 8005d38:	e004      	b.n	8005d44 <HAL_UART_IRQHandler+0x67c>
      return;
 8005d3a:	bf00      	nop
 8005d3c:	e002      	b.n	8005d44 <HAL_UART_IRQHandler+0x67c>
      return;
 8005d3e:	bf00      	nop
 8005d40:	e000      	b.n	8005d44 <HAL_UART_IRQHandler+0x67c>
    return;
 8005d42:	bf00      	nop
  }
}
 8005d44:	37e8      	adds	r7, #232	@ 0xe8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop

08005d4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d90:	b08c      	sub	sp, #48	@ 0x30
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4baa      	ldr	r3, [pc, #680]	@ (8006064 <UART_SetConfig+0x2d8>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a9f      	ldr	r2, [pc, #636]	@ (8006068 <UART_SetConfig+0x2dc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df4:	4313      	orrs	r3, r2
 8005df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005e02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e16:	f023 010f 	bic.w	r1, r3, #15
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a90      	ldr	r2, [pc, #576]	@ (800606c <UART_SetConfig+0x2e0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d125      	bne.n	8005e7c <UART_SetConfig+0xf0>
 8005e30:	4b8f      	ldr	r3, [pc, #572]	@ (8006070 <UART_SetConfig+0x2e4>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d81a      	bhi.n	8005e74 <UART_SetConfig+0xe8>
 8005e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <UART_SetConfig+0xb8>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e65 	.word	0x08005e65
 8005e4c:	08005e5d 	.word	0x08005e5d
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5a:	e116      	b.n	800608a <UART_SetConfig+0x2fe>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e62:	e112      	b.n	800608a <UART_SetConfig+0x2fe>
 8005e64:	2304      	movs	r3, #4
 8005e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6a:	e10e      	b.n	800608a <UART_SetConfig+0x2fe>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e72:	e10a      	b.n	800608a <UART_SetConfig+0x2fe>
 8005e74:	2310      	movs	r3, #16
 8005e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7a:	e106      	b.n	800608a <UART_SetConfig+0x2fe>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a7c      	ldr	r2, [pc, #496]	@ (8006074 <UART_SetConfig+0x2e8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d138      	bne.n	8005ef8 <UART_SetConfig+0x16c>
 8005e86:	4b7a      	ldr	r3, [pc, #488]	@ (8006070 <UART_SetConfig+0x2e4>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	2b0c      	cmp	r3, #12
 8005e92:	d82d      	bhi.n	8005ef0 <UART_SetConfig+0x164>
 8005e94:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <UART_SetConfig+0x110>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005ed1 	.word	0x08005ed1
 8005ea0:	08005ef1 	.word	0x08005ef1
 8005ea4:	08005ef1 	.word	0x08005ef1
 8005ea8:	08005ef1 	.word	0x08005ef1
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005ef1 	.word	0x08005ef1
 8005eb4:	08005ef1 	.word	0x08005ef1
 8005eb8:	08005ef1 	.word	0x08005ef1
 8005ebc:	08005ed9 	.word	0x08005ed9
 8005ec0:	08005ef1 	.word	0x08005ef1
 8005ec4:	08005ef1 	.word	0x08005ef1
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ee9 	.word	0x08005ee9
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed6:	e0d8      	b.n	800608a <UART_SetConfig+0x2fe>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ede:	e0d4      	b.n	800608a <UART_SetConfig+0x2fe>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee6:	e0d0      	b.n	800608a <UART_SetConfig+0x2fe>
 8005ee8:	2308      	movs	r3, #8
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eee:	e0cc      	b.n	800608a <UART_SetConfig+0x2fe>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ef6:	e0c8      	b.n	800608a <UART_SetConfig+0x2fe>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a5e      	ldr	r2, [pc, #376]	@ (8006078 <UART_SetConfig+0x2ec>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d125      	bne.n	8005f4e <UART_SetConfig+0x1c2>
 8005f02:	4b5b      	ldr	r3, [pc, #364]	@ (8006070 <UART_SetConfig+0x2e4>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f0c:	2b30      	cmp	r3, #48	@ 0x30
 8005f0e:	d016      	beq.n	8005f3e <UART_SetConfig+0x1b2>
 8005f10:	2b30      	cmp	r3, #48	@ 0x30
 8005f12:	d818      	bhi.n	8005f46 <UART_SetConfig+0x1ba>
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d00a      	beq.n	8005f2e <UART_SetConfig+0x1a2>
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d814      	bhi.n	8005f46 <UART_SetConfig+0x1ba>
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <UART_SetConfig+0x19a>
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	d008      	beq.n	8005f36 <UART_SetConfig+0x1aa>
 8005f24:	e00f      	b.n	8005f46 <UART_SetConfig+0x1ba>
 8005f26:	2300      	movs	r3, #0
 8005f28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f2c:	e0ad      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f34:	e0a9      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f36:	2304      	movs	r3, #4
 8005f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f3c:	e0a5      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f3e:	2308      	movs	r3, #8
 8005f40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f44:	e0a1      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f46:	2310      	movs	r3, #16
 8005f48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f4c:	e09d      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a4a      	ldr	r2, [pc, #296]	@ (800607c <UART_SetConfig+0x2f0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d125      	bne.n	8005fa4 <UART_SetConfig+0x218>
 8005f58:	4b45      	ldr	r3, [pc, #276]	@ (8006070 <UART_SetConfig+0x2e4>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f64:	d016      	beq.n	8005f94 <UART_SetConfig+0x208>
 8005f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f68:	d818      	bhi.n	8005f9c <UART_SetConfig+0x210>
 8005f6a:	2b80      	cmp	r3, #128	@ 0x80
 8005f6c:	d00a      	beq.n	8005f84 <UART_SetConfig+0x1f8>
 8005f6e:	2b80      	cmp	r3, #128	@ 0x80
 8005f70:	d814      	bhi.n	8005f9c <UART_SetConfig+0x210>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <UART_SetConfig+0x1f0>
 8005f76:	2b40      	cmp	r3, #64	@ 0x40
 8005f78:	d008      	beq.n	8005f8c <UART_SetConfig+0x200>
 8005f7a:	e00f      	b.n	8005f9c <UART_SetConfig+0x210>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f82:	e082      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8a:	e07e      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f92:	e07a      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f9a:	e076      	b.n	800608a <UART_SetConfig+0x2fe>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fa2:	e072      	b.n	800608a <UART_SetConfig+0x2fe>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a35      	ldr	r2, [pc, #212]	@ (8006080 <UART_SetConfig+0x2f4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d12a      	bne.n	8006004 <UART_SetConfig+0x278>
 8005fae:	4b30      	ldr	r3, [pc, #192]	@ (8006070 <UART_SetConfig+0x2e4>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fbc:	d01a      	beq.n	8005ff4 <UART_SetConfig+0x268>
 8005fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fc2:	d81b      	bhi.n	8005ffc <UART_SetConfig+0x270>
 8005fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fc8:	d00c      	beq.n	8005fe4 <UART_SetConfig+0x258>
 8005fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fce:	d815      	bhi.n	8005ffc <UART_SetConfig+0x270>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <UART_SetConfig+0x250>
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd8:	d008      	beq.n	8005fec <UART_SetConfig+0x260>
 8005fda:	e00f      	b.n	8005ffc <UART_SetConfig+0x270>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe2:	e052      	b.n	800608a <UART_SetConfig+0x2fe>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fea:	e04e      	b.n	800608a <UART_SetConfig+0x2fe>
 8005fec:	2304      	movs	r3, #4
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ff2:	e04a      	b.n	800608a <UART_SetConfig+0x2fe>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ffa:	e046      	b.n	800608a <UART_SetConfig+0x2fe>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006002:	e042      	b.n	800608a <UART_SetConfig+0x2fe>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a17      	ldr	r2, [pc, #92]	@ (8006068 <UART_SetConfig+0x2dc>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d13a      	bne.n	8006084 <UART_SetConfig+0x2f8>
 800600e:	4b18      	ldr	r3, [pc, #96]	@ (8006070 <UART_SetConfig+0x2e4>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006014:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006018:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800601c:	d01a      	beq.n	8006054 <UART_SetConfig+0x2c8>
 800601e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006022:	d81b      	bhi.n	800605c <UART_SetConfig+0x2d0>
 8006024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006028:	d00c      	beq.n	8006044 <UART_SetConfig+0x2b8>
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800602e:	d815      	bhi.n	800605c <UART_SetConfig+0x2d0>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <UART_SetConfig+0x2b0>
 8006034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006038:	d008      	beq.n	800604c <UART_SetConfig+0x2c0>
 800603a:	e00f      	b.n	800605c <UART_SetConfig+0x2d0>
 800603c:	2300      	movs	r3, #0
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006042:	e022      	b.n	800608a <UART_SetConfig+0x2fe>
 8006044:	2302      	movs	r3, #2
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800604a:	e01e      	b.n	800608a <UART_SetConfig+0x2fe>
 800604c:	2304      	movs	r3, #4
 800604e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006052:	e01a      	b.n	800608a <UART_SetConfig+0x2fe>
 8006054:	2308      	movs	r3, #8
 8006056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800605a:	e016      	b.n	800608a <UART_SetConfig+0x2fe>
 800605c:	2310      	movs	r3, #16
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006062:	e012      	b.n	800608a <UART_SetConfig+0x2fe>
 8006064:	cfff69f3 	.word	0xcfff69f3
 8006068:	40008000 	.word	0x40008000
 800606c:	40013800 	.word	0x40013800
 8006070:	40021000 	.word	0x40021000
 8006074:	40004400 	.word	0x40004400
 8006078:	40004800 	.word	0x40004800
 800607c:	40004c00 	.word	0x40004c00
 8006080:	40005000 	.word	0x40005000
 8006084:	2310      	movs	r3, #16
 8006086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4aae      	ldr	r2, [pc, #696]	@ (8006348 <UART_SetConfig+0x5bc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	f040 8097 	bne.w	80061c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006096:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800609a:	2b08      	cmp	r3, #8
 800609c:	d823      	bhi.n	80060e6 <UART_SetConfig+0x35a>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <UART_SetConfig+0x318>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060c9 	.word	0x080060c9
 80060a8:	080060e7 	.word	0x080060e7
 80060ac:	080060d1 	.word	0x080060d1
 80060b0:	080060e7 	.word	0x080060e7
 80060b4:	080060d7 	.word	0x080060d7
 80060b8:	080060e7 	.word	0x080060e7
 80060bc:	080060e7 	.word	0x080060e7
 80060c0:	080060e7 	.word	0x080060e7
 80060c4:	080060df 	.word	0x080060df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c8:	f7fe fad6 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 80060cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060ce:	e010      	b.n	80060f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d0:	4b9e      	ldr	r3, [pc, #632]	@ (800634c <UART_SetConfig+0x5c0>)
 80060d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060d4:	e00d      	b.n	80060f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d6:	f7fe fa63 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 80060da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060dc:	e009      	b.n	80060f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060e4:	e005      	b.n	80060f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8130 	beq.w	800635a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	4a94      	ldr	r2, [pc, #592]	@ (8006350 <UART_SetConfig+0x5c4>)
 8006100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006104:	461a      	mov	r2, r3
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	fbb3 f3f2 	udiv	r3, r3, r2
 800610c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4413      	add	r3, r2
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	429a      	cmp	r2, r3
 800611c:	d305      	bcc.n	800612a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	429a      	cmp	r2, r3
 8006128:	d903      	bls.n	8006132 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006130:	e113      	b.n	800635a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	2200      	movs	r2, #0
 8006136:	60bb      	str	r3, [r7, #8]
 8006138:	60fa      	str	r2, [r7, #12]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	4a84      	ldr	r2, [pc, #528]	@ (8006350 <UART_SetConfig+0x5c4>)
 8006140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006144:	b29b      	uxth	r3, r3
 8006146:	2200      	movs	r2, #0
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006150:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006154:	f7fa f860 	bl	8000218 <__aeabi_uldivmod>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	020b      	lsls	r3, r1, #8
 800616a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800616e:	0202      	lsls	r2, r0, #8
 8006170:	6979      	ldr	r1, [r7, #20]
 8006172:	6849      	ldr	r1, [r1, #4]
 8006174:	0849      	lsrs	r1, r1, #1
 8006176:	2000      	movs	r0, #0
 8006178:	460c      	mov	r4, r1
 800617a:	4605      	mov	r5, r0
 800617c:	eb12 0804 	adds.w	r8, r2, r4
 8006180:	eb43 0905 	adc.w	r9, r3, r5
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	469a      	mov	sl, r3
 800618c:	4693      	mov	fp, r2
 800618e:	4652      	mov	r2, sl
 8006190:	465b      	mov	r3, fp
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	f7fa f83f 	bl	8000218 <__aeabi_uldivmod>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4613      	mov	r3, r2
 80061a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061a8:	d308      	bcc.n	80061bc <UART_SetConfig+0x430>
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b0:	d204      	bcs.n	80061bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a3a      	ldr	r2, [r7, #32]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	e0ce      	b.n	800635a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061c2:	e0ca      	b.n	800635a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061cc:	d166      	bne.n	800629c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80061ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d827      	bhi.n	8006226 <UART_SetConfig+0x49a>
 80061d6:	a201      	add	r2, pc, #4	@ (adr r2, 80061dc <UART_SetConfig+0x450>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006201 	.word	0x08006201
 80061e0:	08006209 	.word	0x08006209
 80061e4:	08006211 	.word	0x08006211
 80061e8:	08006227 	.word	0x08006227
 80061ec:	08006217 	.word	0x08006217
 80061f0:	08006227 	.word	0x08006227
 80061f4:	08006227 	.word	0x08006227
 80061f8:	08006227 	.word	0x08006227
 80061fc:	0800621f 	.word	0x0800621f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006200:	f7fe fa3a 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8006204:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006206:	e014      	b.n	8006232 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006208:	f7fe fa4c 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 800620c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800620e:	e010      	b.n	8006232 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006210:	4b4e      	ldr	r3, [pc, #312]	@ (800634c <UART_SetConfig+0x5c0>)
 8006212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006214:	e00d      	b.n	8006232 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006216:	f7fe f9c3 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 800621a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800621c:	e009      	b.n	8006232 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006224:	e005      	b.n	8006232 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8090 	beq.w	800635a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623e:	4a44      	ldr	r2, [pc, #272]	@ (8006350 <UART_SetConfig+0x5c4>)
 8006240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006244:	461a      	mov	r2, r3
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	fbb3 f3f2 	udiv	r3, r3, r2
 800624c:	005a      	lsls	r2, r3, #1
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	441a      	add	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	fbb2 f3f3 	udiv	r3, r2, r3
 800625e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2b0f      	cmp	r3, #15
 8006264:	d916      	bls.n	8006294 <UART_SetConfig+0x508>
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d212      	bcs.n	8006294 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f023 030f 	bic.w	r3, r3, #15
 8006276:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	b29a      	uxth	r2, r3
 8006284:	8bfb      	ldrh	r3, [r7, #30]
 8006286:	4313      	orrs	r3, r2
 8006288:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	8bfa      	ldrh	r2, [r7, #30]
 8006290:	60da      	str	r2, [r3, #12]
 8006292:	e062      	b.n	800635a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800629a:	e05e      	b.n	800635a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800629c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d828      	bhi.n	80062f6 <UART_SetConfig+0x56a>
 80062a4:	a201      	add	r2, pc, #4	@ (adr r2, 80062ac <UART_SetConfig+0x520>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	080062d9 	.word	0x080062d9
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	080062f7 	.word	0x080062f7
 80062bc:	080062e7 	.word	0x080062e7
 80062c0:	080062f7 	.word	0x080062f7
 80062c4:	080062f7 	.word	0x080062f7
 80062c8:	080062f7 	.word	0x080062f7
 80062cc:	080062ef 	.word	0x080062ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d0:	f7fe f9d2 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 80062d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062d6:	e014      	b.n	8006302 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d8:	f7fe f9e4 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 80062dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062de:	e010      	b.n	8006302 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e0:	4b1a      	ldr	r3, [pc, #104]	@ (800634c <UART_SetConfig+0x5c0>)
 80062e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062e4:	e00d      	b.n	8006302 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e6:	f7fe f95b 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 80062ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062ec:	e009      	b.n	8006302 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062f4:	e005      	b.n	8006302 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006300:	bf00      	nop
    }

    if (pclk != 0U)
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	d028      	beq.n	800635a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	4a10      	ldr	r2, [pc, #64]	@ (8006350 <UART_SetConfig+0x5c4>)
 800630e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006312:	461a      	mov	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	fbb3 f2f2 	udiv	r2, r3, r2
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	085b      	lsrs	r3, r3, #1
 8006320:	441a      	add	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d910      	bls.n	8006354 <UART_SetConfig+0x5c8>
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006338:	d20c      	bcs.n	8006354 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	b29a      	uxth	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60da      	str	r2, [r3, #12]
 8006344:	e009      	b.n	800635a <UART_SetConfig+0x5ce>
 8006346:	bf00      	nop
 8006348:	40008000 	.word	0x40008000
 800634c:	00f42400 	.word	0x00f42400
 8006350:	08006b80 	.word	0x08006b80
      }
      else
      {
        ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2201      	movs	r2, #1
 800635e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2201      	movs	r2, #1
 8006366:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2200      	movs	r2, #0
 8006374:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006376:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800637a:	4618      	mov	r0, r3
 800637c:	3730      	adds	r7, #48	@ 0x30
 800637e:	46bd      	mov	sp, r7
 8006380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	f003 0310 	and.w	r3, r3, #16
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01a      	beq.n	800649a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006482:	d10a      	bne.n	800649a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
  }
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b098      	sub	sp, #96	@ 0x60
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d8:	f7fb f83a 	bl	8001550 <HAL_GetTick>
 80064dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d12f      	bne.n	800654c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064f4:	2200      	movs	r2, #0
 80064f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f88e 	bl	800661c <UART_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d022      	beq.n	800654c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800651a:	653b      	str	r3, [r7, #80]	@ 0x50
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006524:	647b      	str	r3, [r7, #68]	@ 0x44
 8006526:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800652a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e6      	bne.n	8006506 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e063      	b.n	8006614 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b04      	cmp	r3, #4
 8006558:	d149      	bne.n	80065ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006562:	2200      	movs	r2, #0
 8006564:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f857 	bl	800661c <UART_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d03c      	beq.n	80065ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	623b      	str	r3, [r7, #32]
   return(result);
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006592:	633b      	str	r3, [r7, #48]	@ 0x30
 8006594:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c6:	61fa      	str	r2, [r7, #28]
 80065c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	69b9      	ldr	r1, [r7, #24]
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	617b      	str	r3, [r7, #20]
   return(result);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e012      	b.n	8006614 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3758      	adds	r7, #88	@ 0x58
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	4613      	mov	r3, r2
 800662a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800662c:	e04f      	b.n	80066ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d04b      	beq.n	80066ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006636:	f7fa ff8b 	bl	8001550 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	429a      	cmp	r2, r3
 8006644:	d302      	bcc.n	800664c <UART_WaitOnFlagUntilTimeout+0x30>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e04e      	b.n	80066ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d037      	beq.n	80066ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b80      	cmp	r3, #128	@ 0x80
 8006662:	d034      	beq.n	80066ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b40      	cmp	r3, #64	@ 0x40
 8006668:	d031      	beq.n	80066ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b08      	cmp	r3, #8
 8006676:	d110      	bne.n	800669a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2208      	movs	r2, #8
 800667e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f838 	bl	80066f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2208      	movs	r2, #8
 800668a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e029      	b.n	80066ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a8:	d111      	bne.n	80066ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f81e 	bl	80066f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2220      	movs	r2, #32
 80066be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e00f      	b.n	80066ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4013      	ands	r3, r2
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	429a      	cmp	r2, r3
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d0a0      	beq.n	800662e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b095      	sub	sp, #84	@ 0x54
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800670c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800671c:	643b      	str	r3, [r7, #64]	@ 0x40
 800671e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3308      	adds	r3, #8
 8006752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006754:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006756:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800675a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e3      	bne.n	8006730 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d118      	bne.n	80067a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	60bb      	str	r3, [r7, #8]
   return(result);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f023 0310 	bic.w	r3, r3, #16
 8006784:	647b      	str	r3, [r7, #68]	@ 0x44
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6979      	ldr	r1, [r7, #20]
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	613b      	str	r3, [r7, #16]
   return(result);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e6      	bne.n	8006770 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067b6:	bf00      	nop
 80067b8:	3754      	adds	r7, #84	@ 0x54
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff fac1 	bl	8005d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b088      	sub	sp, #32
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006802:	61fb      	str	r3, [r7, #28]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fa8c 	bl	8005d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006834:	bf00      	nop
 8006836:	3720      	adds	r7, #32
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_UARTEx_EnableFifoMode+0x16>
 800688a:	2302      	movs	r3, #2
 800688c:	e02b      	b.n	80068e6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2224      	movs	r2, #36	@ 0x24
 800689a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0201 	bic.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80068bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80068c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f88a 	bl	80069e8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006902:	2302      	movs	r3, #2
 8006904:	e02d      	b.n	8006962 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2224      	movs	r2, #36	@ 0x24
 8006912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f850 	bl	80069e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800697e:	2302      	movs	r3, #2
 8006980:	e02d      	b.n	80069de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2224      	movs	r2, #36	@ 0x24
 800698e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f812 	bl	80069e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d108      	bne.n	8006a0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a08:	e031      	b.n	8006a6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a0e:	2308      	movs	r3, #8
 8006a10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	0e5b      	lsrs	r3, r3, #25
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	0f5b      	lsrs	r3, r3, #29
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	7b3a      	ldrb	r2, [r7, #12]
 8006a36:	4911      	ldr	r1, [pc, #68]	@ (8006a7c <UARTEx_SetNbDataToProcess+0x94>)
 8006a38:	5c8a      	ldrb	r2, [r1, r2]
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a3e:	7b3a      	ldrb	r2, [r7, #12]
 8006a40:	490f      	ldr	r1, [pc, #60]	@ (8006a80 <UARTEx_SetNbDataToProcess+0x98>)
 8006a42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	7b7a      	ldrb	r2, [r7, #13]
 8006a54:	4909      	ldr	r1, [pc, #36]	@ (8006a7c <UARTEx_SetNbDataToProcess+0x94>)
 8006a56:	5c8a      	ldrb	r2, [r1, r2]
 8006a58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a5c:	7b7a      	ldrb	r2, [r7, #13]
 8006a5e:	4908      	ldr	r1, [pc, #32]	@ (8006a80 <UARTEx_SetNbDataToProcess+0x98>)
 8006a60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	08006b98 	.word	0x08006b98
 8006a80:	08006ba0 	.word	0x08006ba0

08006a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a8c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006a90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	1d3b      	adds	r3, r7, #4
 8006ac4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <memset>:
 8006af6:	4402      	add	r2, r0
 8006af8:	4603      	mov	r3, r0
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d100      	bne.n	8006b00 <memset+0xa>
 8006afe:	4770      	bx	lr
 8006b00:	f803 1b01 	strb.w	r1, [r3], #1
 8006b04:	e7f9      	b.n	8006afa <memset+0x4>
	...

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b40 <__libc_init_array+0x38>)
 8006b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b44 <__libc_init_array+0x3c>)
 8006b0e:	1b64      	subs	r4, r4, r5
 8006b10:	10a4      	asrs	r4, r4, #2
 8006b12:	2600      	movs	r6, #0
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	4d0b      	ldr	r5, [pc, #44]	@ (8006b48 <__libc_init_array+0x40>)
 8006b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b4c <__libc_init_array+0x44>)
 8006b1c:	f000 f818 	bl	8006b50 <_init>
 8006b20:	1b64      	subs	r4, r4, r5
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	2600      	movs	r6, #0
 8006b26:	42a6      	cmp	r6, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b30:	4798      	blx	r3
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3a:	4798      	blx	r3
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	08006bb0 	.word	0x08006bb0
 8006b44:	08006bb0 	.word	0x08006bb0
 8006b48:	08006bb0 	.word	0x08006bb0
 8006b4c:	08006bb8 	.word	0x08006bb8

08006b50 <_init>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	bf00      	nop
 8006b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b56:	bc08      	pop	{r3}
 8006b58:	469e      	mov	lr, r3
 8006b5a:	4770      	bx	lr

08006b5c <_fini>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	bf00      	nop
 8006b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b62:	bc08      	pop	{r3}
 8006b64:	469e      	mov	lr, r3
 8006b66:	4770      	bx	lr
